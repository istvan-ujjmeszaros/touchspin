{
  "metadata": {
    "title": "Bootstrap TouchSpin Architecture Model",
    "version": "2.0.0",
    "description": "Comprehensive JSON model documenting the three-stage architectural evolution of TouchSpin",
    "generated_date": "2025-01-20",
    "analysis_scope": "Complete architectural transformation from simple jQuery plugin to modular framework-agnostic core"
  },
  "architectures": {
    "legacy": {
      "name": "Simple jQuery Plugin",
      "description": "Original basic jQuery plugin with hardcoded Bootstrap markup and minimal features",
      "file_structure": {
        "main_file": "tmp/jquery.bootstrap-touchspin.legacy.js",
        "size_lines": 873,
        "pattern": "Self-contained jQuery plugin with UMD wrapper",
        "dependencies": ["jQuery", "Bootstrap CSS framework"],
        "build_output": "Single concatenated/minified file"
      },
      "architectural_patterns": [
        {
          "pattern": "jQuery Plugin Pattern",
          "description": "Basic jQuery plugin extending $.fn",
          "implementation": "$.fn.TouchSpin = function(options) { return this.each(...) }"
        },
        {
          "pattern": "Closure-based State Management",
          "description": "Simple closure variables with no advanced patterns",
          "implementation": "Local variables in plugin function closure"
        },
        {
          "pattern": "UMD Module Pattern",
          "description": "Universal module definition for compatibility",
          "implementation": "Factory function wrapper with environment detection"
        },
        {
          "pattern": "Hardcoded HTML Templates",
          "description": "Static HTML string templates embedded in code",
          "implementation": "Direct string concatenation for DOM structure"
        }
      ],
      "state_management": {
        "type": "Basic closure-based",
        "scope": "Function-local variables only",
        "persistence": "jQuery .data() API with simple flags",
        "variables": [
          "settings",
          "originalinput",
          "container",
          "elements",
          "value",
          "spinning",
          "spincount",
          "_detached_prefix",
          "_detached_postfix"
        ],
        "identification": "Global _currentSpinnerId counter",
        "duplicate_prevention": "alreadyinitialized flag only"
      },
      "public_api": {
        "initialization": {
          "method": "$(selector).TouchSpin(options)",
          "parameters": ["options: TouchSpinOptions"]
        },
        "interaction": {
          "type": "Callable events only",
          "description": "No command API - only triggerable events",
          "events": [
            "touchspin.destroy",
            "touchspin.uponce",
            "touchspin.downonce",
            "touchspin.startupspin",
            "touchspin.startdownspin",
            "touchspin.stopspin",
            "touchspin.updatesettings"
          ]
        },
        "features": {
          "boundary_checks": "value >= settings.max (not strict equality)",
          "dom_manipulation": "Direct jQuery .val() calls",
          "initialization_steps": 8,
          "aria_support": false,
          "mutation_observers": false,
          "weakmap_storage": false
        }
      }
    },
    "in_between": {
      "name": "Enhanced Monolithic jQuery Plugin",
      "description": "Evolved jQuery plugin with renderer system and command API while remaining monolithic",
      "file_structure": {
        "main_file": "src/jquery.bootstrap-touchspin.js",
        "size_lines": 1502,
        "pattern": "Self-contained jQuery plugin with renderer abstraction",
        "dependencies": ["jQuery", "Bootstrap CSS framework", "RendererFactory"],
        "build_output": "dist/jquery.bootstrap-touchspin.js"
      },
      "architectural_patterns": [
        {
          "pattern": "jQuery Plugin Pattern",
          "description": "Advanced jQuery plugin with command API",
          "implementation": "$.fn.TouchSpin = function(options, arg) with command handling"
        },
        {
          "pattern": "Closure-based State Management",
          "description": "Advanced closure with WeakMap fallback",
          "implementation": "Local variables with __touchspinInternalStore WeakMap"
        },
        {
          "pattern": "Renderer Factory Pattern",
          "description": "Dynamic renderer creation based on Bootstrap version",
          "implementation": "RendererFactory.createRenderer() method"
        },
        {
          "pattern": "Command API Pattern",
          "description": "Programmatic method calls via plugin",
          "implementation": "$(selector).TouchSpin('methodName', args)"
        }
      ],
      "state_management": {
        "type": "Advanced closure-based",
        "scope": "Function-local variables with WeakMap backup",
        "persistence": "jQuery .data() API + WeakMap fallback",
        "variables": [
          "settings",
          "value",
          "spinning",
          "spincount",
          "elements",
          "container",
          "renderer",
          "_detached_prefix",
          "_detached_postfix"
        ],
        "features": {
          "weakmap_storage": true,
          "mutation_observers": true,
          "advanced_validation": true
        }
      },
      "public_api": {
        "initialization": {
          "method": "$(selector).TouchSpin(options)",
          "parameters": ["options: TouchSpinOptions"]
        },
        "commands": {
          "destroy": "Cleanup and restore original input",
          "uponce": "Increment value once",
          "downonce": "Decrement value once",
          "startupspin": "Start continuous increment",
          "startdownspin": "Start continuous decrement",
          "stopspin": "Stop continuous spinning",
          "updatesettings": "Update configuration",
          "getvalue": "Get current numeric value",
          "setvalue": "Set value programmatically"
        },
        "features": {
          "boundary_checks": "Strict equality value === settings.max",
          "initialization_steps": 15,
          "aria_support": true,
          "renderer_abstraction": true,
          "bootstrap_version_detection": true
        }
      }
    },
    "new": {
      "name": "Modular Multi-Package Architecture",
      "description": "Complete architectural rewrite with framework-agnostic core and separate renderer packages",
      "file_structure": {
        "packages": {
          "core": {
            "path": "packages/core/src/",
            "files": ["index.js", "AbstractRenderer.js", "renderer-interface.js"],
            "description": "Framework-agnostic core logic",
            "exports": ["TouchSpinCore", "TouchSpin", "getTouchSpin", "CORE_EVENTS"]
          },
          "jquery-plugin": {
            "path": "packages/jquery-plugin/src/",
            "files": ["index.js"],
            "description": "jQuery wrapper that bridges to core",
            "exports": ["installJqueryTouchSpin"]
          },
          "renderers": {
            "bootstrap3": "packages/renderers/bootstrap3/src/",
            "bootstrap4": "packages/renderers/bootstrap4/src/",
            "bootstrap5": "packages/renderers/bootstrap5/src/",
            "tailwind": "packages/renderers/tailwind/src/"
          }
        },
        "size_estimation": "~200-300 lines per package (distributed)",
        "pattern": "Multi-package monorepo with clear separation of concerns"
      },
      "architectural_patterns": [
        {
          "pattern": "Class-based Architecture",
          "description": "ES6 classes replacing closure-based approach",
          "implementation": "TouchSpinCore class with instance methods"
        },
        {
          "pattern": "Observer Pattern",
          "description": "Setting changes notification system",
          "implementation": "core.observeSetting(key, callback)"
        },
        {
          "pattern": "Dependency Injection",
          "description": "Renderer injected into core constructor",
          "implementation": "new TouchSpinCore(input, opts) with renderer option"
        },
        {
          "pattern": "Abstract Factory Pattern",
          "description": "AbstractRenderer base class for all renderers",
          "implementation": "Renderer extends AbstractRenderer"
        },
        {
          "pattern": "Strategy Pattern",
          "description": "Pluggable renderers for different UI frameworks",
          "implementation": "Renderer classes implementing common interface"
        },
        {
          "pattern": "Bridge Pattern",
          "description": "jQuery plugin bridges to framework-agnostic core",
          "implementation": "jQuery wrapper forwards calls to TouchSpinCore"
        }
      ],
      "state_management": {
        "type": "Class-based instance properties",
        "scope": "TouchSpinCore instance",
        "persistence": "Element property with WeakMap fallback",
        "key": "_touchSpinCore",
        "properties": [
          "input",
          "settings",
          "spinning",
          "spincount",
          "direction",
          "_events",
          "_teardownCallbacks",
          "_settingObservers"
        ],
        "features": {
          "framework_agnostic": true,
          "modular_architecture": true,
          "tree_shakable": true,
          "separate_concerns": true
        }
      },
      "public_api": {
        "initialization": {
          "core": "TouchSpin(inputEl, opts)",
          "jquery": "$(selector).TouchSpin(options)"
        },
        "methods": [
          "upOnce",
          "downOnce",
          "startUpSpin",
          "startDownSpin",
          "stopSpin",
          "updateSettings",
          "getValue",
          "setValue",
          "destroy",
          "on",
          "off"
        ],
        "features": {
          "framework_independence": true,
          "optional_jquery": true,
          "plugin_architecture": true,
          "renderer_abstraction": true,
          "event_system_abstraction": true
        }
      }
    }
  },
  "method_mapping": {
    "description": "Evolution of methods across three architectural stages",
    "public_methods": {
      "upOnce": {
        "legacy": "upOnce() - internal closure function, called via trigger('touchspin.uponce')",
        "in_between": "upOnce() - internal function, accessible via command API",
        "new": "TouchSpinCore.upOnce() - public instance method",
        "evolution": "trigger → command API → direct method call",
        "compatibility": "100% behavioral compatibility maintained"
      },
      "downOnce": {
        "legacy": "downOnce() - internal closure function, called via trigger('touchspin.downonce')",
        "in_between": "downOnce() - internal function, accessible via command API",
        "new": "TouchSpinCore.downOnce() - public instance method",
        "evolution": "trigger → command API → direct method call",
        "compatibility": "100% behavioral compatibility maintained"
      },
      "startUpSpin": {
        "legacy": "startUpSpin() - internal function, called via trigger('touchspin.startupspin')",
        "in_between": "startUpSpin() - internal function, accessible via command API",
        "new": "TouchSpinCore.startUpSpin() - public method",
        "evolution": "trigger → command API → direct method call",
        "compatibility": "Event timing and behavior preserved across all versions"
      },
      "startDownSpin": {
        "legacy": "startDownSpin() - internal function, called via trigger('touchspin.startdownspin')",
        "in_between": "startDownSpin() - internal function, accessible via command API",
        "new": "TouchSpinCore.startDownSpin() - public method",
        "evolution": "trigger → command API → direct method call",
        "compatibility": "Event timing and behavior preserved across all versions"
      },
      "stopSpin": {
        "legacy": "stopSpin() - internal function, called via trigger('touchspin.stopspin')",
        "in_between": "stopSpin() - internal function, accessible via command API",
        "new": "TouchSpinCore.stopSpin() - public method",
        "evolution": "trigger → command API → direct method call",
        "compatibility": "Event order and cleanup logic preserved"
      },
      "updateSettings": {
        "legacy": "changeSettings(newsettings) - internal, called via trigger('touchspin.updatesettings')",
        "in_between": "changeSettings(newsettings) - internal, accessible via command API",
        "new": "TouchSpinCore.updateSettings(opts) - public method",
        "evolution": "trigger → command API → enhanced method with observers",
        "compatibility": "Enhanced with validation and observer notifications"
      },
      "getValue": {
        "legacy": "Not directly available - had to access value variable internally",
        "in_between": "Available via command API - $(selector).TouchSpin('getvalue')",
        "new": "TouchSpinCore.getValue() - dedicated public method",
        "evolution": "internal access → command API → direct method",
        "compatibility": "Consistent numeric value retrieval across versions"
      },
      "setValue": {
        "legacy": "Not directly available - manual .val() and _checkValue() calls",
        "in_between": "Available via command API - $(selector).TouchSpin('setvalue', v)",
        "new": "TouchSpinCore.setValue(v) - dedicated public method",
        "evolution": "manual DOM manipulation → command API → direct method",
        "compatibility": "Enhanced validation and constraint application"
      },
      "destroy": {
        "legacy": "_destroy() - internal cleanup, called via trigger('touchspin.destroy')",
        "in_between": "_destroy() - internal cleanup, accessible via command API",
        "new": "TouchSpinCore.destroy() - public method with teardown callbacks",
        "evolution": "trigger → command API → enhanced cleanup system",
        "compatibility": "Enhanced with comprehensive teardown callback system"
      }
    },
    "internal_methods": {
      "_initSettings": {
        "legacy": "Basic settings merge with data attributes",
        "in_between": "Enhanced settings initialization with validation",
        "new": "TouchSpinCore._sanitizeSettings() + _parseDataAttributes()",
        "evolution": "basic merge → enhanced validation → split focused methods"
      },
      "_buildHtml": {
        "legacy": "Hardcoded HTML string templates for Bootstrap",
        "in_between": "Dynamic HTML construction via RendererFactory",
        "new": "Renderer.init() - fully delegated to renderer classes",
        "evolution": "hardcoded strings → renderer factory → renderer classes"
      },
      "_bindEvents": {
        "legacy": "Simple jQuery event binding to buttons and input",
        "in_between": "Mixed jQuery and native event binding with renderer events",
        "new": "TouchSpinCore._attachDOMEventListeners() + separate renderer events",
        "evolution": "simple jQuery events → mixed binding → separated core/renderer events"
      },
      "_checkValue": {
        "legacy": "Basic value validation with >= boundary checks",
        "in_between": "Enhanced value validation with strict equality checks",
        "new": "TouchSpinCore._checkValue(mayTriggerChange) with constraint application",
        "evolution": "basic validation → strict validation → constraint-based validation"
      },
      "_updateSettings": {
        "legacy": "Simple settings update without notifications",
        "in_between": "Settings update with DOM synchronization",
        "new": "TouchSpinCore.updateSettings() with observer pattern notifications",
        "evolution": "simple update → DOM sync → observer pattern"
      }
    },
    "removed_methods": [
      {
        "method": "_initRenderer",
        "reason": "Renderer creation now handled in constructor",
        "replacement": "Constructor renderer option"
      },
      {
        "method": "_hideEmptyPrefixPostfix",
        "reason": "Delegated to renderer implementation",
        "replacement": "Renderer.hideEmptyPrefixPostfix()"
      },
      {
        "method": "_bindEventsInterface",
        "reason": "jQuery-specific event binding moved to wrapper",
        "replacement": "jQuery plugin handles jQuery events"
      }
    ],
    "new_methods": [
      {
        "method": "on/off/emit",
        "description": "Event system for core events",
        "purpose": "Framework-agnostic event handling"
      },
      {
        "method": "observeSetting",
        "description": "Observer pattern for setting changes",
        "purpose": "Renderer notification of setting updates"
      },
      {
        "method": "attachUpEvents/attachDownEvents",
        "description": "Event attachment methods for renderers",
        "purpose": "Delegate button event handling to core"
      },
      {
        "method": "registerTeardown",
        "description": "Cleanup callback registration",
        "purpose": "Allow wrappers to register cleanup logic"
      },
      {
        "method": "initDOMEventHandling",
        "description": "Initialize DOM event listeners",
        "purpose": "Separate DOM setup from construction"
      }
    ]
  },
  "dependencies": {
    "legacy": {
      "external": [
        {
          "name": "jQuery",
          "version": ">=1.9",
          "usage": "Core dependency for all DOM manipulation and events",
          "scope": "global",
          "mandatory": true
        },
        {
          "name": "Bootstrap CSS",
          "version": "3.x (original target)",
          "usage": "Styling framework - hardcoded class names",
          "scope": "global",
          "mandatory": true
        }
      ],
      "internal": [],
      "characteristics": {
        "dependency_coupling": "tight",
        "framework_flexibility": "none",
        "bundle_size": "monolithic"
      }
    },
    "in_between": {
      "external": [
        {
          "name": "jQuery",
          "version": ">=1.9",
          "usage": "Core dependency for DOM manipulation and events",
          "scope": "global",
          "mandatory": true
        },
        {
          "name": "Bootstrap CSS",
          "version": "3.x/4.x/5.x",
          "usage": "Styling framework - dynamic via renderer system",
          "scope": "global",
          "mandatory": true
        }
      ],
      "internal": [
        {
          "name": "RendererFactory",
          "description": "Global factory for creating Bootstrap-specific renderers",
          "location": "Global scope or built-in"
        }
      ],
      "characteristics": {
        "dependency_coupling": "medium",
        "framework_flexibility": "Bootstrap version abstraction",
        "bundle_size": "monolithic with renderer abstraction"
      }
    },
    "new": {
      "external": [
        {
          "name": "jQuery",
          "version": ">=1.9",
          "usage": "Optional - only required for jQuery plugin wrapper",
          "scope": "jquery-plugin package only",
          "mandatory": false
        },
        {
          "name": "Bootstrap CSS",
          "version": "3.x/4.x/5.x",
          "usage": "Optional - only required for Bootstrap renderer packages",
          "scope": "renderer packages only",
          "mandatory": false
        }
      ],
      "internal": [
        {
          "name": "@touchspin/core",
          "exports": ["TouchSpinCore", "TouchSpin", "getTouchSpin", "AbstractRenderer"],
          "dependents": ["jquery-plugin", "all renderers"]
        },
        {
          "name": "AbstractRenderer",
          "description": "Base class for all renderer implementations",
          "location": "packages/core/src/AbstractRenderer.js"
        }
      ],
      "characteristics": {
        "dependency_coupling": "loose",
        "framework_flexibility": "framework-agnostic core with optional wrappers",
        "bundle_size": "modular - tree-shakable packages"
      },
      "dependency_graph": {
        "core": {
          "dependencies": [],
          "dependents": ["jquery-plugin", "all renderers"]
        },
        "jquery-plugin": {
          "dependencies": ["@touchspin/core", "jQuery"],
          "dependents": []
        },
        "renderers": {
          "dependencies": ["@touchspin/core", "Bootstrap CSS"],
          "dependents": []
        }
      }
    }
  },
  "event_flow": {
    "legacy": {
      "pattern": "Simple jQuery trigger-based system",
      "notification_events": [
        "touchspin.on.min",
        "touchspin.on.max",
        "touchspin.on.startspin",
        "touchspin.on.stopspin",
        "touchspin.on.startupspin",
        "touchspin.on.startdownspin",
        "touchspin.on.stopupspin",
        "touchspin.on.stopdownspin"
      ],
      "callable_events": [
        "touchspin.destroy",
        "touchspin.uponce",
        "touchspin.downonce",
        "touchspin.startupspin",
        "touchspin.startdownspin",
        "touchspin.stopspin",
        "touchspin.updatesettings"
      ],
      "flow": "DOM Events → jQuery Events → Internal Functions",
      "characteristics": {
        "api_style": "trigger-based only",
        "command_api": false,
        "event_abstraction": false
      }
    },
    "in_between": {
      "pattern": "jQuery event system with command API",
      "notification_events": [
        "touchspin.on.min",
        "touchspin.on.max",
        "touchspin.on.startspin",
        "touchspin.on.stopspin",
        "touchspin.on.startupspin",
        "touchspin.on.startdownspin",
        "touchspin.on.stopupspin",
        "touchspin.on.stopdownspin"
      ],
      "callable_events": [
        "touchspin.destroy",
        "touchspin.uponce",
        "touchspin.downonce",
        "touchspin.startupspin",
        "touchspin.startdownspin",
        "touchspin.stopspin",
        "touchspin.updatesettings"
      ],
      "command_api": [
        "$(selector).TouchSpin('destroy')",
        "$(selector).TouchSpin('uponce')",
        "$(selector).TouchSpin('downonce')",
        "$(selector).TouchSpin('getvalue')",
        "$(selector).TouchSpin('setvalue', v)"
      ],
      "flow": "DOM Events → jQuery Events → Internal Functions (via trigger OR command API)",
      "characteristics": {
        "api_style": "dual - trigger + command API",
        "command_api": true,
        "event_abstraction": "jQuery-based"
      }
    },
    "new": {
      "pattern": "Observer pattern with framework-agnostic event system",
      "core_events": [
        "min",
        "max",
        "startspin",
        "stopspin",
        "startupspin",
        "startdownspin",
        "stopupspin",
        "stopdownspin"
      ],
      "flow": "DOM Events → Core Events → Wrapper Events (if applicable)",
      "bridging": {
        "jquery": "Core events bridged to jQuery events for compatibility",
        "native": "Core events available directly via on/off methods"
      },
      "characteristics": {
        "api_style": "direct method calls + framework-agnostic events",
        "command_api": "replaced by direct method calls",
        "event_abstraction": "framework-agnostic with optional jQuery bridge"
      }
    }
  },
  "data_flow": {
    "legacy": {
      "input_processing": "DOM value → callback_before_calculation → parsing → basic validation → callback_after_calculation → DOM display",
      "state_storage": "jQuery .data() API + simple closure variables",
      "settings_flow": "defaults → data attributes → options parameter → internal settings object",
      "characteristics": {
        "validation": "basic boundary checks with >=",
        "callbacks": "simple function calls",
        "state_management": "jQuery data + closure variables"
      }
    },
    "in_between": {
      "input_processing": "DOM value → callback_before_calculation → parsing → enhanced validation → callback_after_calculation → DOM display",
      "state_storage": "jQuery .data() API + WeakMap fallback + closure variables",
      "settings_flow": "defaults → data attributes → options parameter → validation → internal settings object",
      "characteristics": {
        "validation": "strict boundary checks with ===",
        "callbacks": "enhanced callback handling",
        "state_management": "jQuery data + WeakMap + closure variables"
      }
    },
    "new": {
      "input_processing": "DOM value → callback_before_calculation → parsing → constraint application → callback_after_calculation → DOM display",
      "state_storage": "TouchSpinCore instance properties",
      "settings_flow": "defaults → data attributes → options parameter → sanitization → observer notifications",
      "characteristics": {
        "validation": "constraint-based validation system",
        "callbacks": "framework-agnostic callback system",
        "state_management": "class instance properties"
      }
    }
  },
  "interfaces": {
    "original": {
      "TouchSpinOptions": {
        "description": "Configuration interface for jQuery plugin",
        "properties": {
          "min": "number|null - Minimum value",
          "max": "number|null - Maximum value",
          "step": "number - Increment/decrement amount",
          "decimals": "number - Decimal places to display",
          "initval": "string - Initial value if input empty",
          "prefix": "string - Text before input",
          "postfix": "string - Text after input",
          "renderer": "TouchSpinRenderer|null - Custom renderer instance"
        }
      },
      "TouchSpinRenderer": {
        "description": "Renderer interface for Bootstrap compatibility",
        "methods": {
          "buildInputGroup": "() => JQuery - Create basic input group",
          "buildAdvancedInputGroup": "(JQuery) => JQuery - Enhance existing input group",
          "initElements": "(JQuery) => TouchSpinElements - Initialize DOM elements",
          "hideEmptyPrefixPostfix": "() => {_detached_prefix, _detached_postfix}",
          "updatePrefixPostfix": "(settings, detached) => void"
        }
      }
    },
    "new": {
      "TouchSpinCoreOptions": {
        "description": "Core configuration interface",
        "properties": {
          "min": "number|null - Minimum value",
          "max": "number|null - Maximum value",
          "step": "number - Step amount",
          "decimals": "number - Decimal precision",
          "renderer": "Function - Renderer class constructor",
          "callback_before_calculation": "TouchSpinCalcCallback",
          "callback_after_calculation": "TouchSpinCalcCallback"
        }
      },
      "TouchSpinCorePublicAPI": {
        "description": "Public API interface returned by toPublicApi()",
        "methods": {
          "upOnce": "() => void - Increment once",
          "downOnce": "() => void - Decrement once",
          "startUpSpin": "() => void - Start continuous increment",
          "startDownSpin": "() => void - Start continuous decrement",
          "stopSpin": "() => void - Stop spinning",
          "updateSettings": "(opts) => void - Update configuration",
          "getValue": "() => number - Get current value",
          "setValue": "(v) => void - Set value",
          "destroy": "() => void - Cleanup instance"
        }
      },
      "AbstractRenderer": {
        "description": "Base renderer interface",
        "methods": {
          "init": "() => void - Initialize renderer (must implement)",
          "teardown": "() => void - Cleanup renderer",
          "removeInjectedElements": "() => void - Remove DOM elements"
        },
        "properties": {
          "input": "HTMLInputElement - Input element reference",
          "settings": "Object - Read-only settings",
          "core": "TouchSpinCore - Core instance reference"
        }
      }
    }
  },
  "transformation_summary": {
    "three_stage_evolution": {
      "stage_1_legacy": {
        "description": "Simple jQuery plugin with hardcoded Bootstrap markup",
        "characteristics": [
          "873 lines of basic functionality",
          "Hardcoded HTML string templates",
          "Trigger-based API only",
          "Basic boundary validation (>=)",
          "Global _currentSpinnerId counter",
          "No ARIA support, no mutation observers"
        ]
      },
      "stage_2_in_between": {
        "description": "Enhanced monolithic plugin with renderer abstraction",
        "characteristics": [
          "1,502 lines with advanced features",
          "RendererFactory system for Bootstrap version support",
          "Dual API: triggers + command API",
          "Strict boundary validation (===)",
          "WeakMap storage + jQuery data",
          "ARIA support and mutation observers"
        ]
      },
      "stage_3_new": {
        "description": "Complete modular rewrite with framework-agnostic core",
        "characteristics": [
          "~200-300 lines per package (distributed architecture)",
          "Class-based TouchSpinCore with renderer injection",
          "Direct method calls + framework-agnostic events",
          "Constraint-based validation system",
          "Element property storage with WeakMap fallback",
          "Pluggable renderer system for any UI framework"
        ]
      }
    },
    "architectural_changes": [
      {
        "stage": "Legacy → In-Between",
        "changes": "Added renderer abstraction, command API, enhanced validation",
        "benefit": "Bootstrap version flexibility while maintaining monolithic structure"
      },
      {
        "stage": "In-Between → New",
        "changes": "Complete modular rewrite with framework-agnostic core",
        "benefit": "Framework independence, tree-shaking, separation of concerns"
      },
      {
        "stage": "Legacy → New (Overall)",
        "changes": "Simple jQuery plugin → modular framework-agnostic architecture",
        "benefit": "Maximum flexibility, reduced bundle size, broader compatibility"
      }
    ],
    "api_evolution": {
      "interaction_methods": "triggers → triggers + commands → direct method calls",
      "event_system": "jQuery events → jQuery events + command API → framework-agnostic events + jQuery bridge",
      "state_management": "closure variables → closure + WeakMap → class instance properties",
      "dependency_model": "tight jQuery coupling → jQuery + renderer factory → optional jQuery + pluggable renderers"
    },
    "compatibility": {
      "behavioral": "100% backward compatible across all three stages",
      "api": "Legacy triggers work through all stages via compatibility layers",
      "events": "Event names and timing preserved across evolution",
      "dom_output": "Identical DOM structure maintained via renderer system",
      "settings": "All configuration options preserved with enhanced validation"
    },
    "benefits_by_stage": {
      "legacy": ["Simple, working jQuery plugin", "Basic TouchSpin functionality"],
      "in_between": [
        "Bootstrap version flexibility",
        "Enhanced validation",
        "Command API convenience"
      ],
      "new": [
        "Framework agnostic core",
        "Tree-shakable modules",
        "Pluggable renderer system",
        "Reduced bundle size for non-jQuery users",
        "Better testability and maintainability"
      ]
    }
  }
}
