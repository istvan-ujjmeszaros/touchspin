{"version":3,"file":"touchspin-tailwind.min.js","sources":["../packages/core/src/index.js","../packages/core/src/AbstractRenderer.js","../packages/renderers/tailwind/src/TailwindRenderer.js","../src/entries/standalone-tailwind.js"],"sourcesContent":["// @ts-check\n\n/**\n * @fileoverview Framework-agnostic core scaffold for TouchSpin.\n * Phase A (A1): minimal public API surface to enable incremental extraction.\n * This is a placeholder; logic will be ported from TouchSpinCore.migrated.js in A2â€“A7.\n */\n\n/**\n * @typedef {'none'|'floor'|'round'|'ceil'} ForceStepDivisibility\n */\n\n/**\n * @callback TouchSpinCalcCallback\n * @param {string} value\n * @returns {string}\n */\n\n/**\n * @typedef {Object} TouchSpinCoreOptions\n * @property {number|null=} min\n * @property {number|null=} max\n * @property {number|null=} firstclickvalueifempty\n * @property {number=} step\n * @property {number=} decimals\n * @property {ForceStepDivisibility=} forcestepdivisibility\n * @property {number=} stepinterval\n * @property {number=} stepintervaldelay\n * @property {boolean=} booster\n * @property {number=} boostat\n * @property {number|false=} maxboostedstep\n * @property {TouchSpinCalcCallback=} callback_before_calculation\n * @property {TouchSpinCalcCallback=} callback_after_calculation\n * @property {Function} renderer - Renderer class (e.g., Bootstrap5Renderer) or null for no UI\n * @property {string=} initval - Initial value for the input\n * @property {string=} replacementval - Value to use when input is empty\n * @property {boolean=} mousewheel - Enable/disable mousewheel support\n * @property {boolean=} verticalbuttons - Enable vertical button layout\n * @property {string=} verticalup - Text for vertical up button\n * @property {string=} verticaldown - Text for vertical down button\n * @property {string=} verticalupclass - CSS classes for vertical up button (handled by renderer)\n * @property {string=} verticaldownclass - CSS classes for vertical down button (handled by renderer)\n * @property {string=} prefix - Text/HTML before input (handled by renderer)\n * @property {string=} postfix - Text/HTML after input (handled by renderer)\n * @property {string=} prefix_extraclass - Extra CSS classes for prefix element (handled by renderer)\n * @property {string=} postfix_extraclass - Extra CSS classes for postfix element (handled by renderer)\n * @property {string=} buttonup_class - CSS classes for up button (handled by renderer)\n * @property {string=} buttondown_class - CSS classes for down button (handled by renderer)\n * @property {string=} buttonup_txt - Content for up button (handled by renderer)\n * @property {string=} buttondown_txt - Content for down button (handled by renderer)\n */\n\nconst DEFAULTS = {\n  min: 0,\n  max: 100,\n  initval: '',\n  replacementval: '',\n  firstclickvalueifempty: null,\n  step: 1,\n  decimals: 0,\n  forcestepdivisibility: 'round',\n  stepinterval: 100,\n  stepintervaldelay: 500,\n  verticalbuttons: false,\n  verticalup: '+',\n  verticaldown: '-',\n  verticalupclass: null,\n  verticaldownclass: null,\n  prefix: '',\n  postfix: '',\n  prefix_extraclass: '',\n  postfix_extraclass: '',\n  booster: true,\n  boostat: 10,\n  maxboostedstep: false,\n  mousewheel: true,\n  buttonup_class: null,\n  buttondown_class: null,\n  buttonup_txt: '+',\n  buttondown_txt: '-',\n  callback_before_calculation: (v) => v,\n  callback_after_calculation: (v) => v,\n};\n\nconst INSTANCE_KEY = '_touchSpinCore';\n\nexport class TouchSpinCore {\n  /**\n   * @param {HTMLInputElement} inputEl\n   * @param {Partial<TouchSpinCoreOptions>=} opts\n   */\n  constructor(inputEl, opts = {}) {\n    if (!inputEl || inputEl.nodeName !== 'INPUT') {\n      throw new Error('TouchSpinCore requires an <input> element');\n    }\n\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n    \n    // Parse data-bts-* attributes\n    const dataAttrs = this._parseDataAttributes(inputEl);\n    \n    /** @type {TouchSpinCoreOptions} */\n    this.settings = Object.assign({}, DEFAULTS, dataAttrs, opts);\n\n    // Check for renderer: explicit option > global default > none\n    if (!this.settings.renderer) {\n      // Check for global default renderer\n      if (typeof globalThis !== 'undefined' && globalThis.TouchSpinDefaultRenderer) {\n        this.settings.renderer = globalThis.TouchSpinDefaultRenderer;\n      } else {\n        // Allow no renderer for keyboard/wheel-only functionality\n        console.warn('TouchSpin: No renderer specified (renderer: null). Only keyboard/wheel events will work. Consider using Bootstrap3/4/5Renderer or TailwindRenderer for UI.');\n      }\n    }\n\n    /** @type {boolean} */\n    this.spinning = false;\n    /** @type {number} */\n    this.spincount = 0;\n    /** @type {false|'up'|'down'} */\n    this.direction = false;\n    /** @type {Map<string, Set<Function>>} */\n    this._events = new Map();\n    /** @type {Array<Function>} */\n    this._teardownCallbacks = [];\n    /** @type {Map<string, Set<Function>>} */\n    this._settingObservers = new Map(); // For observer pattern\n\n    /** @type {ReturnType<typeof setTimeout>|null} */\n    this._spinDelayTimeout = null;\n    /** @type {ReturnType<typeof setInterval>|null} */\n    this._spinIntervalTimer = null;\n\n    /** @type {HTMLElement|null} */\n    this._upButton = null;\n    /** @type {HTMLElement|null} */\n    this._downButton = null;\n    /** @type {HTMLElement|null} */\n    this._wrapper = null;\n\n    // DOM event handlers (bound methods)\n    this._handleUpMouseDown = this._handleUpMouseDown.bind(this);\n    this._handleDownMouseDown = this._handleDownMouseDown.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this._handleInputChange = this._handleInputChange.bind(this);\n    this._handleInputBlur = this._handleInputBlur.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this._handleKeyUp = this._handleKeyUp.bind(this);\n    this._handleWheel = this._handleWheel.bind(this);\n\n    // Core always manages the input element\n    this._initializeInput();\n\n    // Initialize renderer with reference to core\n    if (this.settings.renderer) {\n      this.renderer = new this.settings.renderer(inputEl, this.settings, this);\n      this.renderer.init();\n    }\n\n    // Set up mutation observer to watch for disabled/readonly changes\n    this._setupMutationObserver();\n  }\n\n  /**\n   * Initialize input element (core always handles this)\n   * @private\n   */\n  _initializeInput() {\n    // Set initial value if specified and input is empty\n    if (this.settings.initval !== '' && this.input.value === '') {\n      this.input.value = this.settings.initval;\n    }\n    \n    // Core always handles these for the input\n    this._updateAriaAttributes();\n    this._checkValue(false);\n  }\n\n  /**\n   * Parse data-bts-* attributes from the input element.\n   * @param {HTMLInputElement} inputEl\n   * @returns {Partial<TouchSpinCoreOptions>}\n   * @private\n   */\n  _parseDataAttributes(inputEl) {\n    const attributeMap = {\n      min: 'min',\n      max: 'max',\n      initval: 'init-val',\n      replacementval: 'replacement-val',\n      firstclickvalueifempty: 'first-click-value-if-empty',\n      step: 'step',\n      decimals: 'decimals',\n      stepinterval: 'step-interval',\n      verticalbuttons: 'vertical-buttons',\n      verticalup: 'vertical-up',\n      verticaldown: 'vertical-down',\n      verticalupclass: 'vertical-up-class',\n      verticaldownclass: 'vertical-down-class',\n      forcestepdivisibility: 'force-step-divisibility',\n      stepintervaldelay: 'step-interval-delay',\n      prefix: 'prefix',\n      postfix: 'postfix',\n      prefix_extraclass: 'prefix-extra-class',\n      postfix_extraclass: 'postfix-extra-class',\n      booster: 'booster',\n      boostat: 'boostat',\n      maxboostedstep: 'max-boosted-step',\n      mousewheel: 'mouse-wheel',\n      buttondown_class: 'button-down-class',\n      buttonup_class: 'button-up-class',\n      buttondown_txt: 'button-down-txt',\n      buttonup_txt: 'button-up-txt'\n    };\n\n    const parsed = {};\n\n    // Parse data-bts-* attributes\n    for (const [optionName, attrName] of Object.entries(attributeMap)) {\n      const fullAttrName = `data-bts-${attrName}`;\n      if (inputEl.hasAttribute(fullAttrName)) {\n        const rawValue = inputEl.getAttribute(fullAttrName);\n        parsed[optionName] = this._coerceAttributeValue(optionName, rawValue);\n      }\n    }\n\n    // Also handle native attributes with precedence (warn if both specified)\n    for (const nativeAttr of ['min', 'max', 'step']) {\n      if (inputEl.hasAttribute(nativeAttr)) {\n        const rawValue = inputEl.getAttribute(nativeAttr);\n        if (parsed[nativeAttr] !== undefined) {\n          console.warn(`Both \"data-bts-${nativeAttr}\" and \"${nativeAttr}\" attributes specified. Native attribute takes precedence.`, inputEl);\n        }\n        parsed[nativeAttr] = this._coerceAttributeValue(nativeAttr, rawValue);\n      }\n    }\n\n    return parsed;\n  }\n\n  /**\n   * Convert string attribute values to appropriate types.\n   * @param {string} optionName\n   * @param {string} rawValue\n   * @returns {any}\n   * @private\n   */\n  _coerceAttributeValue(optionName, rawValue) {\n    if (rawValue === null || rawValue === undefined) {\n      return rawValue;\n    }\n\n    // Boolean attributes\n    if (['booster', 'mousewheel', 'verticalbuttons'].includes(optionName)) {\n      return rawValue === 'true' || rawValue === '' || rawValue === optionName;\n    }\n\n    // Numeric attributes\n    if (['min', 'max', 'step', 'decimals', 'stepinterval', 'stepintervaldelay', \n         'boostat', 'maxboostedstep', 'firstclickvalueifempty'].includes(optionName)) {\n      const num = parseFloat(rawValue);\n      return isNaN(num) ? rawValue : num;\n    }\n\n    // String attributes - return as-is\n    return rawValue;\n  }\n\n  /** Increment once according to step */\n  upOnce() {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('up', v);\n    \n    // Check if already at max boundary before incrementing\n    if (this.settings.max != null && v === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n      return;\n    }\n    \n    // Fire max event BEFORE setting display if we're reaching max\n    if (this.settings.max != null && next === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n    }\n    \n    this._setDisplay(next, true);\n  }\n\n  /** Decrement once according to step */\n  downOnce() {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('down', v);\n    \n    // Check if already at min boundary before decrementing\n    if (this.settings.min != null && v === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n      return;\n    }\n    \n    // Fire min event BEFORE setting display if we're reaching min\n    if (this.settings.min != null && next === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n    }\n    \n    this._setDisplay(next, true);\n  }\n\n  /** Start increasing repeatedly (placeholder) */\n  startUpSpin() { this._startSpin('up'); }\n\n  /** Start decreasing repeatedly (placeholder) */\n  startDownSpin() { this._startSpin('down'); }\n\n  /** Stop spinning (placeholder) */\n  stopSpin() {\n    this._clearSpinTimers();\n    if (this.spinning) {\n      if (this.direction === 'up') {\n        this.emit('stopupspin');\n        this.emit('stopspin');\n      } else if (this.direction === 'down') {\n        this.emit('stopdownspin');\n        this.emit('stopspin');\n      }\n    }\n    this.spinning = false;\n    this.direction = false;\n    this.spincount = 0;\n  }\n\n  /**\n   * @param {Partial<TouchSpinCoreOptions>} opts\n   */\n  updateSettings(opts) {\n    const oldSettings = { ...this.settings };\n    const newSettings = opts || {};\n\n    this.settings = Object.assign({}, this.settings, newSettings);\n\n    // If step/min/max changed and step != 1, align bounds to step like the jQuery plugin\n    const step = Number(this.settings.step || 1);\n    if ((newSettings.step !== undefined || newSettings.min !== undefined || newSettings.max !== undefined) && step !== 1) {\n      if (this.settings.max != null) {\n        this.settings.max = this._alignToStep(Number(this.settings.max), step, 'down');\n      }\n      if (this.settings.min != null) {\n        this.settings.min = this._alignToStep(Number(this.settings.min), step, 'up');\n      }\n    }\n\n    // Notify observers of changed settings\n    Object.keys(newSettings).forEach(key => {\n      if (oldSettings[key] !== newSettings[key]) {\n        const observers = this._settingObservers.get(key);\n        if (observers) {\n          observers.forEach(callback => {\n            try {\n              callback(newSettings[key], oldSettings[key]);\n            } catch (error) {\n              console.error('TouchSpin: Error in setting observer callback:', error);\n            }\n          });\n        }\n      }\n    });\n\n    // Core handles its own setting changes\n    this._updateAriaAttributes();\n    this._checkValue(false);\n  }\n\n  /** @returns {number} */\n  getValue() {\n    let raw = this.input.value;\n    if (raw === '' && this.settings.replacementval !== '') {\n      raw = this.settings.replacementval;\n    }\n    if (raw === '') return NaN;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    return isNaN(num) ? NaN : num;\n  }\n\n  /**\n   * @param {number|string} v\n   */\n  setValue(v) {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    const parsed = Number(v);\n    if (!isFinite(parsed)) return;\n    const adjusted = this._applyConstraints(parsed);\n    this._setDisplay(adjusted, true);\n  }\n\n  /**\n   * Initialize DOM event handling by finding elements and attaching listeners.\n   * Must be called after the renderer has created the DOM structure.\n   */\n  initDOMEventHandling() {\n    // Find DOM elements and attach listeners\n    this._findDOMElements();\n    this._attachDOMEventListeners();\n  }\n\n  /**\n   * Register a teardown callback that will be called when the instance is destroyed.\n   * This allows wrapper libraries to register cleanup logic.\n   * @param {Function} callback - Function to call on destroy\n   * @returns {Function} - Unregister function\n   */\n  registerTeardown(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Teardown callback must be a function');\n    }\n    this._teardownCallbacks.push(callback);\n\n    // Return unregister function\n    return () => {\n      const index = this._teardownCallbacks.indexOf(callback);\n      if (index > -1) {\n        this._teardownCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /** Cleanup and destroy the TouchSpin instance */\n  destroy() {\n    this.stopSpin();\n\n    // Renderer cleans up its added elements\n    if (this.renderer && this.renderer.teardown) {\n      this.renderer.teardown();\n    }\n\n    // Core cleans up input events only\n    this._detachDOMEventListeners();\n\n    // Call all registered teardown callbacks (for wrapper cleanup)\n    this._teardownCallbacks.forEach(callback => {\n      try {\n        callback();\n      } catch (error) {\n        console.error('TouchSpin teardown callback error:', error);\n      }\n    });\n    this._teardownCallbacks.length = 0; // Clear the array\n\n    // Clear setting observers\n    this._settingObservers.clear();\n\n    // Clean up mutation observer\n    if (this._mutationObserver) {\n      this._mutationObserver.disconnect();\n      this._mutationObserver = null;\n    }\n\n    // Clear button references\n    this._upButton = null;\n    this._downButton = null;\n\n    // Remove instance from element\n    if (this.input[INSTANCE_KEY] === this) {\n      delete this.input[INSTANCE_KEY];\n    }\n  }\n\n  /**\n   * Create a plain public API object with bound methods for wrappers.\n   * @returns {TouchSpinCorePublicAPI}\n   */\n  toPublicApi() {\n    return {\n      upOnce: this.upOnce.bind(this),\n      downOnce: this.downOnce.bind(this),\n      startUpSpin: this.startUpSpin.bind(this),\n      startDownSpin: this.startDownSpin.bind(this),\n      stopSpin: this.stopSpin.bind(this),\n      updateSettings: this.updateSettings.bind(this),\n      getValue: this.getValue.bind(this),\n      setValue: this.setValue.bind(this),\n      destroy: this.destroy.bind(this),\n      on: this.on.bind(this),\n      off: this.off.bind(this),\n      initDOMEventHandling: this.initDOMEventHandling.bind(this),\n      registerTeardown: this.registerTeardown.bind(this),\n      attachUpEvents: this.attachUpEvents.bind(this),\n      attachDownEvents: this.attachDownEvents.bind(this),\n      observeSetting: this.observeSetting.bind(this),\n    };\n  }\n\n  // --- Renderer Event Attachment Methods ---\n  /**\n   * Attach up button events to an element\n   * Called by renderers after creating up button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachUpEvents(element) {\n    if (!element) {\n      console.warn('TouchSpin: attachUpEvents called with null element');\n      return;\n    }\n\n    this._upButton = element;\n    element.addEventListener('mousedown', this._handleUpMouseDown);\n    element.addEventListener('touchstart', this._handleUpMouseDown, {passive: false});\n    \n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  /**\n   * Attach down button events to an element\n   * Called by renderers after creating down button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachDownEvents(element) {\n    if (!element) {\n      console.warn('TouchSpin: attachDownEvents called with null element');\n      return;\n    }\n\n    this._downButton = element;\n    element.addEventListener('mousedown', this._handleDownMouseDown);\n    element.addEventListener('touchstart', this._handleDownMouseDown, {passive: false});\n    \n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  // --- Settings Observer Pattern ---\n  /**\n   * Allow renderers to observe setting changes\n   * @param {string} settingName - Name of setting to observe\n   * @param {Function} callback - Function to call when setting changes (newValue, oldValue)\n   * @returns {Function} Unsubscribe function\n   */\n  observeSetting(settingName, callback) {\n    if (!this._settingObservers.has(settingName)) {\n      this._settingObservers.set(settingName, new Set());\n    }\n\n    const observers = this._settingObservers.get(settingName);\n    observers.add(callback);\n\n    // Return unsubscribe function\n    return () => observers.delete(callback);\n  }\n\n  // --- Minimal internal emitter API ---\n  /**\n   * Subscribe to a core event.\n   * Events: 'min', 'max', 'startspin', 'startupspin', 'startdownspin', 'stopspin', 'stopupspin', 'stopdownspin'\n   * @param {string} event\n   * @param {(detail?: any) => void} handler\n   */\n  on(event, handler) {\n    const set = this._events.get(event) || new Set();\n    set.add(handler);\n    this._events.set(event, set);\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Unsubscribe from a core event.\n   * @param {string} event\n   * @param {(detail?: any) => void=} handler\n   */\n  off(event, handler) {\n    const set = this._events.get(event);\n    if (!set) return;\n    if (!handler) {\n      this._events.delete(event);\n      return;\n    }\n    set.delete(handler);\n    if (set.size === 0) this._events.delete(event);\n  }\n\n  /**\n   * Emit a core event to subscribers.\n   * @param {string} event\n   * @param {any=} detail\n   */\n  emit(event, detail) {\n    const set = this._events.get(event);\n    if (!set || set.size === 0) return;\n    for (const fn of [...set]) {\n      try { fn(detail); } catch (_) {}\n    }\n  }\n\n  /**\n   * Internal: start timed spin in a direction with initial step, delay, then interval.\n   * @param {'up'|'down'} dir\n   */\n  _startSpin(dir) {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    // If changing direction, reset counters\n    const changed = (!this.spinning || this.direction !== dir);\n    if (changed) {\n      this.spinning = true;\n      this.direction = dir;\n      this.spincount = 0;\n      // Match jQuery plugin event order: startspin then direction-specific\n      this.emit('startspin');\n      if (dir === 'up') this.emit('startupspin'); else this.emit('startdownspin');\n    }\n\n    // Clear previous timers\n    this._clearSpinTimers();\n    // Schedule repeat after delay, then at interval (no immediate step; wrapper triggers first step)\n    const delay = this.settings.stepintervaldelay || 500;\n    const interval = this.settings.stepinterval || 100;\n    this._spinDelayTimeout = setTimeout(() => {\n      this._spinDelayTimeout = null;\n      this._spinIntervalTimer = setInterval(() => {\n        if (!this.spinning || this.direction !== dir) return; // safety\n        this._spinStep(dir);\n      }, interval);\n    }, delay);\n  }\n\n  _clearSpinTimers() {\n    try { if (this._spinDelayTimeout) { clearTimeout(this._spinDelayTimeout); } } catch {}\n    try { if (this._spinIntervalTimer) { clearInterval(this._spinIntervalTimer); } } catch {}\n    this._spinDelayTimeout = null;\n    this._spinIntervalTimer = null;\n  }\n\n  /**\n   * Compute the next numeric value for a direction, respecting step, booster and bounds.\n   * @param {'up'|'down'} dir\n   * @param {number} current\n   */\n  _nextValue(dir, current) {\n    let v = current;\n    if (isNaN(v)) {\n      v = this._valueIfIsNaN();\n    } else {\n      const base = this.settings.step || 1;\n      const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n      const stepUnclamped = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n      const mbs = this.settings.maxboostedstep;\n      let step = stepUnclamped;\n      if (mbs && isFinite(mbs) && stepUnclamped > Number(mbs)) {\n        step = Number(mbs);\n        // Align current value to the boosted step grid when clamped (parity with jQuery plugin)\n        v = Math.round(v / step) * step;\n      }\n      step = Math.max(base, step);\n      v = dir === 'up' ? v + step : v - step;\n    }\n    return this._applyConstraints(v);\n  }\n\n  /** Returns a reasonable value to use when current is NaN. */\n  _valueIfIsNaN() {\n    if (typeof this.settings.firstclickvalueifempty === 'number') {\n      return this.settings.firstclickvalueifempty;\n    }\n    const min = (typeof this.settings.min === 'number') ? this.settings.min : 0;\n    const max = (typeof this.settings.max === 'number') ? this.settings.max : min;\n    return (min + max) / 2;\n  }\n\n  /** Apply step divisibility and clamp to min/max. */\n  _applyConstraints(v) {\n    const aligned = this._forcestepdivisibility(v);\n    const min = this.settings.min;\n    const max = this.settings.max;\n    let clamped = aligned;\n    if (min != null && clamped < min) clamped = min;\n    if (max != null && clamped > max) clamped = max;\n    return clamped;\n  }\n\n  /** Determine the effective step with booster if enabled. */\n  _getBoostedStep() {\n    const base = this.settings.step || 1;\n    if (!this.settings.booster) return base;\n    const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n    let boosted = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n    const mbs = this.settings.maxboostedstep;\n    if (mbs && isFinite(mbs)) {\n      const cap = Number(mbs);\n      if (boosted > cap) boosted = cap;\n    }\n    return Math.max(base, boosted);\n  }\n\n  /** Aligns value to step per forcestepdivisibility. */\n  _forcestepdivisibility(val) {\n    const mode = this.settings.forcestepdivisibility || 'round';\n    const step = this.settings.step || 1;\n    const dec = this.settings.decimals || 0;\n    let out;\n    switch (mode) {\n      case 'floor':\n        out = Math.floor(val / step) * step; break;\n      case 'ceil':\n        out = Math.ceil(val / step) * step; break;\n      case 'none':\n        out = val; break;\n      case 'round':\n      default:\n        out = Math.round(val / step) * step; break;\n    }\n    // Normalize to configured decimals without string pipeline; formatting applies later\n    return Number(out.toFixed(dec));\n  }\n\n  /** Aligns a value to nearest step boundary using integer arithmetic. */\n  _alignToStep(val, step, dir) {\n    if (step === 0) return val;\n    let k = 1, s = step;\n    while (((s * k) % 1) !== 0 && k < 1e6) k *= 10;\n    const V = Math.round(val * k);\n    const S = Math.round(step * k);\n    const r = V % S;\n    if (r === 0) return val;\n    return (dir === 'down' ? (V - r) : (V + (S - r))) / k;\n  }\n\n  /** Format and write to input, optionally emit change if different. */\n  _setDisplay(num, mayTriggerChange) {\n    const prev = String(this.input.value ?? '');\n    const next = this._formatDisplay(num);\n    this.input.value = next;\n    this._updateAriaAttributes();\n    if (mayTriggerChange && prev !== next) {\n      // mirror plugin behavior: trigger a native change event\n      this.input.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    return next;\n  }\n\n  _formatDisplay(num) {\n    const dec = this.settings.decimals || 0;\n    const after = this.settings.callback_after_calculation || ((v) => v);\n    const s = Number(num).toFixed(dec);\n    return after(s);\n  }\n\n  /**\n   * Perform one spin step in a direction while tracking spincount for booster.\n   * @param {'up'|'down'} dir\n   */\n  _spinStep(dir) {\n    this.spincount++;\n    if (dir === 'up') this.upOnce(); else this.downOnce();\n  }\n\n  /** Sanitize current input value and update display; optionally emits change. */\n  _checkValue(mayTriggerChange) {\n    const v = this.getValue();\n    if (!isFinite(v)) return;\n    const adjusted = this._applyConstraints(v);\n    this._setDisplay(adjusted, !!mayTriggerChange);\n  }\n\n  _updateAriaAttributes() {\n    const el = this.input;\n    if (el.getAttribute('role') !== 'spinbutton') {\n      el.setAttribute('role', 'spinbutton');\n    }\n    const min = this.settings.min;\n    const max = this.settings.max;\n    if (min != null) el.setAttribute('aria-valuemin', String(min)); else el.removeAttribute('aria-valuemin');\n    if (max != null) el.setAttribute('aria-valuemax', String(max)); else el.removeAttribute('aria-valuemax');\n    const raw = el.value;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    if (isFinite(num)) el.setAttribute('aria-valuenow', String(num)); else el.removeAttribute('aria-valuenow');\n    el.setAttribute('aria-valuetext', String(raw));\n  }\n\n  // --- DOM Event Handling Methods ---\n\n  /**\n   * Find and store references to DOM elements using data-touchspin-injected attributes.\n   * @private\n   */\n  _findDOMElements() {\n    // Core doesn't need to find buttons - renderers handle button events directly\n    // We only need to find the wrapper for potential future use\n    let wrapper = this.input.parentElement;\n    while (wrapper && !wrapper.hasAttribute('data-touchspin-injected')) {\n      wrapper = wrapper.parentElement;\n    }\n    this._wrapper = wrapper;\n  }\n\n  /**\n   * Attach DOM event listeners to elements.\n   * @private\n   */\n  _attachDOMEventListeners() {\n    // Core should NOT attach button events - renderers handle that via attachUpEvents/attachDownEvents\n\n    // Global mouseup/touchend to stop spinning\n    document.addEventListener('mouseup', this._handleMouseUp);\n    document.addEventListener('mouseleave', this._handleMouseUp);\n    document.addEventListener('touchend', this._handleMouseUp);\n\n    // Input events (always attach these - they work without renderer UI)\n    this.input.addEventListener('change', this._handleInputChange, true); // Capture phase to intercept\n    this.input.addEventListener('blur', this._handleInputBlur);\n    this.input.addEventListener('keydown', this._handleKeyDown);\n    this.input.addEventListener('keyup', this._handleKeyUp);\n    this.input.addEventListener('wheel', this._handleWheel);\n  }\n\n  /**\n   * Remove DOM event listeners.\n   * @private\n   */\n  _detachDOMEventListeners() {\n    // Core does not manage button events - renderers handle their own cleanup\n\n    // Global events\n    document.removeEventListener('mouseup', this._handleMouseUp);\n    document.removeEventListener('mouseleave', this._handleMouseUp);\n    document.removeEventListener('touchend', this._handleMouseUp);\n\n    // Input events\n    this.input.removeEventListener('change', this._handleInputChange, true);\n    this.input.removeEventListener('blur', this._handleInputBlur);\n    this.input.removeEventListener('keydown', this._handleKeyDown);\n    this.input.removeEventListener('keyup', this._handleKeyUp);\n    this.input.removeEventListener('wheel', this._handleWheel);\n  }\n\n  // --- DOM Event Handlers ---\n\n  /**\n   * Handle mousedown/touchstart on up button.\n   * @private\n   */\n  _handleUpMouseDown(e) {\n    e.preventDefault();\n    this.upOnce();\n    this.startUpSpin();\n  }\n\n  /**\n   * Handle mousedown/touchstart on down button.\n   * @private\n   */\n  _handleDownMouseDown(e) {\n    e.preventDefault();\n    this.downOnce();\n    this.startDownSpin();\n  }\n\n  /**\n   * Handle mouseup/touchend/mouseleave to stop spinning.\n   * @private\n   */\n  _handleMouseUp(e) {\n    this.stopSpin();\n  }\n\n  /**\n   * Intercept change events to prevent wrong values from propagating.\n   * @private\n   */\n  _handleInputChange(e) {\n    const currentValue = this.getValue();\n    const wouldBeSanitized = this._applyConstraints(currentValue);\n    \n    if (isFinite(currentValue) && currentValue !== wouldBeSanitized) {\n      // This change event has wrong value - prevent it from propagating\n      e.stopImmediatePropagation();\n      // Don't sanitize here - blur handler will do it with correct change event\n    }\n    // If values match, let the change event through normally\n  }\n\n  /**\n   * Handle blur events on the input element for sanitization.\n   * @private\n   */\n  _handleInputBlur(e) {\n    this._checkValue(true);\n  }\n\n  /**\n   * Handle keydown events on the input element.\n   * @private\n   */\n  _handleKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowUp':\n        e.preventDefault();\n        this.upOnce();\n        this.startUpSpin();\n        break;\n      case 'ArrowDown':\n        e.preventDefault();\n        this.downOnce();\n        this.startDownSpin();\n        break;\n      case 'Enter':\n        this._checkValue(false);\n        break;\n    }\n  }\n\n  /**\n   * Handle keyup events on the input element.\n   * @private\n   */\n  _handleKeyUp(e) {\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle wheel events on the input element.\n   * @private\n   */\n  _handleWheel(e) {\n    if (!this.settings.mousewheel) {\n      return;\n    }\n    \n    if (document.activeElement === this.input) {\n      e.preventDefault();\n      if (e.deltaY < 0) {\n        this.upOnce();\n      } else if (e.deltaY > 0) {\n        this.downOnce();\n      }\n    }\n  }\n\n  /**\n   * Set up mutation observer to watch for disabled/readonly attribute changes\n   * @private\n   */\n  _setupMutationObserver() {\n    if (typeof MutationObserver !== 'undefined') {\n      this._mutationObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (mutation.type === 'attributes') {\n            if (mutation.attributeName === 'disabled' || mutation.attributeName === 'readonly') {\n              this._updateButtonDisabledState();\n            }\n          }\n        });\n      });\n\n      this._mutationObserver.observe(this.input, {\n        attributes: true,\n        attributeFilter: ['disabled', 'readonly']\n      });\n    }\n  }\n\n  /**\n   * Update button disabled state based on input disabled/readonly state\n   * @private\n   */\n  _updateButtonDisabledState() {\n    const isDisabled = this.input.disabled || this.input.hasAttribute('readonly');\n    \n    if (this._upButton) {\n      this._upButton.disabled = isDisabled;\n    }\n    if (this._downButton) {\n      this._downButton.disabled = isDisabled;\n    }\n\n    if (isDisabled) {\n      this.stopSpin();\n    }\n  }\n}\n\n/**\n * @typedef {Object} TouchSpinCorePublicAPI\n * @property {() => void} upOnce\n * @property {() => void} downOnce\n * @property {() => void} startUpSpin\n * @property {() => void} startDownSpin\n * @property {() => void} stopSpin\n * @property {(opts: Partial<TouchSpinCoreOptions>) => void} updateSettings\n * @property {() => number} getValue\n * @property {(v: number|string) => void} setValue\n * @property {() => void} destroy\n * @property {(event: string, handler: (detail?: any) => void) => () => void} on\n * @property {(event: string, handler?: (detail?: any) => void) => void} off\n * @property {() => void} initDOMEventHandling\n * @property {(callback: Function) => () => void} registerTeardown\n */\n\n/**\n * Initialize TouchSpin on an input element or get existing instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI}\n */\nexport function TouchSpin(inputEl, opts) {\n  // If options provided, initialize/reinitialize\n  if (opts !== undefined) {\n    // Destroy existing instance if it exists (destroy() removes itself from element)\n    if (inputEl[INSTANCE_KEY]) {\n      inputEl[INSTANCE_KEY].destroy();\n    }\n\n    // Create new instance and store on element\n    const core = new TouchSpinCore(inputEl, opts);\n    inputEl[INSTANCE_KEY] = core;\n\n    // Initialize DOM event handling\n    core.initDOMEventHandling();\n\n    return core.toPublicApi();\n  }\n\n  // No options - return existing instance or create with defaults\n  if (!inputEl[INSTANCE_KEY]) {\n    const core = new TouchSpinCore(inputEl, {});\n    inputEl[INSTANCE_KEY] = core;\n    core.initDOMEventHandling();\n    return core.toPublicApi();\n  }\n\n  return inputEl[INSTANCE_KEY].toPublicApi();\n}\n\n/**\n * Get existing TouchSpin instance from input element (without creating one).\n * @param {HTMLInputElement} inputEl\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function getTouchSpin(inputEl) {\n  return inputEl[INSTANCE_KEY] ? inputEl[INSTANCE_KEY].toPublicApi() : null;\n}\n\n/**\n * Create and return a plain public API bound to a new core instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI}\n * @deprecated Use TouchSpin() instead\n */\nexport function createPublicApi(inputEl, opts) {\n  return TouchSpin(inputEl, opts);\n}\n\n/** Event name constants for wrappers to map/bridge. */\nexport const CORE_EVENTS = Object.freeze({\n  MIN: 'min',\n  MAX: 'max',\n  START_SPIN: 'startspin',\n  START_UP: 'startupspin',\n  START_DOWN: 'startdownspin',\n  STOP_SPIN: 'stopspin',\n  STOP_UP: 'stopupspin',\n  STOP_DOWN: 'stopdownspin',\n});\n\n/**\n * Convenience helper to attach core to an input element.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCore}\n */\nexport function attach(inputEl, opts) {\n  return new TouchSpinCore(inputEl, opts);\n}\n\nexport default TouchSpinCore;\n\n// Note: AbstractRenderer is not exported as it's only needed by renderer implementations\n// Renderers should import it directly: import AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n","/**\n * AbstractRenderer - Base class for TouchSpin renderers\n * Part of @touchspin/core package to avoid duplication across renderer packages\n * \n * @example\n * class CustomRenderer extends AbstractRenderer {\n *   init() {\n *     this.wrapper = this.buildUI();\n *     const upBtn = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n *     const downBtn = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n *     this.core.attachUpEvents(upBtn);\n *     this.core.attachDownEvents(downBtn);\n *     this.core.observeSetting('prefix', (value) => this.updatePrefix(value));\n *   }\n * }\n */\nclass AbstractRenderer {\n  /**\n   * @param {HTMLInputElement} inputEl - The input element to render around\n   * @param {Object} settings - TouchSpin settings (read-only)\n   * @param {Object} core - TouchSpin core instance for event delegation\n   */\n  constructor(inputEl, settings, core) {\n    // New renderer architecture\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n    /** @type {Object} */\n    this.settings = settings; // Read-only access to settings\n    /** @type {Object} */\n    this.core = core; // Reference to core for calling attachment methods\n    /** @type {HTMLElement|null} */\n    this.wrapper = null; // Set by subclasses during init()\n    \n    // Legacy compatibility (transitional)\n    this.$ = typeof $ !== 'undefined' ? $ : null;\n    this.originalinput = this.$ ? this.$(inputEl) : null;\n    this.container = null;\n    this.elements = null;\n  }\n\n  /**\n   * Initialize the renderer - build DOM structure and attach events\n   * Must be implemented by subclasses\n   * @abstract\n   */\n  init() { \n    throw new Error('init() must be implemented by renderer'); \n  }\n  \n  /**\n   * Cleanup renderer - remove injected elements and restore original state\n   * Default implementation removes all injected elements\n   * Subclasses can override for custom teardown\n   */\n  teardown() {\n    // Default implementation - remove all injected elements\n    this.removeInjectedElements();\n    // Subclasses can override for custom teardown\n  }\n  \n  /**\n   * Utility method to remove all injected TouchSpin elements\n   * Handles both regular wrappers and advanced input groups\n   * Called automatically by teardown()\n   */\n  removeInjectedElements() {\n    // Find and remove all elements with data-touchspin-injected attribute\n    if (this.wrapper) {\n      const injected = this.wrapper.querySelectorAll('[data-touchspin-injected]');\n      injected.forEach(el => el.remove());\n      \n      // If wrapper itself was injected and is not the original parent\n      if (this.wrapper.hasAttribute('data-touchspin-injected') && this.wrapper.parentElement) {\n        const injectedType = this.wrapper.getAttribute('data-touchspin-injected');\n        \n        if (injectedType === 'wrapper-advanced') {\n          // For advanced input groups, just remove the TouchSpin classes and attribute\n          // but keep the original input-group structure intact\n          this.wrapper.classList.remove('bootstrap-touchspin');\n          this.wrapper.removeAttribute('data-touchspin-injected');\n        } else {\n          // For regular wrappers, unwrap the input element\n          const parent = this.wrapper.parentElement;\n          parent.insertBefore(this.input, this.wrapper);\n          this.wrapper.remove();\n        }\n      }\n    }\n    \n    // Also find any injected elements that might be siblings or elsewhere\n    const allInjected = document.querySelectorAll('[data-touchspin-injected]');\n    allInjected.forEach(el => {\n      // Only remove if it's related to this input (check if input is descendant or sibling)\n      if (el.contains(this.input) || \n          (el.parentElement && el.parentElement.contains(this.input)) ||\n          this.input.parentElement?.contains(el)) {\n        // Don't remove the input itself\n        if (el !== this.input) {\n          el.remove();\n        }\n      }\n    });\n  }\n\n  // Legacy methods (transitional - for backward compatibility)\n  getFrameworkId() { throw new Error('getFrameworkId() must be implemented by subclasses'); }\n  buildAdvancedInputGroup(parentelement) { throw new Error('buildAdvancedInputGroup() must be implemented by subclasses'); }\n  buildInputGroup() { throw new Error('buildInputGroup() must be implemented by subclasses'); }\n  buildVerticalButtons() { throw new Error('buildVerticalButtons() must be implemented by subclasses'); }\n\n  initElements(container) {\n    this.container = container;\n    let downButtons = this._findElements(container, 'down');\n    let upButtons = this._findElements(container, 'up');\n    if (downButtons.length === 0 || upButtons.length === 0) {\n      const verticalContainer = this._findElements(container.parent(), 'vertical-wrapper');\n      if (verticalContainer.length > 0) {\n        downButtons = this._findElements(verticalContainer, 'down');\n        upButtons = this._findElements(verticalContainer, 'up');\n      }\n    }\n    \n    // Ensure input element has data-touchspin-injected=\"input\" for core event targeting\n    this.originalinput.attr('data-touchspin-injected', 'input');\n    \n    this.elements = {\n      down: downButtons,\n      up: upButtons,\n      input: this.$('input', container),\n      prefix: this._findElements(container, 'prefix').addClass(this.settings.prefix_extraclass),\n      postfix: this._findElements(container, 'postfix').addClass(this.settings.postfix_extraclass)\n    };\n    return this.elements;\n  }\n\n  _findElements(container, role) { return this.$(`[data-touchspin-injected=\"${role}\"]`, container); }\n\n  hideEmptyPrefixPostfix() {\n    const detached = {};\n    if (this.settings.prefix === '') detached._detached_prefix = this.elements.prefix.detach();\n    if (this.settings.postfix === '') detached._detached_postfix = this.elements.postfix.detach();\n    return detached;\n  }\n\n  updatePrefixPostfix(newsettings, detached) { throw new Error('updatePrefixPostfix() must be implemented by subclasses'); }\n\n  getWrapperTestId() {\n    // Modern vanilla JS version\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-wrapper\"`;\n    return '';\n  }\n}\n\nexport default AbstractRenderer;","/**\n * Tailwind CSS Renderer - New Architecture\n * Uses Tailwind utility classes only; no Bootstrap CSS dependency.\n */\nimport AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n\nclass TailwindRenderer extends AbstractRenderer {\n\n  init() {\n    // 1. Build and inject DOM structure around input\n    this.wrapper = this.buildInputGroup();\n    \n    // 2. Find created buttons\n    const upButton = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n    const downButton = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n    \n    // 3. Tell core to attach its event handlers\n    this.core.attachUpEvents(upButton);\n    this.core.attachDownEvents(downButton);\n    \n    // 4. Register for setting changes we care about\n    this.core.observeSetting('prefix', (newValue) => this.updatePrefix(newValue));\n    this.core.observeSetting('postfix', (newValue) => this.updatePostfix(newValue));\n    this.core.observeSetting('buttonup_class', (newValue) => this.updateButtonClass('up', newValue));\n    this.core.observeSetting('buttondown_class', (newValue) => this.updateButtonClass('down', newValue));\n    this.core.observeSetting('verticalupclass', (newValue) => this.updateVerticalButtonClass('up', newValue));\n    this.core.observeSetting('verticaldownclass', (newValue) => this.updateVerticalButtonClass('down', newValue));\n    this.core.observeSetting('verticalup', (newValue) => this.updateVerticalButtonText('up', newValue));\n    this.core.observeSetting('verticaldown', (newValue) => this.updateVerticalButtonText('down', newValue));\n  }\n\n  // teardown() uses inherited removeInjectedElements() - no override needed\n\n  buildInputGroup() {\n    // Check if input is already inside a flex container\n    const existingContainer = this.input.closest('.flex');\n    \n    if (existingContainer && existingContainer.classList.contains('rounded-md')) {\n      return this.buildAdvancedInputGroup(existingContainer);\n    } else {\n      return this.buildBasicInputGroup();\n    }\n  }\n\n  buildBasicInputGroup() {\n    const inputSize = this._detectInputSize();\n    const isVertical = this.settings.verticalbuttons;\n    const testidAttr = this.getWrapperTestId();\n    \n    let html;\n    if (isVertical) {\n      html = `\n        <div class=\"flex rounded-md shadow-sm border border-gray-300 bootstrap-touchspin focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-blue-500 has-[:disabled]:opacity-60 has-[:disabled]:bg-gray-50 has-[:read-only]:bg-gray-50\" data-touchspin-injected=\"wrapper\"${testidAttr}>\n          <span class=\"inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon\" data-touchspin-injected=\"prefix\">${this.settings.prefix || ''}</span>\n          ${this.buildVerticalButtons()}\n          <span class=\"inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon\" data-touchspin-injected=\"postfix\">${this.settings.postfix || ''}</span>\n        </div>\n      `;\n    } else {\n      html = `\n        <div class=\"flex rounded-md shadow-sm border border-gray-300 bootstrap-touchspin focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-blue-500 has-[:disabled]:opacity-60 has-[:disabled]:bg-gray-50 has-[:read-only]:bg-gray-50\" data-touchspin-injected=\"wrapper\"${testidAttr}>\n          <button tabindex=\"-1\" class=\"inline-flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-gray-100 text-gray-700 font-medium border-0 rounded-l-md tailwind-btn bootstrap-touchspin-down ${this.settings.buttondown_class || ''}\" data-touchspin-injected=\"down\" type=\"button\" aria-label=\"Decrease value\">${this.settings.buttondown_txt || 'âˆ’'}</button>\n          <span class=\"inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon\" data-touchspin-injected=\"prefix\">${this.settings.prefix || ''}</span>\n          <span class=\"inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon\" data-touchspin-injected=\"postfix\">${this.settings.postfix || ''}</span>\n          <button tabindex=\"-1\" class=\"inline-flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-gray-100 text-gray-700 font-medium border-0 rounded-r-md tailwind-btn bootstrap-touchspin-up ${this.settings.buttonup_class || ''}\" data-touchspin-injected=\"up\" type=\"button\" aria-label=\"Increase value\">${this.settings.buttonup_txt || '+'}</button>\n        </div>\n      `;\n    }\n    \n    // Create wrapper and wrap the input\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = html.trim();\n    const wrapper = tempDiv.firstChild;\n    \n    // Insert wrapper and move input into it\n    this.input.parentElement.insertBefore(wrapper, this.input);\n    \n    // Find the position to insert input (after prefix, before postfix)\n    const prefixEl = wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n    if (prefixEl) {\n      wrapper.insertBefore(this.input, prefixEl.nextSibling);\n    } else {\n      const postfixEl = wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n      wrapper.insertBefore(this.input, postfixEl);\n    }\n    \n    // Apply input styling\n    this.input.className = this.input.className.replace('form-control', '');\n    this.input.classList.add('flex-1', 'px-3', 'py-2', 'border-0', 'bg-transparent', 'focus:outline-none', 'text-gray-900', 'placeholder-gray-500');\n    \n    // Apply size classes\n    this._applySizeClasses(wrapper);\n    \n    // Hide empty prefix/postfix\n    this.hideEmptyPrefixPostfix(wrapper);\n    \n    return wrapper;\n  }\n\n  buildAdvancedInputGroup(existingContainer) {\n    // Add bootstrap-touchspin class to existing container\n    existingContainer.classList.add('bootstrap-touchspin');\n    existingContainer.setAttribute('data-touchspin-injected', 'wrapper-advanced');\n    \n    // Add testid if input has one\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) {\n      existingContainer.setAttribute('data-testid', `${inputTestId}-wrapper`);\n    }\n    \n    const isVertical = this.settings.verticalbuttons;\n    \n    // Create elements HTML\n    let elementsHtml;\n    if (isVertical) {\n      elementsHtml = `\n        <span class=\"inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon\" data-touchspin-injected=\"prefix\">${this.settings.prefix || ''}</span>\n        ${this.buildVerticalButtons()}\n        <span class=\"inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon\" data-touchspin-injected=\"postfix\">${this.settings.postfix || ''}</span>\n      `;\n    } else {\n      elementsHtml = `\n        <span class=\"inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon\" data-touchspin-injected=\"prefix\">${this.settings.prefix || ''}</span>\n        <button tabindex=\"-1\" class=\"inline-flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-gray-100 text-gray-700 font-medium border-0 tailwind-btn bootstrap-touchspin-down ${this.settings.buttondown_class || ''}\" data-touchspin-injected=\"down\" type=\"button\" aria-label=\"Decrease value\">${this.settings.buttondown_txt || 'âˆ’'}</button>\n        <button tabindex=\"-1\" class=\"inline-flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-gray-100 text-gray-700 font-medium border-0 tailwind-btn bootstrap-touchspin-up ${this.settings.buttonup_class || ''}\" data-touchspin-injected=\"up\" type=\"button\" aria-label=\"Increase value\">${this.settings.buttonup_txt || '+'}</button>\n        <span class=\"inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon\" data-touchspin-injected=\"postfix\">${this.settings.postfix || ''}</span>\n      `;\n    }\n    \n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = elementsHtml;\n    \n    // Insert prefix before the input\n    const prefixEl = tempDiv.querySelector('[data-touchspin-injected=\"prefix\"]');\n    existingContainer.insertBefore(prefixEl, this.input);\n    \n    if (isVertical) {\n      // Insert vertical button wrapper after the input\n      const verticalWrapper = tempDiv.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n      existingContainer.insertBefore(verticalWrapper, this.input.nextSibling);\n    } else {\n      // Insert down button before the input\n      const downButton = tempDiv.querySelector('[data-touchspin-injected=\"down\"]');\n      existingContainer.insertBefore(downButton, this.input);\n      \n      // Insert up button after the input\n      const upButton = tempDiv.querySelector('[data-touchspin-injected=\"up\"]');\n      existingContainer.insertBefore(upButton, this.input.nextSibling);\n    }\n    \n    // Insert postfix after everything\n    const postfixEl = tempDiv.querySelector('[data-touchspin-injected=\"postfix\"]');\n    existingContainer.appendChild(postfixEl);\n    \n    // Apply input styling\n    this.input.className = this.input.className.replace('form-control', '');\n    this.input.classList.add('flex-1', 'px-3', 'py-2', 'border-0', 'bg-transparent', 'focus:outline-none', 'text-gray-900', 'placeholder-gray-500');\n    \n    // Apply size classes\n    this._applySizeClasses(existingContainer);\n    \n    // Hide empty prefix/postfix\n    this.hideEmptyPrefixPostfix(existingContainer);\n    \n    return existingContainer;\n  }\n\n  _detectInputSize() {\n    const classList = this.input.className;\n    if (classList.includes('text-sm') || classList.includes('py-1')) {\n      return 'text-sm py-1 px-2';\n    } else if (classList.includes('text-lg') || classList.includes('py-3')) {\n      return 'text-lg py-3 px-4';\n    }\n    return 'text-base py-2 px-3';\n  }\n\n  _applySizeClasses(wrapper = this.wrapper) {\n    const s = this._detectInputSize();\n    if (s.includes('text-sm')) {\n      wrapper.classList.add('text-sm');\n      wrapper.querySelectorAll('.tailwind-btn').forEach(btn => {\n        btn.classList.add('py-1', 'px-2', 'text-sm');\n      });\n      wrapper.querySelectorAll('.tailwind-addon').forEach(addon => {\n        addon.classList.add('py-1', 'px-2', 'text-sm');\n      });\n    } else if (s.includes('text-lg')) {\n      wrapper.classList.add('text-lg');\n      wrapper.querySelectorAll('.tailwind-btn').forEach(btn => {\n        btn.classList.add('py-3', 'px-4', 'text-lg');\n      });\n      wrapper.querySelectorAll('.tailwind-addon').forEach(addon => {\n        addon.classList.add('py-3', 'px-4', 'text-lg');\n      });\n    }\n  }\n\n  hideEmptyPrefixPostfix(wrapper = this.wrapper) {\n    const prefixEl = wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n    const postfixEl = wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n    \n    if (prefixEl && (!this.settings.prefix || this.settings.prefix === '')) {\n      prefixEl.remove();\n    }\n    if (postfixEl && (!this.settings.postfix || this.settings.postfix === '')) {\n      postfixEl.remove();\n    }\n  }\n\n  updatePrefix(value) {\n    let prefixEl = this.wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n    \n    if (value && value !== '') {\n      if (!prefixEl) {\n        // Re-create prefix element if it was removed\n        prefixEl = document.createElement('span');\n        prefixEl.className = 'inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon';\n        prefixEl.setAttribute('data-touchspin-injected', 'prefix');\n        prefixEl.textContent = value;\n        // Insert at the beginning of the wrapper\n        this.wrapper.insertBefore(prefixEl, this.wrapper.firstChild);\n      } else {\n        prefixEl.textContent = value;\n      }\n    } else if (prefixEl) {\n      // Remove element if value is empty\n      prefixEl.remove();\n    }\n  }\n  \n  updatePostfix(value) {\n    let postfixEl = this.wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n    \n    if (value && value !== '') {\n      if (!postfixEl) {\n        // Re-create postfix element if it was removed\n        postfixEl = document.createElement('span');\n        postfixEl.className = 'inline-flex items-center px-3 py-2 bg-gray-50 text-gray-600 border-0 tailwind-addon';\n        postfixEl.setAttribute('data-touchspin-injected', 'postfix');\n        postfixEl.textContent = value;\n        // Insert at the end of the wrapper\n        this.wrapper.appendChild(postfixEl);\n      } else {\n        postfixEl.textContent = value;\n      }\n    } else if (postfixEl) {\n      // Remove element if value is empty\n      postfixEl.remove();\n    }\n  }\n  \n  updateButtonClass(type, className) {\n    const button = this.wrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n    if (button) {\n      // Remove old custom classes and add new ones\n      const baseClasses = 'inline-flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-gray-100 text-gray-700 font-medium border-0 tailwind-btn';\n      const directionalClass = type === 'up' ? 'bootstrap-touchspin-up' : 'bootstrap-touchspin-down';\n      button.className = `${baseClasses} ${directionalClass} ${className || ''}`;\n    }\n  }\n\n  buildVerticalButtons() {\n    return `\n      <div class=\"flex flex-col ml-1 bootstrap-touchspin-vertical-button-wrapper\" data-touchspin-injected=\"vertical-wrapper\">\n        <button tabindex=\"-1\" class=\"inline-flex items-center justify-center px-2 py-1 text-xs ${this.settings.verticalupclass || 'bg-gray-100 hover:bg-gray-200 text-gray-700'} font-medium border border-gray-300 rounded-t tailwind-btn bootstrap-touchspin-up disabled:opacity-50 disabled:cursor-not-allowed\" data-touchspin-injected=\"up\" type=\"button\" aria-label=\"Increase value\">${this.settings.verticalup || '+'}</button>\n        <button tabindex=\"-1\" class=\"inline-flex items-center justify-center px-2 py-1 text-xs ${this.settings.verticaldownclass || 'bg-gray-100 hover:bg-gray-200 text-gray-700'} font-medium border border-t-0 border-gray-300 rounded-b tailwind-btn bootstrap-touchspin-down disabled:opacity-50 disabled:cursor-not-allowed\" data-touchspin-injected=\"down\" type=\"button\" aria-label=\"Decrease value\">${this.settings.verticaldown || 'âˆ’'}</button>\n      </div>\n    `;\n  }\n\n  updateVerticalButtonClass(type, className) {\n    const verticalWrapper = this.wrapper.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n    if (verticalWrapper) {\n      const button = verticalWrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n      if (button) {\n        // Update the vertical-specific class while preserving base classes\n        const baseClasses = 'inline-flex items-center justify-center px-2 py-1 text-xs font-medium border border-gray-300 tailwind-btn disabled:opacity-50 disabled:cursor-not-allowed';\n        const roundingClass = type === 'up' ? 'rounded-t border-b-0' : 'rounded-b border-t-0';\n        const directionalClass = `bootstrap-touchspin-${type}`;\n        button.className = `${baseClasses} ${roundingClass} ${directionalClass} ${className || 'bg-gray-100 hover:bg-gray-200 text-gray-700'}`;\n      }\n    }\n  }\n\n  updateVerticalButtonText(type, text) {\n    const verticalWrapper = this.wrapper.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n    if (verticalWrapper) {\n      const button = verticalWrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n      if (button) {\n        button.textContent = text || (type === 'up' ? '+' : 'âˆ’');\n      }\n    }\n  }\n\n}\n\nexport default TailwindRenderer;\n","// Standalone Tailwind build entry point\nimport { TouchSpin as CoreTouchSpin, TouchSpinCore, getTouchSpin } from '../../packages/core/src/index.js';\nimport TailwindRenderer from '../../packages/renderers/tailwind/src/TailwindRenderer.js';\n\n// Create a wrapper that automatically sets the Tailwind renderer\nfunction TouchSpin(element, options = {}) {\n  if (!(element instanceof Element)) {\n    throw new TypeError('TouchSpin expects an HTMLElement');\n  }\n  \n  // Set the baked-in renderer for this build\n  options.renderer = options.renderer || TailwindRenderer;\n  \n  // Use the core TouchSpin function which properly handles initDOMEventHandling\n  return CoreTouchSpin(element, options);\n}\n\n// Expose additional API functions\nTouchSpin.get = getTouchSpin;\nTouchSpin.destroy = (element) => {\n  const instance = getTouchSpin(element);\n  if (instance && instance.destroy) {\n    instance.destroy();\n    return true;\n  }\n  return false;\n};\n\n// For standalone builds, ensure globals are properly exposed\nif (typeof window !== 'undefined') {\n  window.TouchSpin = TouchSpin;\n  window.TouchSpinCore = TouchSpinCore;\n  window.getTouchSpin = getTouchSpin;\n  window.TailwindRenderer = TailwindRenderer;\n}\n\n// Export for module systems only (no default export)\nexport { TouchSpin, TouchSpinCore, getTouchSpin, TailwindRenderer };"],"names":["DEFAULTS","min","max","initval","replacementval","firstclickvalueifempty","step","decimals","forcestepdivisibility","stepinterval","stepintervaldelay","verticalbuttons","verticalup","verticaldown","verticalupclass","verticaldownclass","prefix","postfix","prefix_extraclass","postfix_extraclass","booster","boostat","maxboostedstep","mousewheel","buttonup_class","buttondown_class","buttonup_txt","buttondown_txt","callback_before_calculation","v","callback_after_calculation","INSTANCE_KEY","TouchSpinCore","_createClass","inputEl","opts","arguments","length","undefined","_classCallCheck","nodeName","Error","this","input","dataAttrs","_parseDataAttributes","settings","Object","assign","renderer","globalThis","TouchSpinDefaultRenderer","console","warn","spinning","spincount","direction","_events","Map","_teardownCallbacks","_settingObservers","_spinDelayTimeout","_spinIntervalTimer","_upButton","_downButton","_wrapper","_handleUpMouseDown","bind","_handleDownMouseDown","_handleMouseUp","_handleInputChange","_handleInputBlur","_handleKeyDown","_handleKeyUp","_handleWheel","_initializeInput","init","_setupMutationObserver","key","value","_updateAriaAttributes","_checkValue","parsed","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","optionName","attrName","fullAttrName","concat","hasAttribute","rawValue","getAttribute","_coerceAttributeValue","_i2","_arr","nativeAttr","includes","num","parseFloat","isNaN","disabled","getValue","next","_nextValue","emit","stopSpin","_setDisplay","_startSpin","_clearSpinTimers","_this","oldSettings","_objectSpread","newSettings","Number","_alignToStep","keys","forEach","observers","get","callback","error","raw","NaN","before","String","isFinite","adjusted","_applyConstraints","_findDOMElements","_attachDOMEventListeners","_this2","push","index","indexOf","splice","teardown","_detachDOMEventListeners","clear","_mutationObserver","disconnect","upOnce","downOnce","startUpSpin","startDownSpin","updateSettings","setValue","destroy","on","off","initDOMEventHandling","registerTeardown","attachUpEvents","attachDownEvents","observeSetting","element","addEventListener","passive","_updateButtonDisabledState","settingName","has","set","Set","add","delete","event","handler","_this3","size","detail","_i3","_arr2","_toConsumableArray","fn","_","dir","_this4","delay","interval","setTimeout","setInterval","_spinStep","clearTimeout","_unused","clearInterval","_unused2","current","_valueIfIsNaN","base","Math","parseInt","stepUnclamped","pow","floor","mbs","round","aligned","_forcestepdivisibility","clamped","boosted","cap","val","out","mode","dec","ceil","toFixed","k","s","V","S","r","mayTriggerChange","_this$input$value","prev","_formatDisplay","dispatchEvent","Event","bubbles","el","setAttribute","removeAttribute","wrapper","parentElement","document","removeEventListener","e","preventDefault","currentValue","wouldBeSanitized","stopImmediatePropagation","activeElement","deltaY","_this5","MutationObserver","mutations","mutation","type","attributeName","observe","attributes","attributeFilter","isDisabled","getTouchSpin","toPublicApi","TailwindRenderer","_AbstractRenderer","_callSuper","_inherits","buildInputGroup","upButton","querySelector","downButton","core","newValue","updatePrefix","updatePostfix","updateButtonClass","updateVerticalButtonClass","updateVerticalButtonText","existingContainer","closest","classList","contains","buildAdvancedInputGroup","buildBasicInputGroup","_detectInputSize","html","isVertical","testidAttr","getWrapperTestId","buildVerticalButtons","tempDiv","createElement","innerHTML","trim","firstChild","insertBefore","prefixEl","nextSibling","postfixEl","className","replace","_applySizeClasses","hideEmptyPrefixPostfix","inputTestId","elementsHtml","verticalWrapper","appendChild","querySelectorAll","btn","addon","remove","textContent","button","directionalClass","roundingClass","text","AbstractRenderer","$","originalinput","container","elements","removeInjectedElements","_this$input$parentEle","parentelement","downButtons","_findElements","upButtons","verticalContainer","parent","attr","down","up","addClass","role","detached","_detached_prefix","detach","_detached_postfix","newsettings","TouchSpin","options","Element","TypeError","CoreTouchSpin","instance","window"],"mappings":"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"}