{"version":3,"file":"touchspin-bs4.min.js","sources":["../packages/core/src/index.js","../packages/core/src/AbstractRenderer.js","../packages/renderers/bootstrap4/src/Bootstrap4Renderer.js","../src/entries/standalone-bs4.js"],"sourcesContent":["// @ts-check\n\n/**\n * @fileoverview Framework-agnostic core scaffold for TouchSpin.\n * Phase A (A1): minimal public API surface to enable incremental extraction.\n * This is a placeholder; logic will be ported from TouchSpinCore.migrated.js in A2â€“A7.\n */\n\n/**\n * @typedef {'none'|'floor'|'round'|'ceil'} ForceStepDivisibility\n */\n\n/**\n * @callback TouchSpinCalcCallback\n * @param {string} value\n * @returns {string}\n */\n\n/**\n * @typedef {Object} TouchSpinCoreOptions\n * @property {number|null=} min\n * @property {number|null=} max\n * @property {number|null=} firstclickvalueifempty\n * @property {number=} step\n * @property {number=} decimals\n * @property {ForceStepDivisibility=} forcestepdivisibility\n * @property {number=} stepinterval\n * @property {number=} stepintervaldelay\n * @property {boolean=} booster\n * @property {number=} boostat\n * @property {number|false=} maxboostedstep\n * @property {TouchSpinCalcCallback=} callback_before_calculation\n * @property {TouchSpinCalcCallback=} callback_after_calculation\n * @property {Function} renderer - Renderer class (e.g., Bootstrap5Renderer) or null for no UI\n * @property {string=} initval - Initial value for the input\n * @property {string=} replacementval - Value to use when input is empty\n * @property {boolean=} mousewheel - Enable/disable mousewheel support\n * @property {boolean=} verticalbuttons - Enable vertical button layout\n * @property {string=} verticalup - Text for vertical up button\n * @property {string=} verticaldown - Text for vertical down button\n * @property {string=} verticalupclass - CSS classes for vertical up button (handled by renderer)\n * @property {string=} verticaldownclass - CSS classes for vertical down button (handled by renderer)\n * @property {string=} prefix - Text/HTML before input (handled by renderer)\n * @property {string=} postfix - Text/HTML after input (handled by renderer)\n * @property {string=} prefix_extraclass - Extra CSS classes for prefix element (handled by renderer)\n * @property {string=} postfix_extraclass - Extra CSS classes for postfix element (handled by renderer)\n * @property {string=} buttonup_class - CSS classes for up button (handled by renderer)\n * @property {string=} buttondown_class - CSS classes for down button (handled by renderer)\n * @property {string=} buttonup_txt - Content for up button (handled by renderer)\n * @property {string=} buttondown_txt - Content for down button (handled by renderer)\n */\n\nconst DEFAULTS = {\n  min: 0,\n  max: 100,\n  initval: '',\n  replacementval: '',\n  firstclickvalueifempty: null,\n  step: 1,\n  decimals: 0,\n  forcestepdivisibility: 'round',\n  stepinterval: 100,\n  stepintervaldelay: 500,\n  verticalbuttons: false,\n  verticalup: '+',\n  verticaldown: '-',\n  verticalupclass: null,\n  verticaldownclass: null,\n  focusablebuttons: false,\n  prefix: '',\n  postfix: '',\n  prefix_extraclass: '',\n  postfix_extraclass: '',\n  booster: true,\n  boostat: 10,\n  maxboostedstep: false,\n  mousewheel: true,\n  buttonup_class: null,\n  buttondown_class: null,\n  buttonup_txt: '+',\n  buttondown_txt: '-',\n  callback_before_calculation: (v) => v,\n  callback_after_calculation: (v) => v,\n};\n\nconst INSTANCE_KEY = '_touchSpinCore';\n\nexport class TouchSpinCore {\n  /**\n   * Sanitize a partial settings object BEFORE applying it.\n   * Returns a new object with only provided keys normalized.\n   * @param {Partial<TouchSpinCoreOptions>} partial\n   * @param {TouchSpinCoreOptions} current\n   * @returns {Partial<TouchSpinCoreOptions>}\n   */\n  static sanitizePartialSettings(partial, current) {\n    const out = { ...partial };\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'step')) {\n      const n = Number(partial.step);\n      out.step = (isFinite(n) && n > 0) ? n : 1;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'decimals')) {\n      const n = Number(partial.decimals);\n      out.decimals = (isFinite(n) && n >= 0) ? Math.floor(n) : 0;\n    }\n\n    const hasMin = Object.prototype.hasOwnProperty.call(partial, 'min');\n    const hasMax = Object.prototype.hasOwnProperty.call(partial, 'max');\n    if (hasMin) {\n      if (partial.min === null || partial.min === undefined || partial.min === '') {\n        out.min = null;\n      } else {\n        const n = Number(partial.min);\n        out.min = isFinite(n) ? n : null;\n      }\n    }\n    if (hasMax) {\n      if (partial.max === null || partial.max === undefined || partial.max === '') {\n        out.max = null;\n      } else {\n        const n = Number(partial.max);\n        out.max = isFinite(n) ? n : null;\n      }\n    }\n    if (hasMin && hasMax && out.min !== null && out.max !== null && out.min > out.max) {\n      const tmp = out.min; out.min = out.max; out.max = tmp;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'stepinterval')) {\n      const n = Number(partial.stepinterval);\n      out.stepinterval = (isFinite(n) && n >= 0) ? n : DEFAULTS.stepinterval;\n    }\n    if (Object.prototype.hasOwnProperty.call(partial, 'stepintervaldelay')) {\n      const n = Number(partial.stepintervaldelay);\n      out.stepintervaldelay = (isFinite(n) && n >= 0) ? n : DEFAULTS.stepintervaldelay;\n    }\n\n    return out;\n  }\n  /**\n   * @param {HTMLInputElement} inputEl\n   * @param {Partial<TouchSpinCoreOptions>=} opts\n   */\n  constructor(inputEl, opts = {}) {\n    if (!inputEl || inputEl.nodeName !== 'INPUT') {\n      throw new Error('TouchSpinCore requires an <input> element');\n    }\n\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n\n    // Parse data-bts-* attributes\n    const dataAttrs = this._parseDataAttributes(inputEl);\n\n    /** @type {TouchSpinCoreOptions} */\n    this.settings = Object.assign({}, DEFAULTS, dataAttrs, opts);\n    // Sanitize settings to ensure safe, predictable behavior\n    this._sanitizeSettings();\n\n    // Check for renderer: explicit option > global default > none\n    if (!this.settings.renderer) {\n      // Check for global default renderer\n      if (typeof globalThis !== 'undefined' && globalThis.TouchSpinDefaultRenderer) {\n        this.settings.renderer = globalThis.TouchSpinDefaultRenderer;\n      } else {\n        // Allow no renderer for keyboard/wheel-only functionality\n        console.warn('TouchSpin: No renderer specified (renderer: null). Only keyboard/wheel events will work. Consider using Bootstrap3/4/5Renderer or TailwindRenderer for UI.');\n      }\n    }\n\n    /** @type {boolean} */\n    this.spinning = false;\n    /** @type {number} */\n    this.spincount = 0;\n    /** @type {false|'up'|'down'} */\n    this.direction = false;\n    /** @type {Map<string, Set<Function>>} */\n    this._events = new Map();\n    /** @type {Array<Function>} */\n    this._teardownCallbacks = [];\n    /** @type {Map<string, Set<Function>>} */\n    this._settingObservers = new Map(); // For observer pattern\n\n    /** @type {ReturnType<typeof setTimeout>|null} */\n    this._spinDelayTimeout = null;\n    /** @type {ReturnType<typeof setInterval>|null} */\n    this._spinIntervalTimer = null;\n\n    /** @type {HTMLElement|null} */\n    this._upButton = null;\n    /** @type {HTMLElement|null} */\n    this._downButton = null;\n    /** @type {HTMLElement|null} */\n    this._wrapper = null;\n\n    // DOM event handlers (bound methods)\n    this._handleUpMouseDown = this._handleUpMouseDown.bind(this);\n    this._handleDownMouseDown = this._handleDownMouseDown.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this._handleUpKeyDown = this._handleUpKeyDown.bind(this);\n    this._handleUpKeyUp = this._handleUpKeyUp.bind(this);\n    this._handleDownKeyDown = this._handleDownKeyDown.bind(this);\n    this._handleDownKeyUp = this._handleDownKeyUp.bind(this);\n    this._handleInputChange = this._handleInputChange.bind(this);\n    this._handleInputBlur = this._handleInputBlur.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this._handleKeyUp = this._handleKeyUp.bind(this);\n    this._handleWheel = this._handleWheel.bind(this);\n\n    // Core always manages the input element\n    this._initializeInput();\n\n    // Initialize renderer with reference to core\n    if (this.settings.renderer) {\n      this.renderer = new this.settings.renderer(inputEl, this.settings, this);\n      this.renderer.init();\n    }\n\n    // Set up mutation observer to watch for disabled/readonly changes\n    this._setupMutationObserver();\n  }\n\n  /**\n   * Initialize input element (core always handles this)\n   * @private\n   */\n  _initializeInput() {\n    // Set initial value if specified and input is empty\n    if (this.settings.initval !== '' && this.input.value === '') {\n      this.input.value = this.settings.initval;\n    }\n\n    // Core always handles these for the input\n    this._updateAriaAttributes();\n    this._syncNativeAttributes();\n    this._checkValue(false);\n  }\n\n  /**\n   * Normalize and validate settings: coerce invalid values to safe defaults.\n   * - step: > 0 number, otherwise 1\n   * - decimals: integer >= 0, otherwise 0\n   * - min/max: finite numbers or null\n   * - stepinterval/stepintervaldelay: integers >= 0 (fallback to defaults if invalid)\n   * @private\n   */\n  _sanitizeSettings() {\n    // step\n    const stepNum = Number(this.settings.step);\n    if (!isFinite(stepNum) || stepNum <= 0) {\n      this.settings.step = 1;\n    } else {\n      this.settings.step = stepNum;\n    }\n\n    // decimals\n    const decNum = Number(this.settings.decimals);\n    if (!isFinite(decNum) || decNum < 0) {\n      this.settings.decimals = 0;\n    } else {\n      this.settings.decimals = Math.floor(decNum);\n    }\n\n    // min/max\n    // Preserve explicit nulls; coerce other values to numbers or null\n    if (this.settings.min === null || this.settings.min === undefined || this.settings.min === '') {\n      this.settings.min = null;\n    } else {\n      const minNum = Number(this.settings.min);\n      this.settings.min = isFinite(minNum) ? minNum : null;\n    }\n    if (this.settings.max === null || this.settings.max === undefined || this.settings.max === '') {\n      this.settings.max = null;\n    } else {\n      const maxNum = Number(this.settings.max);\n      this.settings.max = isFinite(maxNum) ? maxNum : null;\n    }\n\n    // Ensure min <= max when both present\n    if (this.settings.min !== null && this.settings.max !== null && this.settings.min > this.settings.max) {\n      // Swap to maintain logical bounds\n      const tmp = this.settings.min;\n      this.settings.min = this.settings.max;\n      this.settings.max = tmp;\n    }\n\n    // stepinterval\n    const si = Number(this.settings.stepinterval);\n    if (!isFinite(si) || si < 0) this.settings.stepinterval = DEFAULTS.stepinterval;\n\n    // stepintervaldelay\n    const sid = Number(this.settings.stepintervaldelay);\n    if (!isFinite(sid) || sid < 0) this.settings.stepintervaldelay = DEFAULTS.stepintervaldelay;\n  }\n\n  /**\n   * Parse data-bts-* attributes from the input element.\n   * @param {HTMLInputElement} inputEl\n   * @returns {Partial<TouchSpinCoreOptions>}\n   * @private\n   */\n  _parseDataAttributes(inputEl) {\n    const attributeMap = {\n      min: 'min',\n      max: 'max',\n      initval: 'init-val',\n      replacementval: 'replacement-val',\n      firstclickvalueifempty: 'first-click-value-if-empty',\n      step: 'step',\n      decimals: 'decimals',\n      stepinterval: 'step-interval',\n      verticalbuttons: 'vertical-buttons',\n      verticalup: 'vertical-up',\n      verticaldown: 'vertical-down',\n      verticalupclass: 'vertical-up-class',\n      verticaldownclass: 'vertical-down-class',\n      forcestepdivisibility: 'force-step-divisibility',\n      stepintervaldelay: 'step-interval-delay',\n      prefix: 'prefix',\n      postfix: 'postfix',\n      prefix_extraclass: 'prefix-extra-class',\n      postfix_extraclass: 'postfix-extra-class',\n      booster: 'booster',\n      boostat: 'boostat',\n      maxboostedstep: 'max-boosted-step',\n      mousewheel: 'mouse-wheel',\n      buttondown_class: 'button-down-class',\n      buttonup_class: 'button-up-class',\n      buttondown_txt: 'button-down-txt',\n      buttonup_txt: 'button-up-txt'\n    };\n\n    const parsed = {};\n\n    // Parse data-bts-* attributes\n    for (const [optionName, attrName] of Object.entries(attributeMap)) {\n      const fullAttrName = `data-bts-${attrName}`;\n      if (inputEl.hasAttribute(fullAttrName)) {\n        const rawValue = inputEl.getAttribute(fullAttrName);\n        parsed[optionName] = this._coerceAttributeValue(optionName, rawValue);\n      }\n    }\n\n    // Also handle native attributes with precedence (warn if both specified)\n    for (const nativeAttr of ['min', 'max', 'step']) {\n      if (inputEl.hasAttribute(nativeAttr)) {\n        const rawValue = inputEl.getAttribute(nativeAttr);\n        if (parsed[nativeAttr] !== undefined) {\n          console.warn(`Both \"data-bts-${nativeAttr}\" and \"${nativeAttr}\" attributes specified. Native attribute takes precedence.`, inputEl);\n        }\n        parsed[nativeAttr] = this._coerceAttributeValue(nativeAttr, rawValue);\n      }\n    }\n\n    return parsed;\n  }\n\n  /**\n   * Convert string attribute values to appropriate types.\n   * @param {string} optionName\n   * @param {string} rawValue\n   * @returns {any}\n   * @private\n   */\n  _coerceAttributeValue(optionName, rawValue) {\n    if (rawValue === null || rawValue === undefined) {\n      return rawValue;\n    }\n\n    // Boolean attributes\n    if (['booster', 'mousewheel', 'verticalbuttons'].includes(optionName)) {\n      return rawValue === 'true' || rawValue === '' || rawValue === optionName;\n    }\n\n    // Numeric attributes\n    if (['min', 'max', 'step', 'decimals', 'stepinterval', 'stepintervaldelay',\n         'boostat', 'maxboostedstep', 'firstclickvalueifempty'].includes(optionName)) {\n      const num = parseFloat(rawValue);\n      return isNaN(num) ? rawValue : num;\n    }\n\n    // String attributes - return as-is\n    return rawValue;\n  }\n\n  /** Increment once according to step */\n  upOnce() {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('up', v);\n\n    // Check if already at max boundary before incrementing\n    if (this.settings.max !== null && v === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n      return;\n    }\n\n    // Fire max event BEFORE setting display if we're reaching max\n    if (this.settings.max !== null && next === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n    }\n\n    this._setDisplay(next, true);\n  }\n\n  /** Decrement once according to step */\n  downOnce() {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('down', v);\n\n    // Check if already at min boundary before decrementing\n    if (this.settings.min !== null && v === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n      return;\n    }\n\n    // Fire min event BEFORE setting display if we're reaching min\n    if (this.settings.min !== null && next === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n    }\n\n    this._setDisplay(next, true);\n  }\n\n  /** Start increasing repeatedly (placeholder) */\n  startUpSpin() { this._startSpin('up'); }\n\n  /** Start decreasing repeatedly (placeholder) */\n  startDownSpin() { this._startSpin('down'); }\n\n  /** Stop spinning (placeholder) */\n  stopSpin() {\n    this._clearSpinTimers();\n    if (this.spinning) {\n      if (this.direction === 'up') {\n        this.emit('stopupspin');\n        this.emit('stopspin');\n      } else if (this.direction === 'down') {\n        this.emit('stopdownspin');\n        this.emit('stopspin');\n      }\n    }\n    this.spinning = false;\n    this.direction = false;\n    this.spincount = 0;\n  }\n\n  /**\n   * @param {Partial<TouchSpinCoreOptions>} opts\n   */\n  updateSettings(opts) {\n    const oldSettings = { ...this.settings };\n    const newSettings = opts || {};\n\n    // Sanitize the incoming partial BEFORE merge\n    const sanitizedPartial = TouchSpinCore.sanitizePartialSettings(newSettings, oldSettings);\n\n    // Apply incoming changes (sanitized) first\n    Object.assign(this.settings, sanitizedPartial);\n    // Extra safety: sanitize full settings after merge\n    this._sanitizeSettings();\n\n    // If step/min/max changed and step != 1, align bounds to step like the jQuery plugin\n    const step = Number(this.settings.step || 1);\n    if ((sanitizedPartial.step !== undefined || sanitizedPartial.min !== undefined || sanitizedPartial.max !== undefined) && step !== 1) {\n      if (this.settings.max !== null) {\n        this.settings.max = this._alignToStep(Number(this.settings.max), step, 'down');\n      }\n      if (this.settings.min !== null) {\n        this.settings.min = this._alignToStep(Number(this.settings.min), step, 'up');\n      }\n    }\n\n    // Notify observers of keys whose EFFECTIVE values changed after sanitization\n    Object.keys(this.settings).forEach(key => {\n      if (oldSettings[key] !== this.settings[key]) {\n        const observers = this._settingObservers.get(key);\n        if (observers) {\n          observers.forEach(callback => {\n            try {\n              callback(this.settings[key], oldSettings[key]);\n            } catch (error) {\n              console.error('TouchSpin: Error in setting observer callback:', error);\n            }\n          });\n        }\n      }\n    });\n\n    // Core handles its own setting changes\n    this._updateAriaAttributes();\n    this._syncNativeAttributes();\n    this._checkValue(false);\n  }\n\n  /** @returns {number} */\n  getValue() {\n    let raw = this.input.value;\n    if (raw === '' && this.settings.replacementval !== '') {\n      raw = this.settings.replacementval;\n    }\n    if (raw === '') return NaN;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    return isNaN(num) ? NaN : num;\n  }\n\n  /**\n   * @param {number|string} v\n   */\n  setValue(v) {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    const parsed = Number(v);\n    if (!isFinite(parsed)) return;\n    const adjusted = this._applyConstraints(parsed);\n    this._setDisplay(adjusted, true);\n  }\n\n  /**\n   * Initialize DOM event handling by finding elements and attaching listeners.\n   * Must be called after the renderer has created the DOM structure.\n   */\n  initDOMEventHandling() {\n    // Find DOM elements and attach listeners\n    this._findDOMElements();\n    this._attachDOMEventListeners();\n  }\n\n  /**\n   * Register a teardown callback that will be called when the instance is destroyed.\n   * This allows wrapper libraries to register cleanup logic.\n   * @param {Function} callback - Function to call on destroy\n   * @returns {Function} - Unregister function\n   */\n  registerTeardown(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Teardown callback must be a function');\n    }\n    this._teardownCallbacks.push(callback);\n\n    // Return unregister function\n    return () => {\n      const index = this._teardownCallbacks.indexOf(callback);\n      if (index > -1) {\n        this._teardownCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /** Cleanup and destroy the TouchSpin instance */\n  destroy() {\n    this.stopSpin();\n\n    // Renderer cleans up its added elements\n    if (this.renderer && this.renderer.teardown) {\n      this.renderer.teardown();\n    }\n\n    // Core cleans up input events only\n    this._detachDOMEventListeners();\n\n    // Call all registered teardown callbacks (for wrapper cleanup)\n    this._teardownCallbacks.forEach(callback => {\n      try {\n        callback();\n      } catch (error) {\n        console.error('TouchSpin teardown callback error:', error);\n      }\n    });\n    this._teardownCallbacks.length = 0; // Clear the array\n\n    // Clear setting observers\n    this._settingObservers.clear();\n\n    // Clean up mutation observer\n    if (this._mutationObserver) {\n      this._mutationObserver.disconnect();\n      this._mutationObserver = null;\n    }\n\n    // Clear button references\n    this._upButton = null;\n    this._downButton = null;\n\n    // Remove instance from element\n    if (this.input[INSTANCE_KEY] === this) {\n      delete this.input[INSTANCE_KEY];\n    }\n  }\n\n  /**\n   * Create a plain public API object with bound methods for wrappers.\n   * @returns {TouchSpinCorePublicAPI}\n   */\n  toPublicApi() {\n    return {\n      upOnce: this.upOnce.bind(this),\n      downOnce: this.downOnce.bind(this),\n      startUpSpin: this.startUpSpin.bind(this),\n      startDownSpin: this.startDownSpin.bind(this),\n      stopSpin: this.stopSpin.bind(this),\n      updateSettings: this.updateSettings.bind(this),\n      getValue: this.getValue.bind(this),\n      setValue: this.setValue.bind(this),\n      destroy: this.destroy.bind(this),\n      on: this.on.bind(this),\n      off: this.off.bind(this),\n      initDOMEventHandling: this.initDOMEventHandling.bind(this),\n      registerTeardown: this.registerTeardown.bind(this),\n      attachUpEvents: this.attachUpEvents.bind(this),\n      attachDownEvents: this.attachDownEvents.bind(this),\n      observeSetting: this.observeSetting.bind(this),\n    };\n  }\n\n  // --- Renderer Event Attachment Methods ---\n  /**\n   * Attach up button events to an element\n   * Called by renderers after creating up button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachUpEvents(element) {\n    if (!element) {\n      console.warn('TouchSpin: attachUpEvents called with null element');\n      return;\n    }\n\n    this._upButton = element;\n    element.addEventListener('mousedown', this._handleUpMouseDown);\n    element.addEventListener('touchstart', this._handleUpMouseDown, {passive: false});\n\n    // Add keyboard event listeners if focusable buttons are enabled\n    if (this.settings.focusablebuttons) {\n      element.addEventListener('keydown', this._handleUpKeyDown);\n      element.addEventListener('keyup', this._handleUpKeyUp);\n    }\n\n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  /**\n   * Attach down button events to an element\n   * Called by renderers after creating down button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachDownEvents(element) {\n    if (!element) {\n      console.warn('TouchSpin: attachDownEvents called with null element');\n      return;\n    }\n\n    this._downButton = element;\n    element.addEventListener('mousedown', this._handleDownMouseDown);\n    element.addEventListener('touchstart', this._handleDownMouseDown, {passive: false});\n\n    // Add keyboard event listeners if focusable buttons are enabled\n    if (this.settings.focusablebuttons) {\n      element.addEventListener('keydown', this._handleDownKeyDown);\n      element.addEventListener('keyup', this._handleDownKeyUp);\n    }\n\n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  // --- Settings Observer Pattern ---\n  /**\n   * Allow renderers to observe setting changes\n   * @param {string} settingName - Name of setting to observe\n   * @param {Function} callback - Function to call when setting changes (newValue, oldValue)\n   * @returns {Function} Unsubscribe function\n   */\n  observeSetting(settingName, callback) {\n    if (!this._settingObservers.has(settingName)) {\n      this._settingObservers.set(settingName, new Set());\n    }\n\n    const observers = this._settingObservers.get(settingName);\n    observers.add(callback);\n\n    // Return unsubscribe function\n    return () => observers.delete(callback);\n  }\n\n  // --- Minimal internal emitter API ---\n  /**\n   * Subscribe to a core event.\n   * Events: 'min', 'max', 'startspin', 'startupspin', 'startdownspin', 'stopspin', 'stopupspin', 'stopdownspin'\n   * @param {string} event\n   * @param {(detail?: any) => void} handler\n   */\n  on(event, handler) {\n    const set = this._events.get(event) || new Set();\n    set.add(handler);\n    this._events.set(event, set);\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Unsubscribe from a core event.\n   * @param {string} event\n   * @param {(detail?: any) => void=} handler\n   */\n  off(event, handler) {\n    const set = this._events.get(event);\n    if (!set) return;\n    if (!handler) {\n      this._events.delete(event);\n      return;\n    }\n    set.delete(handler);\n    if (set.size === 0) this._events.delete(event);\n  }\n\n  /**\n   * Emit a core event to subscribers.\n   * @param {string} event\n   * @param {any=} detail\n   */\n  emit(event, detail) {\n    const set = this._events.get(event);\n    if (!set || set.size === 0) return;\n    for (const fn of [...set]) {\n      try { fn(detail); } catch {\n        // Silently ignore callback errors to prevent one bad callback from breaking others\n      }\n    }\n  }\n\n  /**\n   * Internal: start timed spin in a direction with initial step, delay, then interval.\n   * @param {'up'|'down'} dir\n   */\n  _startSpin(dir) {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n\n    this.stopSpin();\n\n    // Check if already at boundary - don't start spin if so\n    const v = this.getValue();\n    if (dir === 'up' && this.settings.max !== null && v === this.settings.max) {\n      return; // Already at max, don't start spin\n    }\n    if (dir === 'down' && this.settings.min !== null && v === this.settings.min) {\n      return; // Already at min, don't start spin\n    }\n\n    // If changing direction, reset counters\n    const direction_changed = (!this.spinning || this.direction !== dir);\n    if (direction_changed) {\n      this.spinning = true;\n      this.direction = dir;\n      this.spincount = 0;\n      // Match jQuery plugin event order: startspin then direction-specific\n      this.emit('startspin');\n      if (dir === 'up') this.emit('startupspin'); else this.emit('startdownspin');\n    }\n\n    // Clear previous timers\n    this._clearSpinTimers();\n    // Schedule repeat after delay, then at interval (no immediate step; wrapper triggers first step)\n    const delay = this.settings.stepintervaldelay || 500;\n    const interval = this.settings.stepinterval || 100;\n    this._spinDelayTimeout = setTimeout(() => {\n      this._spinDelayTimeout = null;\n      this._spinIntervalTimer = setInterval(() => {\n        if (!this.spinning || this.direction !== dir) return; // safety\n        this._spinStep(dir);\n      }, interval);\n    }, delay);\n  }\n\n  _clearSpinTimers() {\n    try { if (this._spinDelayTimeout) { clearTimeout(this._spinDelayTimeout); } } catch {\n      // Ignore timer cleanup errors\n    }\n    try { if (this._spinIntervalTimer) { clearInterval(this._spinIntervalTimer); } } catch {\n      // Ignore timer cleanup errors\n    }\n    this._spinDelayTimeout = null;\n    this._spinIntervalTimer = null;\n  }\n\n  /**\n   * Compute the next numeric value for a direction, respecting step, booster and bounds.\n   * @param {'up'|'down'} dir\n   * @param {number} current\n   */\n  _nextValue(dir, current) {\n    let v = current;\n    if (isNaN(v)) {\n      v = this._valueIfIsNaN();\n    } else {\n      const base = this.settings.step || 1;\n      const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n      const stepUnclamped = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n      const mbs = this.settings.maxboostedstep;\n      let step = stepUnclamped;\n      if (mbs && isFinite(mbs) && stepUnclamped > Number(mbs)) {\n        step = Number(mbs);\n        // Align current value to the boosted step grid when clamped (parity with jQuery plugin)\n        v = Math.round(v / step) * step;\n      }\n      step = Math.max(base, step);\n      v = dir === 'up' ? v + step : v - step;\n    }\n    return this._applyConstraints(v);\n  }\n\n  /** Returns a reasonable value to use when current is NaN. */\n  _valueIfIsNaN() {\n    if (typeof this.settings.firstclickvalueifempty === 'number') {\n      return this.settings.firstclickvalueifempty;\n    }\n    const min = (typeof this.settings.min === 'number') ? this.settings.min : 0;\n    const max = (typeof this.settings.max === 'number') ? this.settings.max : min;\n    return (min + max) / 2;\n  }\n\n  /** Apply step divisibility and clamp to min/max. */\n  _applyConstraints(v) {\n    const aligned = this._forcestepdivisibility(v);\n    const min = this.settings.min;\n    const max = this.settings.max;\n    let clamped = aligned;\n    if (min !== null && clamped < min) clamped = min;\n    if (max !== null && clamped > max) clamped = max;\n    return clamped;\n  }\n\n  /** Determine the effective step with booster if enabled. */\n  _getBoostedStep() {\n    const base = this.settings.step || 1;\n    if (!this.settings.booster) return base;\n    const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n    let boosted = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n    const mbs = this.settings.maxboostedstep;\n    if (mbs && isFinite(mbs)) {\n      const cap = Number(mbs);\n      if (boosted > cap) boosted = cap;\n    }\n    return Math.max(base, boosted);\n  }\n\n  /** Aligns value to step per forcestepdivisibility. */\n  _forcestepdivisibility(val) {\n    const mode = this.settings.forcestepdivisibility || 'round';\n    const step = this.settings.step || 1;\n    const dec = this.settings.decimals || 0;\n    let out;\n    switch (mode) {\n      case 'floor':\n        out = Math.floor(val / step) * step; break;\n      case 'ceil':\n        out = Math.ceil(val / step) * step; break;\n      case 'none':\n        out = val; break;\n      case 'round':\n      default:\n        out = Math.round(val / step) * step; break;\n    }\n    // Normalize to configured decimals without string pipeline; formatting applies later\n    return Number(out.toFixed(dec));\n  }\n\n  /** Aligns a value to nearest step boundary using integer arithmetic. */\n  _alignToStep(val, step, dir) {\n    if (step === 0) return val;\n    let k = 1;\n    const s = step;\n    while (((s * k) % 1) !== 0 && k < 1e6) k *= 10;\n    const V = Math.round(val * k);\n    const S = Math.round(step * k);\n    const r = V % S;\n    if (r === 0) return val;\n    return (dir === 'down' ? (V - r) : (V + (S - r))) / k;\n  }\n\n  /** Format and write to input, optionally emit change if different. */\n  _setDisplay(num, mayTriggerChange) {\n    const prev = String(this.input.value ?? '');\n    const next = this._formatDisplay(num);\n    this.input.value = next;\n    this._updateAriaAttributes();\n    if (mayTriggerChange && prev !== next) {\n      // mirror plugin behavior: trigger a native change event\n      this.input.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    return next;\n  }\n\n  _formatDisplay(num) {\n    const dec = this.settings.decimals || 0;\n    const after = this.settings.callback_after_calculation || ((v) => v);\n    const s = Number(num).toFixed(dec);\n    return after(s);\n  }\n\n  /**\n   * Perform one spin step in a direction while tracking spincount for booster.\n   * @param {'up'|'down'} dir\n   */\n  _spinStep(dir) {\n    this.spincount++;\n    if (dir === 'up') this.upOnce(); else this.downOnce();\n  }\n\n  /** Sanitize current input value and update display; optionally emits change. */\n  _checkValue(mayTriggerChange) {\n    const v = this.getValue();\n    if (!isFinite(v)) return;\n    const adjusted = this._applyConstraints(v);\n    this._setDisplay(adjusted, !!mayTriggerChange);\n  }\n\n  _updateAriaAttributes() {\n    const el = this.input;\n    if (el.getAttribute('role') !== 'spinbutton') {\n      el.setAttribute('role', 'spinbutton');\n    }\n    const min = this.settings.min;\n    const max = this.settings.max;\n    if (min !== null) el.setAttribute('aria-valuemin', String(min)); else el.removeAttribute('aria-valuemin');\n    if (max !== null) el.setAttribute('aria-valuemax', String(max)); else el.removeAttribute('aria-valuemax');\n    const raw = el.value;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    if (isFinite(num)) el.setAttribute('aria-valuenow', String(num)); else el.removeAttribute('aria-valuenow');\n    el.setAttribute('aria-valuetext', String(raw));\n  }\n\n  /**\n   * Synchronize TouchSpin settings to native input attributes.\n   * Only applies to type=\"number\" inputs to maintain browser consistency.\n   * @private\n   */\n  _syncNativeAttributes() {\n    // Only set native attributes on number inputs\n    if (this.input.getAttribute('type') === 'number') {\n      // Sync min attribute\n      if (this.settings.min !== null && isFinite(this.settings.min)) {\n        this.input.setAttribute('min', String(this.settings.min));\n      } else {\n        this.input.removeAttribute('min');\n      }\n\n      // Sync max attribute\n      if (this.settings.max !== null && isFinite(this.settings.max)) {\n        this.input.setAttribute('max', String(this.settings.max));\n      } else {\n        this.input.removeAttribute('max');\n      }\n\n      // Sync step attribute\n      if (this.settings.step !== null && isFinite(this.settings.step) && this.settings.step > 0) {\n        this.input.setAttribute('step', String(this.settings.step));\n      } else {\n        this.input.removeAttribute('step');\n      }\n    }\n  }\n\n  /**\n   * Update TouchSpin settings from native attribute changes.\n   * Called by mutation observer when min/max/step attributes change.\n   * @private\n   */\n  _syncSettingsFromNativeAttributes() {\n    const nativeMin = this.input.getAttribute('min');\n    const nativeMax = this.input.getAttribute('max');\n    const nativeStep = this.input.getAttribute('step');\n    let needsUpdate = false;\n    const newSettings = {};\n\n    // Check min attribute\n    if (nativeMin !== null) {\n      const parsedMin = nativeMin === '' ? null : parseFloat(nativeMin);\n      const minNum = parsedMin !== null && isFinite(parsedMin) ? parsedMin : null;\n      if (minNum !== this.settings.min) {\n        newSettings.min = minNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.min !== null) {\n      // Attribute was removed\n      newSettings.min = null;\n      needsUpdate = true;\n    }\n\n    // Check max attribute\n    if (nativeMax !== null) {\n      const parsedMax = nativeMax === '' ? null : parseFloat(nativeMax);\n      const maxNum = parsedMax !== null && isFinite(parsedMax) ? parsedMax : null;\n      if (maxNum !== this.settings.max) {\n        newSettings.max = maxNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.max !== null) {\n      // Attribute was removed\n      newSettings.max = null;\n      needsUpdate = true;\n    }\n\n    // Check step attribute\n    if (nativeStep !== null) {\n      const parsedStep = nativeStep === '' ? null : parseFloat(nativeStep);\n      const stepNum = parsedStep !== null && isFinite(parsedStep) && parsedStep > 0 ? parsedStep : null;\n      if (stepNum !== this.settings.step) {\n        newSettings.step = stepNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.step !== 1) {\n      // Attribute was removed, reset to default\n      newSettings.step = 1;\n      needsUpdate = true;\n    }\n\n    // Apply updates if needed\n    if (needsUpdate) {\n      this.updateSettings(newSettings);\n    }\n  }\n\n  // --- DOM Event Handling Methods ---\n\n  /**\n   * Find and store references to DOM elements using data-touchspin-injected attributes.\n   * @private\n   */\n  _findDOMElements() {\n    // Core doesn't need to find buttons - renderers handle button events directly\n    // We only need to find the wrapper for potential future use\n    let wrapper = this.input.parentElement;\n    while (wrapper && !wrapper.hasAttribute('data-touchspin-injected')) {\n      wrapper = wrapper.parentElement;\n    }\n    this._wrapper = wrapper;\n  }\n\n  /**\n   * Attach DOM event listeners to elements.\n   * @private\n   */\n  _attachDOMEventListeners() {\n    // Core should NOT attach button events - renderers handle that via attachUpEvents/attachDownEvents\n\n    // Global mouseup/touchend to stop spinning\n    document.addEventListener('mouseup', this._handleMouseUp);\n    document.addEventListener('mouseleave', this._handleMouseUp);\n    document.addEventListener('touchend', this._handleMouseUp);\n\n    // Input events (always attach these - they work without renderer UI)\n    this.input.addEventListener('change', this._handleInputChange, true); // Capture phase to intercept\n    this.input.addEventListener('blur', this._handleInputBlur);\n    this.input.addEventListener('keydown', this._handleKeyDown);\n    this.input.addEventListener('keyup', this._handleKeyUp);\n    this.input.addEventListener('wheel', this._handleWheel);\n  }\n\n  /**\n   * Remove DOM event listeners.\n   * @private\n   */\n  _detachDOMEventListeners() {\n    // Core does not manage button events - renderers handle their own cleanup\n\n    // Global events\n    document.removeEventListener('mouseup', this._handleMouseUp);\n    document.removeEventListener('mouseleave', this._handleMouseUp);\n    document.removeEventListener('touchend', this._handleMouseUp);\n\n    // Input events\n    this.input.removeEventListener('change', this._handleInputChange, true);\n    this.input.removeEventListener('blur', this._handleInputBlur);\n    this.input.removeEventListener('keydown', this._handleKeyDown);\n    this.input.removeEventListener('keyup', this._handleKeyUp);\n    this.input.removeEventListener('wheel', this._handleWheel);\n  }\n\n  // --- DOM Event Handlers ---\n\n  /**\n   * Handle mousedown/touchstart on up button.\n   * @private\n   */\n  _handleUpMouseDown(e) {\n    e.preventDefault();\n    this.upOnce();\n    this.startUpSpin();\n  }\n\n  /**\n   * Handle mousedown/touchstart on down button.\n   * @private\n   */\n  _handleDownMouseDown(e) {\n    e.preventDefault();\n    this.downOnce();\n    this.startDownSpin();\n  }\n\n  /**\n   * Handle mouseup/touchend/mouseleave to stop spinning.\n   * @private\n   */\n  _handleMouseUp(e) {\n    this.stopSpin();\n  }\n\n  /**\n   * Handle keydown events on up button.\n   * @private\n   */\n  _handleUpKeyDown(e) {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      e.preventDefault();\n      this.upOnce();\n      this.startUpSpin();\n    }\n  }\n\n  /**\n   * Handle keyup events on up button.\n   * @private\n   */\n  _handleUpKeyUp(e) {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle keydown events on down button.\n   * @private\n   */\n  _handleDownKeyDown(e) {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      e.preventDefault();\n      this.downOnce();\n      this.startDownSpin();\n    }\n  }\n\n  /**\n   * Handle keyup events on down button.\n   * @private\n   */\n  _handleDownKeyUp(e) {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Intercept change events to prevent wrong values from propagating.\n   * @private\n   */\n  _handleInputChange(e) {\n    const currentValue = this.getValue();\n    const wouldBeSanitized = this._applyConstraints(currentValue);\n\n    if (isFinite(currentValue) && currentValue !== wouldBeSanitized) {\n      // This change event has wrong value - prevent it from propagating\n      e.stopImmediatePropagation();\n      // Don't sanitize here - blur handler will do it with correct change event\n    }\n    // If values match, let the change event through normally\n  }\n\n  /**\n   * Handle blur events on the input element for sanitization.\n   * @private\n   */\n  _handleInputBlur(e) {\n    this._checkValue(true);\n  }\n\n  /**\n   * Handle keydown events on the input element.\n   * @private\n   */\n  _handleKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowUp':\n        e.preventDefault();\n        this.upOnce();\n        this.startUpSpin();\n        break;\n      case 'ArrowDown':\n        e.preventDefault();\n        this.downOnce();\n        this.startDownSpin();\n        break;\n      case 'Enter':\n        this._checkValue(false);\n        break;\n    }\n  }\n\n  /**\n   * Handle keyup events on the input element.\n   * @private\n   */\n  _handleKeyUp(e) {\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle wheel events on the input element.\n   * @private\n   */\n  _handleWheel(e) {\n    if (!this.settings.mousewheel) {\n      return;\n    }\n\n    if (document.activeElement === this.input) {\n      e.preventDefault();\n      if (e.deltaY < 0) {\n        this.upOnce();\n      } else if (e.deltaY > 0) {\n        this.downOnce();\n      }\n    }\n  }\n\n  /**\n   * Set up mutation observer to watch for disabled/readonly attribute changes\n   * @private\n   */\n  _setupMutationObserver() {\n    if (typeof MutationObserver !== 'undefined') {\n      this._mutationObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (mutation.type === 'attributes') {\n            if (mutation.attributeName === 'disabled' || mutation.attributeName === 'readonly') {\n              this._updateButtonDisabledState();\n            } else if (mutation.attributeName === 'min' || mutation.attributeName === 'max' || mutation.attributeName === 'step') {\n              this._syncSettingsFromNativeAttributes();\n            }\n          }\n        });\n      });\n\n      this._mutationObserver.observe(this.input, {\n        attributes: true,\n        attributeFilter: ['disabled', 'readonly', 'min', 'max', 'step']\n      });\n    }\n  }\n\n  /**\n   * Update button disabled state based on input disabled/readonly state\n   * @private\n   */\n  _updateButtonDisabledState() {\n    const isDisabled = this.input.disabled || this.input.hasAttribute('readonly');\n\n    if (this._upButton) {\n      this._upButton.disabled = isDisabled;\n    }\n    if (this._downButton) {\n      this._downButton.disabled = isDisabled;\n    }\n\n    if (isDisabled) {\n      this.stopSpin();\n    }\n  }\n}\n\n/**\n * @typedef {Object} TouchSpinCorePublicAPI\n * @property {() => void} upOnce\n * @property {() => void} downOnce\n * @property {() => void} startUpSpin\n * @property {() => void} startDownSpin\n * @property {() => void} stopSpin\n * @property {(opts: Partial<TouchSpinCoreOptions>) => void} updateSettings\n * @property {() => number} getValue\n * @property {(v: number|string) => void} setValue\n * @property {() => void} destroy\n * @property {(event: string, handler: (detail?: any) => void) => () => void} on\n * @property {(event: string, handler?: (detail?: any) => void) => void} off\n * @property {() => void} initDOMEventHandling\n * @property {(callback: Function) => () => void} registerTeardown\n */\n\n/**\n * Initialize TouchSpin on an input element or get existing instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function TouchSpin(inputEl, opts) {\n  // Check if element is an input (graceful handling for public API)\n  if (!inputEl || inputEl.nodeName !== 'INPUT') {\n    console.warn('Must be an input.');\n    return null;\n  }\n\n  // If options provided, initialize/reinitialize\n  if (opts !== undefined) {\n    // Destroy existing instance if it exists (destroy() removes itself from element)\n    if (inputEl[INSTANCE_KEY]) {\n      console.warn('TouchSpin: Destroying existing instance and reinitializing. Consider using updateSettings() instead.');\n      inputEl[INSTANCE_KEY].destroy();\n    }\n\n    // Create new instance and store on element\n    const core = new TouchSpinCore(inputEl, opts);\n    inputEl[INSTANCE_KEY] = core;\n\n    // Initialize DOM event handling\n    core.initDOMEventHandling();\n\n    return core.toPublicApi();\n  }\n\n  // No options - return existing instance or create with defaults\n  if (!inputEl[INSTANCE_KEY]) {\n    const core = new TouchSpinCore(inputEl, {});\n    inputEl[INSTANCE_KEY] = core;\n    core.initDOMEventHandling();\n    return core.toPublicApi();\n  }\n\n  return inputEl[INSTANCE_KEY].toPublicApi();\n}\n\n/**\n * Get existing TouchSpin instance from input element (without creating one).\n * @param {HTMLInputElement} inputEl\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function getTouchSpin(inputEl) {\n  return inputEl[INSTANCE_KEY] ? inputEl[INSTANCE_KEY].toPublicApi() : null;\n}\n\n/**\n * Create and return a plain public API bound to a new core instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI}\n * @deprecated Use TouchSpin() instead\n */\nexport function createPublicApi(inputEl, opts) {\n  return TouchSpin(inputEl, opts);\n}\n\n/** Event name constants for wrappers to map/bridge. */\nexport const CORE_EVENTS = Object.freeze({\n  MIN: 'min',\n  MAX: 'max',\n  START_SPIN: 'startspin',\n  START_UP: 'startupspin',\n  START_DOWN: 'startdownspin',\n  STOP_SPIN: 'stopspin',\n  STOP_UP: 'stopupspin',\n  STOP_DOWN: 'stopdownspin',\n});\n\n/**\n * Convenience helper to attach core to an input element.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCore}\n */\nexport function attach(inputEl, opts) {\n  return new TouchSpinCore(inputEl, opts);\n}\n\nexport default TouchSpinCore;\n\n// Note: AbstractRenderer is not exported as it's only needed by renderer implementations\n// Renderers should import it directly: import AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n","/**\n * AbstractRenderer - Base class for TouchSpin renderers\n * Part of @touchspin/core package to avoid duplication across renderer packages\n *\n * @example\n * class CustomRenderer extends AbstractRenderer {\n *   init() {\n *     this.wrapper = this.buildUI();\n *     const upBtn = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n *     const downBtn = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n *     this.core.attachUpEvents(upBtn);\n *     this.core.attachDownEvents(downBtn);\n *     this.core.observeSetting('prefix', (value) => this.updatePrefix(value));\n *   }\n * }\n */\nclass AbstractRenderer {\n  /**\n   * @param {HTMLInputElement} inputEl - The input element to render around\n   * @param {Object} settings - TouchSpin settings (read-only)\n   * @param {Object} core - TouchSpin core instance for event delegation\n   */\n  constructor(inputEl, settings, core) {\n    // New renderer architecture\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n    /** @type {Object} */\n    this.settings = settings; // Read-only access to settings\n    /** @type {Object} */\n    this.core = core; // Reference to core for calling attachment methods\n    /** @type {HTMLElement|null} */\n    this.wrapper = null; // Set by subclasses during init()\n\n    // No legacy properties needed in modern architecture\n  }\n\n  /**\n   * Initialize the renderer - build DOM structure and attach events\n   * Must be implemented by subclasses\n   * @abstract\n   */\n  init() {\n    throw new Error('init() must be implemented by renderer');\n  }\n\n  /**\n   * Cleanup renderer - remove injected elements and restore original state\n   * Default implementation removes all injected elements\n   * Subclasses can override for custom teardown\n   */\n  teardown() {\n    // Default implementation - remove all injected elements\n    this.removeInjectedElements();\n    // Subclasses can override for custom teardown\n  }\n\n  /**\n   * Utility method to remove all injected TouchSpin elements\n   * Handles both regular wrappers and advanced input groups\n   * Called automatically by teardown()\n   */\n  removeInjectedElements() {\n    // Find and remove all elements with data-touchspin-injected attribute\n    if (this.wrapper) {\n      const injected = this.wrapper.querySelectorAll('[data-touchspin-injected]');\n      injected.forEach(el => el.remove());\n\n      // If wrapper itself was injected and is not the original parent\n      if (this.wrapper.hasAttribute('data-touchspin-injected') && this.wrapper.parentElement) {\n        const injectedType = this.wrapper.getAttribute('data-touchspin-injected');\n\n        if (injectedType === 'wrapper-advanced') {\n          // For advanced input groups, just remove the TouchSpin classes and attribute\n          // but keep the original input-group structure intact\n          this.wrapper.classList.remove('bootstrap-touchspin');\n          this.wrapper.removeAttribute('data-touchspin-injected');\n        } else {\n          // For regular wrappers, unwrap the input element\n          const parent = this.wrapper.parentElement;\n          parent.insertBefore(this.input, this.wrapper);\n          this.wrapper.remove();\n        }\n      }\n    }\n\n    // Also find any injected elements that might be siblings or elsewhere\n    const allInjected = document.querySelectorAll('[data-touchspin-injected]');\n    allInjected.forEach(el => {\n      // Only remove if it's related to this input (check if input is descendant or sibling)\n      if (el.contains(this.input) ||\n          (el.parentElement && el.parentElement.contains(this.input)) ||\n          this.input.parentElement?.contains(el)) {\n        // Don't remove the input itself\n        if (el !== this.input) {\n          el.remove();\n        }\n      }\n    });\n  }\n\n  // All legacy jQuery-based methods have been removed\n  // Modern renderers implement their own init() method and use vanilla JS\n\n  getWrapperTestId() {\n    // Modern vanilla JS version\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-wrapper\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for up button\n   * @returns {string} Testid attribute or empty string\n   */\n  getUpButtonTestId() {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-up\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for down button\n   * @returns {string} Testid attribute or empty string\n   */\n  getDownButtonTestId() {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-down\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for prefix element\n   * @returns {string} Testid attribute or empty string\n   */\n  getPrefixTestId() {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-prefix\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for postfix element\n   * @returns {string} Testid attribute or empty string\n   */\n  getPostfixTestId() {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-postfix\"`;\n    return '';\n  }\n}\n\nexport default AbstractRenderer;","/**\n * Bootstrap 4 Renderer - New Architecture\n * Builds Bootstrap 4 UI elements around TouchSpin input\n * Uses input-group-prepend and input-group-append for Bootstrap 4 compatibility\n */\nimport AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n\nclass Bootstrap4Renderer extends AbstractRenderer {\n\n  init() {\n    // Initialize internal element references\n    this.prefixEl = null;\n    this.postfixEl = null;\n\n    // Add form-control class if not present (Bootstrap requirement)\n    if (!this.input.classList.contains('form-control')) {\n      this.input.classList.add('form-control');\n      this._formControlAdded = true; // Track if we added it\n    }\n\n    // Build DOM structure and attach events\n    this.buildAndAttachDOM();\n\n    // 4. Register for setting changes we care about\n    this.core.observeSetting('prefix', (newValue) => this.updatePrefix(newValue));\n    this.core.observeSetting('postfix', (newValue) => this.updatePostfix(newValue));\n    this.core.observeSetting('buttonup_class', (newValue) => this.updateButtonClass('up', newValue));\n    this.core.observeSetting('buttondown_class', (newValue) => this.updateButtonClass('down', newValue));\n    this.core.observeSetting('verticalupclass', (newValue) => this.updateVerticalButtonClass('up', newValue));\n    this.core.observeSetting('verticaldownclass', (newValue) => this.updateVerticalButtonClass('down', newValue));\n    this.core.observeSetting('verticalup', (newValue) => this.updateVerticalButtonText('up', newValue));\n    this.core.observeSetting('verticaldown', (newValue) => this.updateVerticalButtonText('down', newValue));\n    this.core.observeSetting('buttonup_txt', (newValue) => this.updateButtonText('up', newValue));\n    this.core.observeSetting('buttondown_txt', (newValue) => this.updateButtonText('down', newValue));\n    this.core.observeSetting('prefix_extraclass', (newValue) => this.updatePrefixClasses());\n    this.core.observeSetting('postfix_extraclass', (newValue) => this.updatePostfixClasses());\n    this.core.observeSetting('verticalbuttons', (newValue) => this.handleVerticalButtonsChange(newValue));\n    this.core.observeSetting('focusablebuttons', (newValue) => this.updateButtonFocusability(newValue));\n  }\n\n  teardown() {\n    // Remove form-control class only if we added it\n    if (this._formControlAdded) {\n      this.input.classList.remove('form-control');\n      this._formControlAdded = false;\n    }\n\n    // Call parent teardown to handle DOM cleanup\n    super.teardown();\n  }\n\n  buildInputGroup() {\n    // Check if input is already inside an input-group\n    const existingInputGroup = this.input.closest('.input-group');\n\n    if (existingInputGroup) {\n      return this.buildAdvancedInputGroup(existingInputGroup);\n    } else {\n      return this.buildBasicInputGroup();\n    }\n  }\n\n  buildBasicInputGroup() {\n    const inputGroupSize = this._detectInputGroupSize();\n    const testidAttr = this.getWrapperTestId();\n\n    let html;\n    if (this.settings.verticalbuttons) {\n      html = `\n        <div class=\"input-group ${inputGroupSize} bootstrap-touchspin\" data-touchspin-injected=\"wrapper\"${testidAttr}>\n          ${this.settings.prefix ? `<div class=\"input-group-prepend bootstrap-touchspin-prefix\" data-touchspin-injected=\"prefix\"${this.getPrefixTestId()}>\n            <span class=\"input-group-text ${this.settings.prefix_extraclass || ''}\">${this.settings.prefix}</span>\n          </div>` : ''}\n          ${this.settings.postfix ? `<div class=\"input-group-append bootstrap-touchspin-postfix\" data-touchspin-injected=\"postfix\"${this.getPostfixTestId()}>\n            <span class=\"input-group-text ${this.settings.postfix_extraclass || ''}\">${this.settings.postfix}</span>\n          </div>` : ''}\n          ${this.buildVerticalButtons()}\n        </div>\n      `;\n    } else {\n      html = `\n        <div class=\"input-group ${inputGroupSize} bootstrap-touchspin\" data-touchspin-injected=\"wrapper\"${testidAttr}>\n          <div class=\"input-group-prepend\" data-touchspin-injected=\"prepend-wrapper\">\n            <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttondown_class || 'btn btn-outline-secondary'} bootstrap-touchspin-down\" data-touchspin-injected=\"down\"${this.getDownButtonTestId()} type=\"button\" aria-label=\"Decrease value\">${this.settings.buttondown_txt || 'âˆ’'}</button>\n            ${this.settings.prefix ? `<span class=\"input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}\" data-touchspin-injected=\"prefix\"${this.getPrefixTestId()}>${this.settings.prefix}</span>` : ''}\n          </div>\n          <div class=\"input-group-append\" data-touchspin-injected=\"append-wrapper\">\n            ${this.settings.postfix ? `<span class=\"input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}\" data-touchspin-injected=\"postfix\"${this.getPostfixTestId()}>${this.settings.postfix}</span>` : ''}\n            <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttonup_class || 'btn btn-outline-secondary'} bootstrap-touchspin-up\" data-touchspin-injected=\"up\"${this.getUpButtonTestId()} type=\"button\" aria-label=\"Increase value\">${this.settings.buttonup_txt || '+'}</button>\n          </div>\n        </div>\n      `;\n    }\n\n    // Create wrapper and wrap the input\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = html.trim();\n    const wrapper = tempDiv.firstChild;\n\n    // Insert wrapper and move input into it\n    this.input.parentElement.insertBefore(wrapper, this.input);\n\n    // Find the position to insert input\n    if (this.settings.verticalbuttons) {\n      // For vertical buttons: prefix -> input -> postfix -> vertical-buttons\n      const prefixWrapper = wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n      const postfixWrapper = wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n      \n      if (prefixWrapper) {\n        // Insert after prefix\n        wrapper.insertBefore(this.input, prefixWrapper.nextSibling);\n      } else if (postfixWrapper) {\n        // No prefix, insert before postfix\n        wrapper.insertBefore(this.input, postfixWrapper);\n      } else {\n        // No prefix or postfix, insert before vertical wrapper\n        const verticalWrapper = wrapper.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n        wrapper.insertBefore(this.input, verticalWrapper);\n      }\n    } else {\n      // For horizontal buttons: input goes between prepend and append wrappers\n      const appendWrapper = wrapper.querySelector('[data-touchspin-injected=\"append-wrapper\"]');\n      wrapper.insertBefore(this.input, appendWrapper);\n    }\n\n    return wrapper;\n  }\n\n  buildAdvancedInputGroup(existingInputGroup) {\n    // Add bootstrap-touchspin class to existing input-group\n    existingInputGroup.classList.add('bootstrap-touchspin');\n    existingInputGroup.setAttribute('data-touchspin-injected', 'wrapper-advanced');\n\n    // Add testid if wrapper doesn't already have one and input has one\n    const inputTestId = this.input.getAttribute('data-testid');\n    const existingWrapperTestId = existingInputGroup.getAttribute('data-testid');\n    if (!existingWrapperTestId && inputTestId) {\n      existingInputGroup.setAttribute('data-testid', `${inputTestId}-wrapper`);\n    }\n\n    // Create elements based on vertical or horizontal layout\n    let elementsHtml;\n    if (this.settings.verticalbuttons) {\n      elementsHtml = `\n        ${this.settings.prefix ? `<div class=\"input-group-prepend bootstrap-touchspin-prefix\" data-touchspin-injected=\"prefix\"${this.getPrefixTestId()}>\n          <span class=\"input-group-text ${this.settings.prefix_extraclass || ''}\">${this.settings.prefix}</span>\n        </div>` : ''}\n        ${this.settings.postfix ? `<div class=\"input-group-append bootstrap-touchspin-postfix\" data-touchspin-injected=\"postfix\"${this.getPostfixTestId()}>\n          <span class=\"input-group-text ${this.settings.postfix_extraclass || ''}\">${this.settings.postfix}</span>\n        </div>` : ''}\n        ${this.buildVerticalButtons()}\n      `;\n    } else {\n      elementsHtml = `\n        <div class=\"input-group-prepend\" data-touchspin-injected=\"prepend-wrapper\">\n          <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttondown_class || 'btn btn-outline-secondary'} bootstrap-touchspin-down\" data-touchspin-injected=\"down\"${this.getDownButtonTestId()} type=\"button\">${this.settings.buttondown_txt || '-'}</button>\n          ${this.settings.prefix ? `<span class=\"input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}\" data-touchspin-injected=\"prefix\"${this.getPrefixTestId()}>${this.settings.prefix}</span>` : ''}\n        </div>\n        <div class=\"input-group-append\" data-touchspin-injected=\"append-wrapper\">\n          ${this.settings.postfix ? `<span class=\"input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}\" data-touchspin-injected=\"postfix\"${this.getPostfixTestId()}>${this.settings.postfix}</span>` : ''}\n          <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttonup_class || 'btn btn-outline-secondary'} bootstrap-touchspin-up\" data-touchspin-injected=\"up\"${this.getUpButtonTestId()} type=\"button\">${this.settings.buttonup_txt || '+'}</button>\n        </div>\n      `;\n    }\n\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = elementsHtml;\n\n    // Declare element references at function scope\n    let prefixEl;\n    let postfixEl;\n\n    if (this.settings.verticalbuttons) {\n      // For vertical buttons: prefix -> input -> postfix -> vertical-buttons\n      prefixEl = tempDiv.querySelector('[data-touchspin-injected=\"prefix\"]');\n      if (prefixEl) {\n        existingInputGroup.insertBefore(prefixEl, this.input);\n      }\n\n      postfixEl = tempDiv.querySelector('[data-touchspin-injected=\"postfix\"]');\n      if (postfixEl) {\n        existingInputGroup.insertBefore(postfixEl, this.input.nextSibling);\n      }\n\n      const verticalButtonWrapper = tempDiv.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n      if (verticalButtonWrapper) {\n        existingInputGroup.insertBefore(verticalButtonWrapper, postfixEl ? postfixEl.nextSibling : this.input.nextSibling);\n      }\n    } else {\n      // For horizontal buttons: prepend wrapper -> input -> append wrapper\n      const prependWrapper = tempDiv.querySelector('[data-touchspin-injected=\"prepend-wrapper\"]');\n      if (prependWrapper) {\n        existingInputGroup.insertBefore(prependWrapper, this.input);\n      }\n\n      const appendWrapper = tempDiv.querySelector('[data-touchspin-injected=\"append-wrapper\"]');\n      if (appendWrapper) {\n        existingInputGroup.insertBefore(appendWrapper, this.input.nextSibling);\n      }\n\n      // Store references to prefix/postfix elements within their wrappers\n      prefixEl = prependWrapper ? prependWrapper.querySelector('[data-touchspin-injected=\"prefix\"]') : null;\n      postfixEl = appendWrapper ? appendWrapper.querySelector('[data-touchspin-injected=\"postfix\"]') : null;\n    }\n\n    // Store internal references for advanced mode too\n    this.prefixEl = prefixEl;\n    this.postfixEl = postfixEl;\n\n    return existingInputGroup;\n  }\n\n  _detectInputGroupSize() {\n    const classList = this.input.className;\n    if (classList.includes('form-control-sm')) {\n      return 'input-group-sm';\n    } else if (classList.includes('form-control-lg')) {\n      return 'input-group-lg';\n    }\n    return '';\n  }\n\n  buildAndAttachDOM() {\n    // 1. Build and inject DOM structure around input\n    this.wrapper = this.buildInputGroup();\n\n    // 2. Find created buttons and store prefix/postfix references\n    const upButton = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n    const downButton = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n    this.prefixEl = this.wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n    this.postfixEl = this.wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n\n    // 3. Tell core to attach its event handlers\n    this.core.attachUpEvents(upButton);\n    this.core.attachDownEvents(downButton);\n  }\n\n  updatePrefix(value) {\n    // Use internal reference\n    const prefixEl = this.prefixEl;\n\n    if (value && value !== '') {\n      if (prefixEl) {\n        // prefixEl is now the span element itself\n        prefixEl.textContent = value;\n        prefixEl.style.display = '';\n        // Update classes in case prefix_extraclass changed\n        prefixEl.className = `input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}`.trim();\n      } else {\n        // Element doesn't exist, need to rebuild DOM\n        this.rebuildDOM();\n      }\n    } else if (prefixEl) {\n      // Remove element if value is empty\n      this.rebuildDOM();\n    }\n  }\n\n  updatePostfix(value) {\n    // Use internal reference\n    const postfixEl = this.postfixEl;\n\n    if (value && value !== '') {\n      if (postfixEl) {\n        // postfixEl is now the span element itself\n        postfixEl.textContent = value;\n        postfixEl.style.display = '';\n        // Update classes in case postfix_extraclass changed\n        postfixEl.className = `input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}`.trim();\n      } else {\n        // Element doesn't exist, need to rebuild DOM\n        this.rebuildDOM();\n      }\n    } else if (postfixEl) {\n      // Remove element if value is empty\n      this.rebuildDOM();\n    }\n  }\n\n  updateButtonClass(type, className) {\n    const button = this.wrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n    if (button) {\n      button.className = `${className || 'btn btn-outline-secondary'} bootstrap-touchspin-${type}`;\n    }\n  }\n\n  buildVerticalButtons() {\n    // Bootstrap 4: Return complete structure with input-group-text wrapper (matches original)\n    return `\n      <span class=\"input-group-text bootstrap-touchspin-vertical-button-wrapper\" data-touchspin-injected=\"vertical-wrapper\">\n        <span class=\"input-group-btn-vertical\">\n          <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttonup_class || 'btn btn-outline-secondary'} ${this.settings.verticalupclass || 'btn btn-outline-secondary'} bootstrap-touchspin-up\" data-touchspin-injected=\"up\"${this.getUpButtonTestId()} type=\"button\" aria-label=\"Increase value\">${this.settings.verticalup || '+'}</button>\n          <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttondown_class || 'btn btn-outline-secondary'} ${this.settings.verticaldownclass || 'btn btn-outline-secondary'} bootstrap-touchspin-down\" data-touchspin-injected=\"down\"${this.getDownButtonTestId()} type=\"button\" aria-label=\"Decrease value\">${this.settings.verticaldown || 'âˆ’'}</button>\n        </span>\n      </span>\n    `;\n  }\n\n  updateVerticalButtonClass(type, className) {\n    const verticalWrapper = this.wrapper.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n    if (verticalWrapper) {\n      const button = verticalWrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n      if (button) {\n        // Update the vertical-specific class while preserving base classes\n        const baseClasses = this.settings.buttonup_class || this.settings.buttondown_class || 'btn btn-outline-secondary';\n        button.className = `${baseClasses} ${className || 'btn btn-outline-secondary'} bootstrap-touchspin-${type}`;\n      }\n    }\n  }\n\n  updateVerticalButtonText(type, text) {\n    const verticalWrapper = this.wrapper.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n    if (verticalWrapper) {\n      const button = verticalWrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n      if (button) {\n        button.textContent = text || (type === 'up' ? '+' : 'âˆ’');\n      }\n    }\n  }\n\n  updateButtonText(type, text) {\n    const button = this.wrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n    if (button) {\n      button.textContent = text || (type === 'up' ? '+' : 'âˆ’');\n    }\n  }\n\n  updatePrefixClasses() {\n    const prefixEl = this.prefixEl;\n    if (prefixEl) {\n      // prefixEl is now the span element itself\n      prefixEl.className = `input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}`.trim();\n    }\n  }\n\n  updatePostfixClasses() {\n    const postfixEl = this.postfixEl;\n    if (postfixEl) {\n      // postfixEl is now the span element itself\n      postfixEl.className = `input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}`.trim();\n    }\n  }\n\n  handleVerticalButtonsChange(newValue) {\n    // Remove old DOM and rebuild with new layout\n    this.rebuildDOM();\n  }\n\n  rebuildDOM() {\n    // Remove old DOM and rebuild with current settings\n    this.removeInjectedElements();\n    // Reset wrapper reference since it was removed\n    this.wrapper = null;\n    this.prefixEl = null;\n    this.postfixEl = null;\n    this.buildAndAttachDOM();\n  }\n\n  updateButtonFocusability(newValue) {\n    // Find all buttons and update their tabindex\n    const buttons = this.wrapper.querySelectorAll('[data-touchspin-injected=\"up\"], [data-touchspin-injected=\"down\"]');\n    const tabindex = newValue ? '0' : '-1';\n    buttons.forEach(button => {\n      button.setAttribute('tabindex', tabindex);\n    });\n  }\n}\n\nexport default Bootstrap4Renderer;\n","// Standalone Bootstrap 4 build entry point\nimport { TouchSpin as CoreTouchSpin, TouchSpinCore, getTouchSpin } from '../../packages/core/src/index.js';\nimport Bootstrap4Renderer from '../../packages/renderers/bootstrap4/src/Bootstrap4Renderer.js';\n\n// Create a wrapper that automatically sets the Bootstrap 4 renderer\nfunction TouchSpin(element, options = {}) {\n  if (!(element instanceof Element)) {\n    throw new TypeError('TouchSpin expects an HTMLElement');\n  }\n\n  // Set the baked-in renderer for this build\n  options.renderer = options.renderer || Bootstrap4Renderer;\n\n  // Use the core TouchSpin function which properly handles initDOMEventHandling\n  return CoreTouchSpin(element, options);\n}\n\n// Expose additional API functions\nTouchSpin.get = getTouchSpin;\nTouchSpin.destroy = (element) => {\n  const instance = getTouchSpin(element);\n  if (instance && instance.destroy) {\n    instance.destroy();\n    return true;\n  }\n  return false;\n};\n\n// For standalone builds, ensure globals are properly exposed\nif (typeof window !== 'undefined') {\n  window.TouchSpin = TouchSpin;\n  window.TouchSpinCore = TouchSpinCore;\n  window.getTouchSpin = getTouchSpin;\n  window.Bootstrap4Renderer = Bootstrap4Renderer;\n}\n\n// Export for module systems only (no default export)\nexport { TouchSpin, TouchSpinCore, getTouchSpin, Bootstrap4Renderer };"],"names":["DEFAULTS","min","max","initval","replacementval","firstclickvalueifempty","step","decimals","forcestepdivisibility","stepinterval","stepintervaldelay","verticalbuttons","verticalup","verticaldown","verticalupclass","verticaldownclass","focusablebuttons","prefix","postfix","prefix_extraclass","postfix_extraclass","booster","boostat","maxboostedstep","mousewheel","buttonup_class","buttondown_class","buttonup_txt","buttondown_txt","callback_before_calculation","v","callback_after_calculation","INSTANCE_KEY","TouchSpinCore","inputEl","opts","arguments","length","undefined","_classCallCheck","nodeName","Error","this","input","dataAttrs","_parseDataAttributes","settings","Object","assign","_sanitizeSettings","renderer","globalThis","TouchSpinDefaultRenderer","console","warn","spinning","spincount","direction","_events","Map","_teardownCallbacks","_settingObservers","_spinDelayTimeout","_spinIntervalTimer","_upButton","_downButton","_wrapper","_handleUpMouseDown","bind","_handleDownMouseDown","_handleMouseUp","_handleUpKeyDown","_handleUpKeyUp","_handleDownKeyDown","_handleDownKeyUp","_handleInputChange","_handleInputBlur","_handleKeyDown","_handleKeyUp","_handleWheel","_initializeInput","init","_setupMutationObserver","_createClass","key","value","_updateAriaAttributes","_syncNativeAttributes","_checkValue","stepNum","Number","isFinite","decNum","Math","floor","minNum","maxNum","tmp","si","sid","parsed","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","optionName","attrName","fullAttrName","concat","hasAttribute","rawValue","getAttribute","_coerceAttributeValue","_i2","_arr","nativeAttr","includes","num","parseFloat","isNaN","disabled","getValue","next","_nextValue","emit","stopSpin","_setDisplay","_startSpin","_clearSpinTimers","_this","oldSettings","_objectSpread","newSettings","sanitizedPartial","sanitizePartialSettings","_alignToStep","keys","forEach","observers","get","callback","error","raw","NaN","before","String","adjusted","_applyConstraints","_findDOMElements","_attachDOMEventListeners","_this2","push","index","indexOf","splice","teardown","_detachDOMEventListeners","clear","_mutationObserver","disconnect","upOnce","downOnce","startUpSpin","startDownSpin","updateSettings","setValue","destroy","on","off","initDOMEventHandling","registerTeardown","attachUpEvents","attachDownEvents","observeSetting","element","addEventListener","passive","_updateButtonDisabledState","settingName","has","set","Set","add","delete","event","handler","_this3","size","detail","_i3","_arr2","_toConsumableArray","fn","_unused","dir","_this4","delay","interval","setTimeout","setInterval","_spinStep","clearTimeout","_unused2","clearInterval","_unused3","current","_valueIfIsNaN","base","parseInt","stepUnclamped","pow","mbs","round","aligned","_forcestepdivisibility","clamped","boosted","cap","val","out","mode","dec","ceil","toFixed","k","s","V","S","r","mayTriggerChange","_this$input$value","prev","_formatDisplay","dispatchEvent","Event","bubbles","el","setAttribute","removeAttribute","nativeMin","nativeMax","nativeStep","needsUpdate","parsedMin","parsedMax","parsedStep","wrapper","parentElement","document","removeEventListener","e","preventDefault","keyCode","currentValue","wouldBeSanitized","stopImmediatePropagation","activeElement","deltaY","_this5","MutationObserver","mutations","mutation","type","attributeName","_syncSettingsFromNativeAttributes","observe","attributes","attributeFilter","isDisabled","partial","prototype","hasOwnProperty","call","n","hasMin","hasMax","getTouchSpin","toPublicApi","Bootstrap4Renderer","_AbstractRenderer","_callSuper","_inherits","prefixEl","postfixEl","classList","contains","_formControlAdded","buildAndAttachDOM","core","newValue","updatePrefix","updatePostfix","updateButtonClass","updateVerticalButtonClass","updateVerticalButtonText","updateButtonText","updatePrefixClasses","updatePostfixClasses","handleVerticalButtonsChange","updateButtonFocusability","remove","existingInputGroup","closest","buildAdvancedInputGroup","buildBasicInputGroup","html","inputGroupSize","_detectInputGroupSize","testidAttr","getWrapperTestId","getPrefixTestId","getPostfixTestId","buildVerticalButtons","getDownButtonTestId","getUpButtonTestId","tempDiv","createElement","innerHTML","trim","firstChild","insertBefore","prefixWrapper","querySelector","postfixWrapper","nextSibling","verticalWrapper","appendWrapper","elementsHtml","inputTestId","verticalButtonWrapper","prependWrapper","className","buildInputGroup","upButton","downButton","textContent","style","display","rebuildDOM","button","baseClasses","text","removeInjectedElements","buttons","querySelectorAll","tabindex","AbstractRenderer","_this$input$parentEle","TouchSpin","options","Element","TypeError","CoreTouchSpin","instance","window"],"mappings":"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"}