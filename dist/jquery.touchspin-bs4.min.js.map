{"version":3,"file":"jquery.touchspin-bs4.min.js","sources":["../packages/core/src/AbstractRenderer.js","../packages/core/src/RawRenderer.js","../packages/core/src/index.js","../packages/renderers/bootstrap4/src/Bootstrap4Renderer.js","../packages/jquery-plugin/src/index.js","../src/entries/jquery-bs4.js"],"sourcesContent":["/**\n * AbstractRenderer - Base class for TouchSpin renderers\n * Part of @touchspin/core package to avoid duplication across renderer packages\n * \n * @example\n * class CustomRenderer extends AbstractRenderer {\n *   init() {\n *     this.wrapper = this.buildUI();\n *     const upBtn = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n *     const downBtn = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n *     this.core.attachUpEvents(upBtn);\n *     this.core.attachDownEvents(downBtn);\n *     this.core.observeSetting('prefix', (value) => this.updatePrefix(value));\n *   }\n * }\n */\nclass AbstractRenderer {\n  /**\n   * @param {HTMLInputElement} inputEl - The input element to render around\n   * @param {Object} settings - TouchSpin settings (read-only)\n   * @param {Object} core - TouchSpin core instance for event delegation\n   */\n  constructor(inputEl, settings, core) {\n    // New renderer architecture\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n    /** @type {Object} */\n    this.settings = settings; // Read-only access to settings\n    /** @type {Object} */\n    this.core = core; // Reference to core for calling attachment methods\n    /** @type {HTMLElement|null} */\n    this.wrapper = null; // Set by subclasses during init()\n    \n    // Legacy compatibility (transitional)\n    this.$ = typeof $ !== 'undefined' ? $ : null;\n    this.originalinput = this.$ ? this.$(inputEl) : null;\n    this.container = null;\n    this.elements = null;\n  }\n\n  /**\n   * Initialize the renderer - build DOM structure and attach events\n   * Must be implemented by subclasses\n   * @abstract\n   */\n  init() { \n    throw new Error('init() must be implemented by renderer'); \n  }\n  \n  /**\n   * Cleanup renderer - remove injected elements and restore original state\n   * Default implementation removes all injected elements\n   * Subclasses can override for custom teardown\n   */\n  teardown() {\n    // Default implementation - remove all injected elements\n    this.removeInjectedElements();\n    // Subclasses can override for custom teardown\n  }\n  \n  /**\n   * Utility method to remove all injected TouchSpin elements\n   * Handles both regular wrappers and advanced input groups\n   * Called automatically by teardown()\n   */\n  removeInjectedElements() {\n    // Find and remove all elements with data-touchspin-injected attribute\n    if (this.wrapper) {\n      const injected = this.wrapper.querySelectorAll('[data-touchspin-injected]');\n      injected.forEach(el => el.remove());\n      \n      // If wrapper itself was injected and is not the original parent\n      if (this.wrapper.hasAttribute('data-touchspin-injected') && this.wrapper.parentElement) {\n        const injectedType = this.wrapper.getAttribute('data-touchspin-injected');\n        \n        if (injectedType === 'wrapper-advanced') {\n          // For advanced input groups, just remove the TouchSpin classes and attribute\n          // but keep the original input-group structure intact\n          this.wrapper.classList.remove('bootstrap-touchspin');\n          this.wrapper.removeAttribute('data-touchspin-injected');\n        } else {\n          // For regular wrappers, unwrap the input element\n          const parent = this.wrapper.parentElement;\n          parent.insertBefore(this.input, this.wrapper);\n          this.wrapper.remove();\n        }\n      }\n    }\n    \n    // Also find any injected elements that might be siblings or elsewhere\n    const allInjected = document.querySelectorAll('[data-touchspin-injected]');\n    allInjected.forEach(el => {\n      // Only remove if it's related to this input (check if input is descendant or sibling)\n      if (el.contains(this.input) || \n          (el.parentElement && el.parentElement.contains(this.input)) ||\n          this.input.parentElement?.contains(el)) {\n        // Don't remove the input itself\n        if (el !== this.input) {\n          el.remove();\n        }\n      }\n    });\n  }\n\n  // Legacy methods (transitional - for backward compatibility)\n  getFrameworkId() { throw new Error('getFrameworkId() must be implemented by subclasses'); }\n  getDefaultSettings() { return {}; }\n  buildAdvancedInputGroup(parentelement) { throw new Error('buildAdvancedInputGroup() must be implemented by subclasses'); }\n  buildInputGroup() { throw new Error('buildInputGroup() must be implemented by subclasses'); }\n  buildVerticalButtons() { throw new Error('buildVerticalButtons() must be implemented by subclasses'); }\n\n  initElements(container) {\n    this.container = container;\n    let downButtons = this._findElements(container, 'down');\n    let upButtons = this._findElements(container, 'up');\n    if (downButtons.length === 0 || upButtons.length === 0) {\n      const verticalContainer = this._findElements(container.parent(), 'vertical-wrapper');\n      if (verticalContainer.length > 0) {\n        downButtons = this._findElements(verticalContainer, 'down');\n        upButtons = this._findElements(verticalContainer, 'up');\n      }\n    }\n    \n    // Ensure input element has data-touchspin-injected=\"input\" for core event targeting\n    this.originalinput.attr('data-touchspin-injected', 'input');\n    \n    this.elements = {\n      down: downButtons,\n      up: upButtons,\n      input: this.$('input', container),\n      prefix: this._findElements(container, 'prefix').addClass(this.settings.prefix_extraclass),\n      postfix: this._findElements(container, 'postfix').addClass(this.settings.postfix_extraclass)\n    };\n    return this.elements;\n  }\n\n  _findElements(container, role) { return this.$(`[data-touchspin-injected=\"${role}\"]`, container); }\n\n  hideEmptyPrefixPostfix() {\n    const detached = {};\n    if (this.settings.prefix === '') detached._detached_prefix = this.elements.prefix.detach();\n    if (this.settings.postfix === '') detached._detached_postfix = this.elements.postfix.detach();\n    return detached;\n  }\n\n  updatePrefixPostfix(newsettings, detached) { throw new Error('updatePrefixPostfix() must be implemented by subclasses'); }\n\n  getWrapperTestId() {\n    const inputTestId = this.originalinput.attr('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-wrapper\"`;\n    return '';\n  }\n}\n\nexport default AbstractRenderer;","import AbstractRenderer from './AbstractRenderer.js';\n\n/**\n * RawRenderer - Minimal renderer that adds no UI elements\n * Allows TouchSpin to work with just the input element (keyboard, wheel, events still work)\n * Perfect for custom implementations or when only programmatic API is needed\n */\nclass RawRenderer extends AbstractRenderer {\n  init() {\n    // Does nothing - no additional UI elements\n    // Core still handles the input element directly\n    // Keyboard, wheel, ARIA, and programmatic methods still work via core\n  }\n  \n  teardown() {\n    // Nothing to clean up - no UI was added\n    // Core will handle input element cleanup\n  }\n}\n\nexport default RawRenderer;","// @ts-check\nimport RawRenderer from './RawRenderer.js';\n\n/**\n * @fileoverview Framework-agnostic core scaffold for TouchSpin.\n * Phase A (A1): minimal public API surface to enable incremental extraction.\n * This is a placeholder; logic will be ported from TouchSpinCore.migrated.js in A2â€“A7.\n */\n\n/**\n * @typedef {'none'|'floor'|'round'|'ceil'} ForceStepDivisibility\n */\n\n/**\n * @callback TouchSpinCalcCallback\n * @param {string} value\n * @returns {string}\n */\n\n/**\n * @typedef {Object} TouchSpinCoreOptions\n * @property {number|null=} min\n * @property {number|null=} max\n * @property {number|null=} firstclickvalueifempty\n * @property {number=} step\n * @property {number=} decimals\n * @property {ForceStepDivisibility=} forcestepdivisibility\n * @property {number=} stepinterval\n * @property {number=} stepintervaldelay\n * @property {boolean=} booster\n * @property {number=} boostat\n * @property {number|false=} maxboostedstep\n * @property {TouchSpinCalcCallback=} callback_before_calculation\n * @property {TouchSpinCalcCallback=} callback_after_calculation\n * @property {Function} renderer - Required renderer class (e.g., Bootstrap5Renderer, RawRenderer)\n * @property {string=} prefix - Text/HTML before input (handled by renderer)\n * @property {string=} postfix - Text/HTML after input (handled by renderer)\n * @property {string=} buttonup_class - CSS classes for up button (handled by renderer)\n * @property {string=} buttondown_class - CSS classes for down button (handled by renderer)\n * @property {string=} buttonup_txt - Content for up button (handled by renderer)\n * @property {string=} buttondown_txt - Content for down button (handled by renderer)\n */\n\nconst DEFAULTS = {\n  min: 0,\n  max: 100,\n  firstclickvalueifempty: null,\n  step: 1,\n  decimals: 0,\n  forcestepdivisibility: 'round',\n  stepinterval: 100,\n  stepintervaldelay: 500,\n  booster: true,\n  boostat: 10,\n  maxboostedstep: false,\n  callback_before_calculation: (v) => v,\n  callback_after_calculation: (v) => v,\n};\n\nconst INSTANCE_KEY = '_touchSpinCore';\n\nexport class TouchSpinCore {\n  /**\n   * @param {HTMLInputElement} inputEl\n   * @param {Partial<TouchSpinCoreOptions>=} opts\n   */\n  constructor(inputEl, opts = {}) {\n    if (!inputEl || inputEl.nodeName !== 'INPUT') {\n      throw new Error('TouchSpinCore requires an <input> element');\n    }\n\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n    /** @type {TouchSpinCoreOptions} */\n    this.settings = Object.assign({}, DEFAULTS, opts);\n\n    // Use RawRenderer as fallback if no renderer specified\n    if (!this.settings.renderer) {\n      console.warn('TouchSpin: No renderer specified. Using RawRenderer (no UI). Consider using Bootstrap3/4/5Renderer or TailwindRenderer.');\n      this.settings.renderer = RawRenderer;\n    }\n\n    /** @type {boolean} */\n    this.spinning = false;\n    /** @type {number} */\n    this.spincount = 0;\n    /** @type {false|'up'|'down'} */\n    this.direction = false;\n    /** @type {Map<string, Set<Function>>} */\n    this._events = new Map();\n    /** @type {Array<Function>} */\n    this._teardownCallbacks = [];\n    /** @type {Map<string, Set<Function>>} */\n    this._settingObservers = new Map(); // For observer pattern\n\n    /** @type {ReturnType<typeof setTimeout>|null} */\n    this._spinDelayTimeout = null;\n    /** @type {ReturnType<typeof setInterval>|null} */\n    this._spinIntervalTimer = null;\n\n    /** @type {HTMLElement|null} */\n    this._upButton = null;\n    /** @type {HTMLElement|null} */\n    this._downButton = null;\n    /** @type {HTMLElement|null} */\n    this._wrapper = null;\n\n    // DOM event handlers (bound methods)\n    this._handleUpMouseDown = this._handleUpMouseDown.bind(this);\n    this._handleDownMouseDown = this._handleDownMouseDown.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this._handleInputChange = this._handleInputChange.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this._handleKeyUp = this._handleKeyUp.bind(this);\n    this._handleWheel = this._handleWheel.bind(this);\n\n    // Core always manages the input element\n    this._initializeInput();\n\n    // Initialize renderer with reference to core\n    if (this.settings.renderer) {\n      this.renderer = new this.settings.renderer(inputEl, this.settings, this);\n      this.renderer.init();\n    }\n  }\n\n  /**\n   * Initialize input element (core always handles this)\n   * @private\n   */\n  _initializeInput() {\n    // Core always handles these for the input\n    this._updateAriaAttributes();\n    this._checkValue(false);\n  }\n\n  /** Increment once according to step */\n  upOnce() {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('up', v);\n    const prevNum = v;\n    this._setDisplay(next, true);\n    if (isFinite(prevNum) && next !== prevNum) {\n      if (this.settings.max != null && next === this.settings.max) this.emit('max');\n      if (this.settings.min != null && next === this.settings.min) this.emit('min');\n    }\n    // If we hit the max while spinning upward, stop the spin to release lock\n    if (this.spinning && this.direction === 'up' && this.settings.max != null && next === this.settings.max) {\n      this.stopSpin();\n    }\n  }\n\n  /** Decrement once according to step */\n  downOnce() {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('down', v);\n    const prevNum = v;\n    this._setDisplay(next, true);\n    if (isFinite(prevNum) && next !== prevNum) {\n      if (this.settings.max != null && next === this.settings.max) this.emit('max');\n      if (this.settings.min != null && next === this.settings.min) this.emit('min');\n    }\n    // If we hit the min while spinning downward, stop the spin to release lock\n    if (this.spinning && this.direction === 'down' && this.settings.min != null && next === this.settings.min) {\n      this.stopSpin();\n    }\n  }\n\n  /** Start increasing repeatedly (placeholder) */\n  startUpSpin() { this._startSpin('up'); }\n\n  /** Start decreasing repeatedly (placeholder) */\n  startDownSpin() { this._startSpin('down'); }\n\n  /** Stop spinning (placeholder) */\n  stopSpin() {\n    this._clearSpinTimers();\n    if (this.spinning) {\n      if (this.direction === 'up') {\n        this.emit('stopupspin');\n        this.emit('stopspin');\n      } else if (this.direction === 'down') {\n        this.emit('stopdownspin');\n        this.emit('stopspin');\n      }\n    }\n    this.spinning = false;\n    this.direction = false;\n    this.spincount = 0;\n  }\n\n  /**\n   * @param {Partial<TouchSpinCoreOptions>} opts\n   */\n  updateSettings(opts) {\n    const oldSettings = { ...this.settings };\n    const newSettings = opts || {};\n\n    this.settings = Object.assign({}, this.settings, newSettings);\n\n    // If step/min/max changed and step != 1, align bounds to step like the jQuery plugin\n    const step = Number(this.settings.step || 1);\n    if ((newSettings.step !== undefined || newSettings.min !== undefined || newSettings.max !== undefined) && step !== 1) {\n      if (this.settings.max != null) {\n        this.settings.max = this._alignToStep(Number(this.settings.max), step, 'down');\n      }\n      if (this.settings.min != null) {\n        this.settings.min = this._alignToStep(Number(this.settings.min), step, 'up');\n      }\n    }\n\n    // Notify observers of changed settings\n    Object.keys(newSettings).forEach(key => {\n      if (oldSettings[key] !== newSettings[key]) {\n        const observers = this._settingObservers.get(key);\n        if (observers) {\n          observers.forEach(callback => {\n            try {\n              callback(newSettings[key], oldSettings[key]);\n            } catch (error) {\n              console.error('TouchSpin: Error in setting observer callback:', error);\n            }\n          });\n        }\n      }\n    });\n\n    // Core handles its own setting changes\n    this._updateAriaAttributes();\n    this._checkValue(false);\n  }\n\n  /** @returns {number} */\n  getValue() {\n    const raw = this.input.value;\n    if (raw === '') return NaN;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    return isNaN(num) ? NaN : num;\n  }\n\n  /**\n   * @param {number|string} v\n   */\n  setValue(v) {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    const parsed = Number(v);\n    if (!isFinite(parsed)) return;\n    const adjusted = this._applyConstraints(parsed);\n    this._setDisplay(adjusted, true);\n  }\n\n  /**\n   * Initialize DOM event handling by finding elements and attaching listeners.\n   * Must be called after the renderer has created the DOM structure.\n   */\n  initDOMEventHandling() {\n    // Find DOM elements and attach listeners\n    this._findDOMElements();\n    this._attachDOMEventListeners();\n  }\n\n  /**\n   * Register a teardown callback that will be called when the instance is destroyed.\n   * This allows wrapper libraries to register cleanup logic.\n   * @param {Function} callback - Function to call on destroy\n   * @returns {Function} - Unregister function\n   */\n  registerTeardown(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Teardown callback must be a function');\n    }\n    this._teardownCallbacks.push(callback);\n\n    // Return unregister function\n    return () => {\n      const index = this._teardownCallbacks.indexOf(callback);\n      if (index > -1) {\n        this._teardownCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /** Cleanup and destroy the TouchSpin instance */\n  destroy() {\n    this.stopSpin();\n\n    // Renderer cleans up its added elements\n    if (this.renderer && this.renderer.teardown) {\n      this.renderer.teardown();\n    }\n\n    // Core cleans up input events only\n    this._detachDOMEventListeners();\n\n    // Call all registered teardown callbacks (for wrapper cleanup)\n    this._teardownCallbacks.forEach(callback => {\n      try {\n        callback();\n      } catch (error) {\n        console.error('TouchSpin teardown callback error:', error);\n      }\n    });\n    this._teardownCallbacks.length = 0; // Clear the array\n\n    // Clear setting observers\n    this._settingObservers.clear();\n\n    // Remove instance from element\n    if (this.input[INSTANCE_KEY] === this) {\n      delete this.input[INSTANCE_KEY];\n    }\n  }\n\n  /**\n   * Create a plain public API object with bound methods for wrappers.\n   * @returns {TouchSpinCorePublicAPI}\n   */\n  toPublicApi() {\n    return {\n      upOnce: this.upOnce.bind(this),\n      downOnce: this.downOnce.bind(this),\n      startUpSpin: this.startUpSpin.bind(this),\n      startDownSpin: this.startDownSpin.bind(this),\n      stopSpin: this.stopSpin.bind(this),\n      updateSettings: this.updateSettings.bind(this),\n      getValue: this.getValue.bind(this),\n      setValue: this.setValue.bind(this),\n      destroy: this.destroy.bind(this),\n      on: this.on.bind(this),\n      off: this.off.bind(this),\n      initDOMEventHandling: this.initDOMEventHandling.bind(this),\n      registerTeardown: this.registerTeardown.bind(this),\n      attachUpEvents: this.attachUpEvents.bind(this),\n      attachDownEvents: this.attachDownEvents.bind(this),\n      observeSetting: this.observeSetting.bind(this),\n    };\n  }\n\n  // --- Renderer Event Attachment Methods ---\n  /**\n   * Attach up button events to an element\n   * Called by renderers after creating up button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachUpEvents(element) {\n    if (!element) {\n      console.warn('TouchSpin: attachUpEvents called with null element');\n      return;\n    }\n\n    element.addEventListener('mousedown', this._handleUpMouseDown);\n    element.addEventListener('touchstart', this._handleUpMouseDown, {passive: false});\n  }\n\n  /**\n   * Attach down button events to an element\n   * Called by renderers after creating down button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachDownEvents(element) {\n    if (!element) {\n      console.warn('TouchSpin: attachDownEvents called with null element');\n      return;\n    }\n\n    element.addEventListener('mousedown', this._handleDownMouseDown);\n    element.addEventListener('touchstart', this._handleDownMouseDown, {passive: false});\n  }\n\n  // --- Settings Observer Pattern ---\n  /**\n   * Allow renderers to observe setting changes\n   * @param {string} settingName - Name of setting to observe\n   * @param {Function} callback - Function to call when setting changes (newValue, oldValue)\n   * @returns {Function} Unsubscribe function\n   */\n  observeSetting(settingName, callback) {\n    if (!this._settingObservers.has(settingName)) {\n      this._settingObservers.set(settingName, new Set());\n    }\n\n    const observers = this._settingObservers.get(settingName);\n    observers.add(callback);\n\n    // Return unsubscribe function\n    return () => observers.delete(callback);\n  }\n\n  // --- Minimal internal emitter API ---\n  /**\n   * Subscribe to a core event.\n   * Events: 'min', 'max', 'startspin', 'startupspin', 'startdownspin', 'stopspin', 'stopupspin', 'stopdownspin'\n   * @param {string} event\n   * @param {(detail?: any) => void} handler\n   */\n  on(event, handler) {\n    const set = this._events.get(event) || new Set();\n    set.add(handler);\n    this._events.set(event, set);\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Unsubscribe from a core event.\n   * @param {string} event\n   * @param {(detail?: any) => void=} handler\n   */\n  off(event, handler) {\n    const set = this._events.get(event);\n    if (!set) return;\n    if (!handler) {\n      this._events.delete(event);\n      return;\n    }\n    set.delete(handler);\n    if (set.size === 0) this._events.delete(event);\n  }\n\n  /**\n   * Emit a core event to subscribers.\n   * @param {string} event\n   * @param {any=} detail\n   */\n  emit(event, detail) {\n    const set = this._events.get(event);\n    if (!set || set.size === 0) return;\n    for (const fn of [...set]) {\n      try { fn(detail); } catch (_) {}\n    }\n  }\n\n  /**\n   * Internal: start timed spin in a direction with initial step, delay, then interval.\n   * @param {'up'|'down'} dir\n   */\n  _startSpin(dir) {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    // If changing direction, reset counters\n    const changed = (!this.spinning || this.direction !== dir);\n    if (changed) {\n      this.spinning = true;\n      this.direction = dir;\n      this.spincount = 0;\n      // Match jQuery plugin event order: startspin then direction-specific\n      this.emit('startspin');\n      if (dir === 'up') this.emit('startupspin'); else this.emit('startdownspin');\n    }\n\n    // Clear previous timers\n    this._clearSpinTimers();\n    // Schedule repeat after delay, then at interval (no immediate step; wrapper triggers first step)\n    const delay = this.settings.stepintervaldelay || 500;\n    const interval = this.settings.stepinterval || 100;\n    this._spinDelayTimeout = setTimeout(() => {\n      this._spinDelayTimeout = null;\n      this._spinIntervalTimer = setInterval(() => {\n        if (!this.spinning || this.direction !== dir) return; // safety\n        this._spinStep(dir);\n      }, interval);\n    }, delay);\n  }\n\n  _clearSpinTimers() {\n    try { if (this._spinDelayTimeout) { clearTimeout(this._spinDelayTimeout); } } catch {}\n    try { if (this._spinIntervalTimer) { clearInterval(this._spinIntervalTimer); } } catch {}\n    this._spinDelayTimeout = null;\n    this._spinIntervalTimer = null;\n  }\n\n  /**\n   * Compute the next numeric value for a direction, respecting step, booster and bounds.\n   * @param {'up'|'down'} dir\n   * @param {number} current\n   */\n  _nextValue(dir, current) {\n    let v = current;\n    if (isNaN(v)) {\n      v = this._valueIfIsNaN();\n    } else {\n      const base = this.settings.step || 1;\n      const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n      const stepUnclamped = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n      const mbs = this.settings.maxboostedstep;\n      let step = stepUnclamped;\n      if (mbs && isFinite(mbs) && stepUnclamped > Number(mbs)) {\n        step = Number(mbs);\n        // Align current value to the boosted step grid when clamped (parity with jQuery plugin)\n        v = Math.round(v / step) * step;\n      }\n      step = Math.max(base, step);\n      v = dir === 'up' ? v + step : v - step;\n    }\n    return this._applyConstraints(v);\n  }\n\n  /** Returns a reasonable value to use when current is NaN. */\n  _valueIfIsNaN() {\n    if (typeof this.settings.firstclickvalueifempty === 'number') {\n      return this.settings.firstclickvalueifempty;\n    }\n    const min = (typeof this.settings.min === 'number') ? this.settings.min : 0;\n    const max = (typeof this.settings.max === 'number') ? this.settings.max : min;\n    return (min + max) / 2;\n  }\n\n  /** Apply step divisibility and clamp to min/max. */\n  _applyConstraints(v) {\n    const aligned = this._forcestepdivisibility(v);\n    const min = this.settings.min;\n    const max = this.settings.max;\n    let clamped = aligned;\n    if (min != null && clamped < min) clamped = min;\n    if (max != null && clamped > max) clamped = max;\n    return clamped;\n  }\n\n  /** Determine the effective step with booster if enabled. */\n  _getBoostedStep() {\n    const base = this.settings.step || 1;\n    if (!this.settings.booster) return base;\n    const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n    let boosted = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n    const mbs = this.settings.maxboostedstep;\n    if (mbs && isFinite(mbs)) {\n      const cap = Number(mbs);\n      if (boosted > cap) boosted = cap;\n    }\n    return Math.max(base, boosted);\n  }\n\n  /** Aligns value to step per forcestepdivisibility. */\n  _forcestepdivisibility(val) {\n    const mode = this.settings.forcestepdivisibility || 'round';\n    const step = this.settings.step || 1;\n    const dec = this.settings.decimals || 0;\n    let out;\n    switch (mode) {\n      case 'floor':\n        out = Math.floor(val / step) * step; break;\n      case 'ceil':\n        out = Math.ceil(val / step) * step; break;\n      case 'none':\n        out = val; break;\n      case 'round':\n      default:\n        out = Math.round(val / step) * step; break;\n    }\n    // Normalize to configured decimals without string pipeline; formatting applies later\n    return Number(out.toFixed(dec));\n  }\n\n  /** Aligns a value to nearest step boundary using integer arithmetic. */\n  _alignToStep(val, step, dir) {\n    if (step === 0) return val;\n    let k = 1, s = step;\n    while (((s * k) % 1) !== 0 && k < 1e6) k *= 10;\n    const V = Math.round(val * k);\n    const S = Math.round(step * k);\n    const r = V % S;\n    if (r === 0) return val;\n    return (dir === 'down' ? (V - r) : (V + (S - r))) / k;\n  }\n\n  /** Format and write to input, optionally emit change if different. */\n  _setDisplay(num, mayTriggerChange) {\n    const prev = String(this.input.value ?? '');\n    const next = this._formatDisplay(num);\n    this.input.value = next;\n    this._updateAriaAttributes();\n    if (mayTriggerChange && prev !== next) {\n      // mirror plugin behavior: trigger a native change event\n      this.input.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    return next;\n  }\n\n  _formatDisplay(num) {\n    const dec = this.settings.decimals || 0;\n    const after = this.settings.callback_after_calculation || ((v) => v);\n    const s = Number(num).toFixed(dec);\n    return after(s);\n  }\n\n  /**\n   * Perform one spin step in a direction while tracking spincount for booster.\n   * @param {'up'|'down'} dir\n   */\n  _spinStep(dir) {\n    this.spincount++;\n    if (dir === 'up') this.upOnce(); else this.downOnce();\n  }\n\n  /** Sanitize current input value and update display; optionally emits change. */\n  _checkValue(mayTriggerChange) {\n    const v = this.getValue();\n    if (!isFinite(v)) return;\n    const adjusted = this._applyConstraints(v);\n    this._setDisplay(adjusted, !!mayTriggerChange);\n  }\n\n  _updateAriaAttributes() {\n    const el = this.input;\n    if (el.getAttribute('role') !== 'spinbutton') {\n      el.setAttribute('role', 'spinbutton');\n    }\n    const min = this.settings.min;\n    const max = this.settings.max;\n    if (min != null) el.setAttribute('aria-valuemin', String(min)); else el.removeAttribute('aria-valuemin');\n    if (max != null) el.setAttribute('aria-valuemax', String(max)); else el.removeAttribute('aria-valuemax');\n    const raw = el.value;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    if (isFinite(num)) el.setAttribute('aria-valuenow', String(num)); else el.removeAttribute('aria-valuenow');\n    el.setAttribute('aria-valuetext', String(raw));\n  }\n\n  // --- DOM Event Handling Methods ---\n\n  /**\n   * Find and store references to DOM elements using data-touchspin-injected attributes.\n   * @private\n   */\n  _findDOMElements() {\n    // Core doesn't need to find buttons - renderers handle button events directly\n    // We only need to find the wrapper for potential future use\n    let wrapper = this.input.parentElement;\n    while (wrapper && !wrapper.hasAttribute('data-touchspin-injected')) {\n      wrapper = wrapper.parentElement;\n    }\n    this._wrapper = wrapper;\n  }\n\n  /**\n   * Attach DOM event listeners to elements.\n   * @private\n   */\n  _attachDOMEventListeners() {\n    // Core should NOT attach button events - renderers handle that via attachUpEvents/attachDownEvents\n\n    // Global mouseup/touchend to stop spinning\n    document.addEventListener('mouseup', this._handleMouseUp);\n    document.addEventListener('mouseleave', this._handleMouseUp);\n    document.addEventListener('touchend', this._handleMouseUp);\n\n    // Input events (always attach these - they work without renderer UI)\n    this.input.addEventListener('input', this._handleInputChange);\n    this.input.addEventListener('change', this._handleInputChange);\n    this.input.addEventListener('keydown', this._handleKeyDown);\n    this.input.addEventListener('keyup', this._handleKeyUp);\n    this.input.addEventListener('wheel', this._handleWheel);\n  }\n\n  /**\n   * Remove DOM event listeners.\n   * @private\n   */\n  _detachDOMEventListeners() {\n    // Core does not manage button events - renderers handle their own cleanup\n\n    // Global events\n    document.removeEventListener('mouseup', this._handleMouseUp);\n    document.removeEventListener('mouseleave', this._handleMouseUp);\n    document.removeEventListener('touchend', this._handleMouseUp);\n\n    // Input events\n    this.input.removeEventListener('input', this._handleInputChange);\n    this.input.removeEventListener('change', this._handleInputChange);\n    this.input.removeEventListener('keydown', this._handleKeyDown);\n    this.input.removeEventListener('keyup', this._handleKeyUp);\n    this.input.removeEventListener('wheel', this._handleWheel);\n  }\n\n  // --- DOM Event Handlers ---\n\n  /**\n   * Handle mousedown/touchstart on up button.\n   * @private\n   */\n  _handleUpMouseDown(e) {\n    e.preventDefault();\n    this.upOnce();\n    this.startUpSpin();\n  }\n\n  /**\n   * Handle mousedown/touchstart on down button.\n   * @private\n   */\n  _handleDownMouseDown(e) {\n    e.preventDefault();\n    this.downOnce();\n    this.startDownSpin();\n  }\n\n  /**\n   * Handle mouseup/touchend/mouseleave to stop spinning.\n   * @private\n   */\n  _handleMouseUp(e) {\n    this.stopSpin();\n  }\n\n  /**\n   * Handle input/change events on the input element.\n   * @private\n   */\n  _handleInputChange(e) {\n    this._checkValue(true);\n  }\n\n  /**\n   * Handle keydown events on the input element.\n   * @private\n   */\n  _handleKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowUp':\n        e.preventDefault();\n        this.upOnce();\n        this.startUpSpin();\n        break;\n      case 'ArrowDown':\n        e.preventDefault();\n        this.downOnce();\n        this.startDownSpin();\n        break;\n      case 'Enter':\n        this._checkValue(true);\n        break;\n    }\n  }\n\n  /**\n   * Handle keyup events on the input element.\n   * @private\n   */\n  _handleKeyUp(e) {\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle wheel events on the input element.\n   * @private\n   */\n  _handleWheel(e) {\n    if (document.activeElement === this.input) {\n      e.preventDefault();\n      if (e.deltaY < 0) {\n        this.upOnce();\n      } else if (e.deltaY > 0) {\n        this.downOnce();\n      }\n    }\n  }\n}\n\n/**\n * @typedef {Object} TouchSpinCorePublicAPI\n * @property {() => void} upOnce\n * @property {() => void} downOnce\n * @property {() => void} startUpSpin\n * @property {() => void} startDownSpin\n * @property {() => void} stopSpin\n * @property {(opts: Partial<TouchSpinCoreOptions>) => void} updateSettings\n * @property {() => number} getValue\n * @property {(v: number|string) => void} setValue\n * @property {() => void} destroy\n * @property {(event: string, handler: (detail?: any) => void) => () => void} on\n * @property {(event: string, handler?: (detail?: any) => void) => void} off\n * @property {() => void} initDOMEventHandling\n * @property {(callback: Function) => () => void} registerTeardown\n */\n\n/**\n * Initialize TouchSpin on an input element or get existing instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI}\n */\nexport function TouchSpin(inputEl, opts) {\n  // If options provided, initialize/reinitialize\n  if (opts !== undefined) {\n    // Destroy existing instance if it exists (destroy() removes itself from element)\n    if (inputEl[INSTANCE_KEY]) {\n      inputEl[INSTANCE_KEY].destroy();\n    }\n\n    // Create new instance and store on element\n    const core = new TouchSpinCore(inputEl, opts);\n    inputEl[INSTANCE_KEY] = core;\n\n    // Initialize DOM event handling\n    core.initDOMEventHandling();\n\n    return core.toPublicApi();\n  }\n\n  // No options - return existing instance or create with defaults\n  if (!inputEl[INSTANCE_KEY]) {\n    const core = new TouchSpinCore(inputEl, {});\n    inputEl[INSTANCE_KEY] = core;\n    core.initDOMEventHandling();\n    return core.toPublicApi();\n  }\n\n  return inputEl[INSTANCE_KEY].toPublicApi();\n}\n\n/**\n * Get existing TouchSpin instance from input element (without creating one).\n * @param {HTMLInputElement} inputEl\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function getTouchSpin(inputEl) {\n  return inputEl[INSTANCE_KEY] ? inputEl[INSTANCE_KEY].toPublicApi() : null;\n}\n\n/**\n * Create and return a plain public API bound to a new core instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI}\n * @deprecated Use TouchSpin() instead\n */\nexport function createPublicApi(inputEl, opts) {\n  return TouchSpin(inputEl, opts);\n}\n\n/** Event name constants for wrappers to map/bridge. */\nexport const CORE_EVENTS = Object.freeze({\n  MIN: 'min',\n  MAX: 'max',\n  START_SPIN: 'startspin',\n  START_UP: 'startupspin',\n  START_DOWN: 'startdownspin',\n  STOP_SPIN: 'stopspin',\n  STOP_UP: 'stopupspin',\n  STOP_DOWN: 'stopdownspin',\n});\n\n/**\n * Convenience helper to attach core to an input element.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCore}\n */\nexport function attach(inputEl, opts) {\n  return new TouchSpinCore(inputEl, opts);\n}\n\nexport default TouchSpinCore;\n\n// Export renderers\nexport { default as RawRenderer } from './RawRenderer.js';\nexport { default as AbstractRenderer } from './AbstractRenderer.js';\n","/**\n * Bootstrap 4 Renderer - New Architecture\n * Builds Bootstrap 4 UI elements around TouchSpin input\n * Uses input-group-prepend and input-group-append for Bootstrap 4 compatibility\n */\nimport AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n\nclass Bootstrap4Renderer extends AbstractRenderer {\n\n  init() {\n    // 1. Build and inject DOM structure around input\n    this.wrapper = this.buildInputGroup();\n    \n    // 2. Find created buttons\n    const upButton = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n    const downButton = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n    \n    // 3. Tell core to attach its event handlers\n    this.core.attachUpEvents(upButton);\n    this.core.attachDownEvents(downButton);\n    \n    // 4. Register for setting changes we care about\n    this.core.observeSetting('prefix', (newValue) => this.updatePrefix(newValue));\n    this.core.observeSetting('postfix', (newValue) => this.updatePostfix(newValue));\n    this.core.observeSetting('buttonup_class', (newValue) => this.updateButtonClass('up', newValue));\n    this.core.observeSetting('buttondown_class', (newValue) => this.updateButtonClass('down', newValue));\n  }\n\n  // teardown() uses inherited removeInjectedElements() - no override needed\n\n  buildInputGroup() {\n    // Check if input is already inside an input-group\n    const existingInputGroup = this.input.closest('.input-group');\n    \n    if (existingInputGroup) {\n      return this.buildAdvancedInputGroup(existingInputGroup);\n    } else {\n      return this.buildBasicInputGroup();\n    }\n  }\n  \n  buildBasicInputGroup() {\n    const inputGroupSize = this._detectInputGroupSize();\n    \n    const html = `\n      <div class=\"input-group ${inputGroupSize} bootstrap-touchspin\" data-touchspin-injected=\"wrapper\">\n        <div class=\"input-group-prepend\" data-touchspin-injected=\"prefix\">\n          <span class=\"input-group-text\">${this.settings.prefix || ''}</span>\n        </div>\n        <div class=\"input-group-prepend\">\n          <button tabindex=\"-1\" class=\"${this.settings.buttondown_class || 'btn btn-outline-secondary'} bootstrap-touchspin-down\" data-touchspin-injected=\"down\" type=\"button\">${this.settings.buttondown_txt || '-'}</button>\n        </div>\n        <div class=\"input-group-append\">\n          <button tabindex=\"-1\" class=\"${this.settings.buttonup_class || 'btn btn-outline-secondary'} bootstrap-touchspin-up\" data-touchspin-injected=\"up\" type=\"button\">${this.settings.buttonup_txt || '+'}</button>\n        </div>\n        <div class=\"input-group-append\" data-touchspin-injected=\"postfix\">\n          <span class=\"input-group-text\">${this.settings.postfix || ''}</span>\n        </div>\n      </div>\n    `;\n    \n    // Create wrapper and wrap the input\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = html.trim();\n    const wrapper = tempDiv.firstChild;\n    \n    // Insert wrapper and move input into it\n    this.input.parentElement.insertBefore(wrapper, this.input);\n    \n    // Find the position to insert input (after down button, before up button)\n    const upButtonWrapper = wrapper.querySelector('.input-group-append');\n    wrapper.insertBefore(this.input, upButtonWrapper);\n    \n    // Hide empty prefix/postfix\n    this.hideEmptyPrefixPostfix(wrapper);\n    \n    return wrapper;\n  }\n  \n  buildAdvancedInputGroup(existingInputGroup) {\n    // Add bootstrap-touchspin class to existing input-group\n    existingInputGroup.classList.add('bootstrap-touchspin');\n    existingInputGroup.setAttribute('data-touchspin-injected', 'wrapper-advanced');\n    \n    // Create buttons and prefix/postfix elements with Bootstrap 4 structure\n    const elementsHtml = `\n      <div class=\"input-group-prepend\" data-touchspin-injected=\"prefix\">\n        <span class=\"input-group-text\">${this.settings.prefix || ''}</span>\n      </div>\n      <div class=\"input-group-prepend\">\n        <button tabindex=\"-1\" class=\"${this.settings.buttondown_class || 'btn btn-outline-secondary'} bootstrap-touchspin-down\" data-touchspin-injected=\"down\" type=\"button\">${this.settings.buttondown_txt || '-'}</button>\n      </div>\n      <div class=\"input-group-append\">\n        <button tabindex=\"-1\" class=\"${this.settings.buttonup_class || 'btn btn-outline-secondary'} bootstrap-touchspin-up\" data-touchspin-injected=\"up\" type=\"button\">${this.settings.buttonup_txt || '+'}</button>\n      </div>\n      <div class=\"input-group-append\" data-touchspin-injected=\"postfix\">\n        <span class=\"input-group-text\">${this.settings.postfix || ''}</span>\n      </div>\n    `;\n    \n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = elementsHtml;\n    \n    // Insert prefix before the input\n    const prefixEl = tempDiv.querySelector('[data-touchspin-injected=\"prefix\"]');\n    existingInputGroup.insertBefore(prefixEl, this.input);\n    \n    // Insert down button before the input\n    const downButtonWrapper = tempDiv.querySelector('.input-group-prepend:not([data-touchspin-injected=\"prefix\"])');\n    existingInputGroup.insertBefore(downButtonWrapper, this.input);\n    \n    // Insert up button after the input\n    const upButtonWrapper = tempDiv.querySelector('.input-group-append:not([data-touchspin-injected=\"postfix\"])');\n    existingInputGroup.insertBefore(upButtonWrapper, this.input.nextSibling);\n    \n    // Insert postfix after the up button\n    const postfixEl = tempDiv.querySelector('[data-touchspin-injected=\"postfix\"]');\n    existingInputGroup.insertBefore(postfixEl, upButtonWrapper.nextSibling);\n    \n    // Hide empty prefix/postfix\n    this.hideEmptyPrefixPostfix(existingInputGroup);\n    \n    return existingInputGroup;\n  }\n\n  _detectInputGroupSize() {\n    const classList = this.input.className;\n    if (classList.includes('form-control-sm')) {\n      return 'input-group-sm';\n    } else if (classList.includes('form-control-lg')) {\n      return 'input-group-lg';\n    }\n    return '';\n  }\n\n  hideEmptyPrefixPostfix(wrapper = this.wrapper) {\n    const prefixEl = wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n    const postfixEl = wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n    \n    if (prefixEl && (!this.settings.prefix || this.settings.prefix === '')) {\n      prefixEl.remove();\n    }\n    if (postfixEl && (!this.settings.postfix || this.settings.postfix === '')) {\n      postfixEl.remove();\n    }\n  }\n\n  updatePrefix(value) {\n    let prefixEl = this.wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n    \n    if (value && value !== '') {\n      if (!prefixEl) {\n        // Re-create prefix element if it was removed\n        prefixEl = document.createElement('div');\n        prefixEl.className = 'input-group-prepend';\n        prefixEl.setAttribute('data-touchspin-injected', 'prefix');\n        prefixEl.innerHTML = `<span class=\"input-group-text\">${value}</span>`;\n        // Insert at the beginning of the wrapper\n        this.wrapper.insertBefore(prefixEl, this.wrapper.firstChild);\n      } else {\n        prefixEl.querySelector('.input-group-text').textContent = value;\n      }\n    } else if (prefixEl) {\n      // Remove element if value is empty\n      prefixEl.remove();\n    }\n  }\n  \n  updatePostfix(value) {\n    let postfixEl = this.wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n    \n    if (value && value !== '') {\n      if (!postfixEl) {\n        // Re-create postfix element if it was removed\n        postfixEl = document.createElement('div');\n        postfixEl.className = 'input-group-append';\n        postfixEl.setAttribute('data-touchspin-injected', 'postfix');\n        postfixEl.innerHTML = `<span class=\"input-group-text\">${value}</span>`;\n        // Insert at the end of the wrapper\n        this.wrapper.appendChild(postfixEl);\n      } else {\n        postfixEl.querySelector('.input-group-text').textContent = value;\n      }\n    } else if (postfixEl) {\n      // Remove element if value is empty\n      postfixEl.remove();\n    }\n  }\n  \n  updateButtonClass(type, className) {\n    const button = this.wrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n    if (button) {\n      button.className = `${className || 'btn btn-outline-secondary'} bootstrap-touchspin-${type}`;\n    }\n  }\n}\n\nexport default Bootstrap4Renderer;","// @ts-check\nimport { TouchSpin, getTouchSpin, CORE_EVENTS } from '../../core/src/index.js';\n\n/**\n * Install a minimal jQuery plugin wrapper that just forwards everything to core.\n * Contains NO logic - only forwards commands and events.\n * Core manages its own instance lifecycle on the input element.\n * @param {import('jquery').JQueryStatic} $\n */\nexport function installJqueryTouchSpin($) {\n  $.fn.TouchSpin = function(options, arg) {\n    // Command API - forward to core (core manages instance lifecycle)\n    if (typeof options === 'string') {\n      const cmd = String(options).toLowerCase();\n      let ret;\n      this.each(function() {\n        const inputEl = /** @type {HTMLInputElement} */ (this);\n        const api = getTouchSpin(inputEl);\n        \n        // Handle get/getvalue specially - fall back to raw input value if no instance\n        if ((cmd === 'getvalue' || cmd === 'get') && ret === undefined) {\n          if (api) {\n            ret = api.getValue();\n          } else {\n            // No TouchSpin instance - return raw input value\n            ret = inputEl.value;\n          }\n          return; // Skip other commands if no instance\n        }\n        \n        if (!api) return; // No instance exists - other commands ignored\n        \n        switch (cmd) {\n          case 'destroy': api.destroy(); break; // Core removes instance from element\n          case 'uponce': api.upOnce(); break;\n          case 'downonce': api.downOnce(); break;\n          case 'startupspin': api.startUpSpin(); break;\n          case 'startdownspin': api.startDownSpin(); break;\n          case 'stopspin': api.stopSpin(); break;\n          case 'updatesettings': api.updateSettings(arg || {}); break;\n          case 'setvalue': case 'set': api.setValue(arg); break;\n        }\n      });\n      return ret === undefined ? this : ret;\n    }\n\n    // Initialize - forward to core\n    return this.each(function() {\n      const $input = $(this);\n      const inputEl = /** @type {HTMLInputElement} */ (this);\n      \n      // Create TouchSpin instance (core handles everything including storage on element)\n      const inst = TouchSpin(inputEl, options || {});\n\n      // Bridge core events to jQuery events (minimal event forwarding only)\n      const evMap = {\n        [CORE_EVENTS.MIN]: 'touchspin.on.min',\n        [CORE_EVENTS.MAX]: 'touchspin.on.max',\n        [CORE_EVENTS.START_SPIN]: 'touchspin.on.startspin',\n        [CORE_EVENTS.START_UP]: 'touchspin.on.startupspin',\n        [CORE_EVENTS.START_DOWN]: 'touchspin.on.startdownspin',\n        [CORE_EVENTS.STOP_SPIN]: 'touchspin.on.stopspin',\n        [CORE_EVENTS.STOP_UP]: 'touchspin.on.stopupspin',\n        [CORE_EVENTS.STOP_DOWN]: 'touchspin.on.stopdownspin',\n      };\n      \n      // Store unsubscribe functions for cleanup\n      const unsubs = [];\n      Object.keys(evMap).forEach(k => {\n        // @ts-ignore\n        unsubs.push(inst.on(k, () => $input.trigger(evMap[k])));\n      });\n\n      // Define jQuery teardown function that cleans up jQuery-specific resources\n      const jqueryTeardown = () => {\n        // Clean up event subscriptions to core\n        unsubs.forEach(unsub => {\n          try { unsub(); } catch {} \n        });\n        // Clean up jQuery events\n        $input.off('touchspin.uponce touchspin.downonce touchspin.startupspin touchspin.startdownspin touchspin.stopspin touchspin.updatesettings touchspin.destroy');\n      };\n\n      // Register teardown with core so it's called on core destroy too\n      inst.registerTeardown(jqueryTeardown);\n\n      // Callable events - forward to core (core manages lifecycle)\n      $input.on('touchspin.uponce', () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.upOnce();\n      });\n      $input.on('touchspin.downonce', () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.downOnce();\n      });\n      $input.on('touchspin.startupspin', () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.startUpSpin();\n      });\n      $input.on('touchspin.startdownspin', () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.startDownSpin();\n      });\n      $input.on('touchspin.stopspin', () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.stopSpin();\n      });\n      $input.on('touchspin.updatesettings', (e, o) => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.updateSettings(o || {});\n      });\n      $input.on('touchspin.destroy', () => {\n        // Forward destroy to core (core will call registered teardown callbacks)\n        const api = getTouchSpin(inputEl);\n        if (api) api.destroy();\n      });\n    });\n  };\n}","// jQuery Bootstrap 4 build entry point\nimport { TouchSpinCore, getTouchSpin } from '../../packages/core/src/index.js';\nimport Bootstrap4Renderer from '../../packages/renderers/bootstrap4/src/Bootstrap4Renderer.js';\nimport { installJqueryTouchSpin } from '../../packages/jquery-plugin/src/index.js';\n\n// Wrapper function for standalone use (when jQuery is not available)\nfunction TouchSpin(element, options = {}) {\n  if (!(element instanceof Element)) {\n    throw new TypeError('TouchSpin expects an HTMLElement');\n  }\n  \n  // Set the baked-in renderer for this build\n  options.renderer = options.renderer || Bootstrap4Renderer;\n  \n  // Use core directly\n  if (element._touchSpinCore) {\n    element._touchSpinCore.destroy();\n  }\n  \n  const core = new TouchSpinCore(element, options);\n  element._touchSpinCore = core;\n  core.initDOMEventHandling();\n  \n  return core.toPublicApi();\n}\n\n// Install jQuery plugin if jQuery is available\nif (typeof window !== 'undefined' && window.jQuery) {\n  installJqueryTouchSpin(window.jQuery);\n}\n\n// For jQuery builds, ensure globals are properly exposed for direct access\nif (typeof window !== 'undefined') {\n  window.TouchSpin = TouchSpin;\n  window.TouchSpinCore = TouchSpinCore;\n  window.getTouchSpin = getTouchSpin;\n  window.Bootstrap4Renderer = Bootstrap4Renderer;\n  window.installJqueryTouchSpin = installJqueryTouchSpin;\n}\n\n// Export for module systems only (no default export)\nexport { TouchSpin, TouchSpinCore, getTouchSpin, Bootstrap4Renderer, installJqueryTouchSpin };"],"names":["AbstractRenderer","_createClass","inputEl","settings","core","_classCallCheck","this","input","wrapper","$","originalinput","container","elements","key","value","Error","removeInjectedElements","_this","querySelectorAll","forEach","el","remove","hasAttribute","parentElement","getAttribute","classList","removeAttribute","insertBefore","document","_this$input$parentEle","contains","parentelement","downButtons","_findElements","upButtons","length","verticalContainer","parent","attr","down","up","prefix","addClass","prefix_extraclass","postfix","postfix_extraclass","role","concat","detached","_detached_prefix","detach","_detached_postfix","newsettings","inputTestId","RawRenderer","_AbstractRenderer","_callSuper","arguments","_inherits","DEFAULTS","min","max","firstclickvalueifempty","step","decimals","forcestepdivisibility","stepinterval","stepintervaldelay","booster","boostat","maxboostedstep","callback_before_calculation","v","callback_after_calculation","INSTANCE_KEY","TouchSpinCore","opts","undefined","nodeName","Object","assign","renderer","console","warn","spinning","spincount","direction","_events","Map","_teardownCallbacks","_settingObservers","_spinDelayTimeout","_spinIntervalTimer","_upButton","_downButton","_wrapper","_handleUpMouseDown","bind","_handleDownMouseDown","_handleMouseUp","_handleInputChange","_handleKeyDown","_handleKeyUp","_handleWheel","_initializeInput","init","_updateAriaAttributes","_checkValue","disabled","getValue","next","_nextValue","prevNum","_setDisplay","isFinite","emit","stopSpin","_startSpin","_clearSpinTimers","oldSettings","_objectSpread","newSettings","Number","_alignToStep","keys","observers","get","callback","error","raw","NaN","before","num","parseFloat","String","isNaN","parsed","adjusted","_applyConstraints","_findDOMElements","_attachDOMEventListeners","_this2","push","index","indexOf","splice","teardown","_detachDOMEventListeners","clear","upOnce","downOnce","startUpSpin","startDownSpin","updateSettings","setValue","destroy","on","off","initDOMEventHandling","registerTeardown","attachUpEvents","attachDownEvents","observeSetting","element","addEventListener","passive","settingName","has","set","Set","add","delete","event","handler","_this3","size","detail","_i","_arr","_toConsumableArray","fn","_","dir","_this4","delay","interval","setTimeout","setInterval","_spinStep","clearTimeout","_unused","clearInterval","_unused2","current","_valueIfIsNaN","base","Math","parseInt","stepUnclamped","pow","floor","mbs","round","aligned","_forcestepdivisibility","clamped","boosted","cap","val","out","mode","dec","ceil","toFixed","k","s","V","S","r","mayTriggerChange","_this$input$value","prev","_formatDisplay","dispatchEvent","Event","bubbles","setAttribute","removeEventListener","e","preventDefault","activeElement","deltaY","getTouchSpin","toPublicApi","CORE_EVENTS","freeze","MIN","MAX","START_SPIN","START_UP","START_DOWN","STOP_SPIN","STOP_UP","STOP_DOWN","Bootstrap4Renderer","buildInputGroup","upButton","querySelector","downButton","newValue","updatePrefix","updatePostfix","updateButtonClass","existingInputGroup","closest","buildAdvancedInputGroup","buildBasicInputGroup","inputGroupSize","_detectInputGroupSize","html","buttondown_class","buttondown_txt","buttonup_class","buttonup_txt","tempDiv","createElement","innerHTML","trim","firstChild","upButtonWrapper","hideEmptyPrefixPostfix","elementsHtml","prefixEl","downButtonWrapper","nextSibling","postfixEl","className","includes","textContent","appendChild","type","button","installJqueryTouchSpin","TouchSpin","options","arg","ret","cmd","toLowerCase","each","api","$input","inst","evMap","_defineProperty","unsubs","trigger","unsub","o","Element","TypeError","_touchSpinCore","window","jQuery"],"mappings":"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"}