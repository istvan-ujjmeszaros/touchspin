{"version":3,"file":"jquery.bootstrap-touchspin-bs4.js","sources":["../src/jquery.bootstrap-touchspin.js"],"sourcesContent":["// @ts-check\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = function (root, jQuery) {\n      if (jQuery === undefined) {\n        if (typeof window !== 'undefined') {\n          jQuery = require('jquery');\n        } else {\n          jQuery = require('jquery')(root);\n        }\n      }\n      factory(jQuery);\n      return jQuery;\n    };\n  } else {\n    factory(jQuery);\n  }\n}(function ($) {\n  'use strict';\n\n  /**\n   * @fileoverview Bootstrap TouchSpin — mobile-friendly numeric input spinner.\n   * @typedef {import('jquery').JQuery} JQuery\n   * @typedef {import('jquery').JQueryStatic} JQueryStatic\n   * @requires jQuery\n   */\n\n  // Include renderer classes\n  // These will be included during build process or loaded separately\n\n  /**\n   * How to handle step divisibility.\n   * @typedef {'none'|'floor'|'round'|'ceil'} ForceStepDivisibility\n   */\n\n  /**\n   * TouchSpin calculation callback.\n   * @callback TouchSpinCalcCallback\n   * @param {string} value Raw input value (string from the <input>).\n   * @returns {string} Processed value to use/display.\n   */\n\n  /**\n   * Renderer instance interface (built for the active Bootstrap flavor).\n   * @typedef {Object} TouchSpinRenderer\n   * @property {function(): JQuery} buildInputGroup\n   * @property {function(JQuery): JQuery} buildAdvancedInputGroup\n   * @property {function(JQuery): TouchSpinElements} initElements\n   * @property {function(): { _detached_prefix: JQuery|null, _detached_postfix: JQuery|null }} hideEmptyPrefixPostfix\n   * @property {function(Partial<TouchSpinOptions>, { _detached_prefix: JQuery|null, _detached_postfix: JQuery|null }): void} updatePrefixPostfix\n   */\n\n  /**\n   * Renderer factory (global).\n   * @typedef {Object} RendererFactoryType\n   * @property {function(JQueryStatic, TouchSpinOptions, JQuery): TouchSpinRenderer} createRenderer\n   */\n\n  /**\n   * Elements returned by renderer.initElements(container)\n   * @typedef {Object} TouchSpinElements\n   * @property {JQuery<HTMLInputElement>} input\n   * @property {JQuery<HTMLButtonElement>} up\n   * @property {JQuery<HTMLButtonElement>} down\n   */\n\n  /**\n   * @typedef TouchSpinOptions\n   * @property {number|null} [min=0] - Minimum allowed value (null for no minimum)\n   * @property {number|null} [max=100] - Maximum allowed value (null for no maximum)\n   * @property {string} [initval=''] - Initial value if input is empty\n   * @property {string} [replacementval=''] - Value to show when input is empty\n   * @property {number|null} [firstclickvalueifempty=null] - Value to set on first click if input is empty\n   * @property {number} [step=1] - Step increment/decrement amount\n   * @property {number} [decimals=0] - Number of decimal places to display\n   * @property {number} [stepinterval=100] - Milliseconds between steps when holding button\n   * @property {ForceStepDivisibility} [forcestepdivisibility='round'] - How to handle step divisibility\n   * @property {number} [stepintervaldelay=500] - Delay in milliseconds before step interval begins\n   * @property {boolean} [verticalbuttons=false] - Whether to display buttons vertically\n   * @property {string} [verticalup='&plus;'] - HTML content for vertical up button\n   * @property {string} [verticaldown='&minus;'] - HTML content for vertical down button\n   * @property {string} [verticalupclass=null] - CSS classes for vertical up button (framework-specific, provided by renderer)\n   * @property {string} [verticaldownclass=null] - CSS classes for vertical down button (framework-specific, provided by renderer)\n   * @property {string} [prefix=''] - Text or HTML to display before the input\n   * @property {string} [postfix=''] - Text or HTML to display after the input\n   * @property {string} [prefix_extraclass=''] - Additional CSS classes for prefix element\n   * @property {string} [postfix_extraclass=''] - Additional CSS classes for postfix element\n   * @property {boolean} [booster=true] - Enable accelerated value changes for rapid input\n   * @property {number} [boostat=10] - Number of steps before booster mode activates\n   * @property {number|false} [maxboostedstep=false] - Maximum step size during boost mode\n   * @property {boolean} [mousewheel=true] - Enable mouse wheel support for value changes\n   * @property {string} [buttondown_class=null] - CSS classes for decrement button (framework-specific, provided by renderer)\n   * @property {string} [buttonup_class=null] - CSS classes for increment button (framework-specific, provided by renderer)\n   * @property {string} [buttondown_txt='&minus;'] - HTML content for decrement button\n   * @property {string} [buttonup_txt='&plus;'] - HTML content for increment button\n   * @property {TouchSpinRenderer|null} [renderer=null] - Custom renderer instance for Bootstrap version compatibility\n   * @property {TouchSpinCalcCallback} [callback_before_calculation] - Function called before value calculation\n   * @property {TouchSpinCalcCallback} [callback_after_calculation] - Function called after value calculation\n   */\n\n  /**\n   * Fired when minimum value is reached.\n   * @event touchspin.on.min\n   */\n\n  /**\n   * Fired when maximum value is reached.\n   * @event touchspin.on.max\n   */\n\n  /**\n   * Fired when spinning starts (any direction).\n   * @event touchspin.on.startspin\n   */\n\n  /**\n   * Fired when spinning stops (any direction).\n   * @event touchspin.on.stopspin\n   */\n\n  /** @event touchspin.on.startupspin */\n  /** @event touchspin.on.startdownspin */\n  /** @event touchspin.on.stopupspin */\n  /** @event touchspin.on.stopdownspin */\n\n\n  /**\n   * jQuery TouchSpin plugin for creating mobile-friendly numeric input spinners.\n   * @function TouchSpin\n   * @memberof jQuery.fn\n   * @this {JQuery<HTMLInputElement>} jQuery collection of <input> elements\n   * @param {TouchSpinOptions=} options\n   * @returns {JQuery<HTMLInputElement>} The original jQuery collection (chainable).\n   * @fires touchspin.on.min\n   * @fires touchspin.on.max\n   * @fires touchspin.on.startspin\n   * @fires touchspin.on.stopspin\n   * @fires touchspin.on.startupspin\n   * @fires touchspin.on.startdownspin\n   * @fires touchspin.on.stopupspin\n   * @fires touchspin.on.stopdownspin\n   * @throws {Error} If a renderer factory cannot be found or a renderer cannot be created.\n   * @example\n   * // Basic usage\n   * $('#myinput').TouchSpin();\n   *\n   * @example\n   * // With configuration\n   * $('#myinput').TouchSpin({\n   *   min: 0,\n   *   max: 100,\n   *   step: 5,\n   *   prefix: '$',\n   *   postfix: '.00'\n   * });\n   *\n   * @example\n   * // Event handling\n   * $('#myinput').on('touchspin.on.min', function() {\n   *   console.log('Minimum value reached');\n   * });\n   *\n   */\n  $.fn.TouchSpin = function (options, arg) {\n\n    /** @type {TouchSpinOptions} */\n    var defaults = {\n      min: 0, // If null, there is no minimum enforced\n      max: 100, // If null, there is no maximum enforced\n      initval: '',\n      replacementval: '',\n      firstclickvalueifempty: null,\n      step: 1,\n      decimals: 0,\n      stepinterval: 100,\n      forcestepdivisibility: 'round', // none | floor | round | ceil\n      stepintervaldelay: 500,\n      verticalbuttons: false,\n      verticalup: '&plus;',\n      verticaldown: '&minus;',\n      verticalupclass: null,   // Framework-specific, will be provided by renderer\n      verticaldownclass: null, // Framework-specific, will be provided by renderer\n      prefix: '',\n      postfix: '',\n      prefix_extraclass: '',\n      postfix_extraclass: '',\n      booster: true,\n      boostat: 10,\n      maxboostedstep: false,\n      mousewheel: true,\n      buttondown_class: null,  // Framework-specific, will be provided by renderer\n      buttonup_class: null,    // Framework-specific, will be provided by renderer\n      buttondown_txt: '&minus;',\n      buttonup_txt: '&plus;',\n      // Renderer system options\n      renderer: null, // Custom renderer instance\n      /** @type {TouchSpinCalcCallback} */\n      callback_before_calculation: function (value) {\n        return value;\n      },\n      /** @type {TouchSpinCalcCallback} */\n      callback_after_calculation: function (value) {\n        return value;\n      }\n    };\n\n    /**\n     * Maps TouchSpin option names to data attribute names.\n     * Example: data-bts-step-interval=\"100\" → stepinterval: 100\n     * @type {Record<string,string>}\n     * @private\n     */\n    var attributeMap = {\n      min: 'min',\n      max: 'max',\n      initval: 'init-val',\n      replacementval: 'replacement-val',\n      firstclickvalueifempty: 'first-click-value-if-empty',\n      step: 'step',\n      decimals: 'decimals',\n      stepinterval: 'step-interval',\n      verticalbuttons: 'vertical-buttons',\n      verticalupclass: 'vertical-up-class',\n      verticaldownclass: 'vertical-down-class',\n      forcestepdivisibility: 'force-step-divisibility',\n      stepintervaldelay: 'step-interval-delay',\n      prefix: 'prefix',\n      postfix: 'postfix',\n      prefix_extraclass: 'prefix-extra-class',\n      postfix_extraclass: 'postfix-extra-class',\n      booster: 'booster',\n      boostat: 'boostat',\n      maxboostedstep: 'max-boosted-step',\n      mousewheel: 'mouse-wheel',\n      buttondown_class: 'button-down-class',\n      buttonup_class: 'button-up-class',\n      buttondown_txt: 'button-down-txt',\n      buttonup_txt: 'button-up-txt'\n    };\n\n    // Command API: allow calling internal methods directly\n    if (typeof options === 'string') {\n      var cmd = String(options).toLowerCase();\n      var ret;\n      this.each(function () {\n        var $el = $(this);\n        var api = $el.data('touchspinInternal');\n        if (!api) return; // not initialized\n        switch (cmd) {\n          case 'destroy':\n            api.destroy();\n            break;\n          case 'uponce':\n            api.upOnce();\n            break;\n          case 'downonce':\n            api.downOnce();\n            break;\n          case 'startupspin':\n            api.startUpSpin();\n            break;\n          case 'startdownspin':\n            api.startDownSpin();\n            break;\n          case 'stopspin':\n            api.stopSpin();\n            break;\n          case 'updatesettings':\n            api.updateSettings(arg || {});\n            break;\n          case 'getvalue':\n          case 'get':\n            if (ret === undefined) ret = api.getValue();\n            break;\n          case 'setvalue':\n          case 'set':\n            api.setValue(arg);\n            break;\n        }\n      });\n      return ret === undefined ? this : ret;\n    }\n\n    return this.each(function () {\n\n      /** @type {TouchSpinOptions} Final merged settings */\n      var settings,\n        /** @type {JQuery<HTMLInputElement>} Original input element */\n        originalinput = $(this),\n        /** @type {Record<string, any>} Data attributes from original input */\n        originalinput_data = originalinput.data(),\n        /** @type {JQuery|null} Detached prefix element */\n        _detached_prefix,\n        /** @type {JQuery|null} Detached postfix element */\n        _detached_postfix,\n        /** @type {JQuery} TouchSpin container element */\n        container,\n        /** @type {TouchSpinElements} TouchSpin DOM elements */\n        elements,\n        /** @type {TouchSpinRenderer|undefined} Bootstrap version-specific renderer */\n        renderer,\n        /** @type {number} Current numeric value */\n        value,\n        /** @type {ReturnType<typeof setInterval>|undefined} */ downSpinTimer,\n        /** @type {ReturnType<typeof setInterval>|undefined} */ upSpinTimer,\n        /** @type {ReturnType<typeof setTimeout>|undefined} */ downDelayTimeout,\n        /** @type {ReturnType<typeof setTimeout>|undefined} */ upDelayTimeout,\n        /** @type {number} Current spin count for booster calculation */\n        spincount = 0,\n        /** @type {false|'up'|'down'} Current spinning direction */\n        spinning = false,\n        /** @type {MutationObserver|undefined} MutationObserver for attribute changes */\n        mutationObserver,\n        /** @type {Array<[Element,string,EventListenerOrEventListenerObject,any]>} */\n        _nativeListeners = [],\n        /** @type {HTMLInputElement} */\n        inputEl,\n        /** @type {HTMLElement|undefined} */\n        containerEl,\n        /** @type {HTMLElement|undefined} */\n        upEl,\n        /** @type {HTMLElement|undefined} */\n        downEl;\n\n      init();\n\n      /**\n       * Initializes the TouchSpin plugin for a single input element.\n       * @private\n       */\n      function init() {\n        if (originalinput.data('alreadyinitialized')) {\n          // If already initialized, destroy current instance and reinitialize with new settings\n          originalinput.trigger('touchspin.destroy');\n          // Continue with normal initialization after destroy\n        }\n\n        originalinput.data('alreadyinitialized', true);\n\n        if (!originalinput.is('input')) {\n          console.log('Must be an input.');\n          return;\n        }\n\n        // Cache DOM element reference\n        inputEl = /** @type {HTMLInputElement} */ (originalinput[0]);\n\n        _initSettings();\n        _initRenderer();\n        _setInitval();\n        _checkValue();\n        _buildHtml();\n        _initElements();\n        _initAriaAttributes();\n        _updateButtonDisabledState();\n        _hideEmptyPrefixPostfix();\n        _syncNativeAttributes();\n        _setupMutationObservers();\n        _bindEvents();\n        _bindEventsInterface();\n\n        // Expose internal instance methods for facades/wrappers\n        originalinput.data('touchspinInternal', {\n          upOnce: upOnce,\n          downOnce: downOnce,\n          startUpSpin: startUpSpin,\n          startDownSpin: startDownSpin,\n          stopSpin: stopSpin,\n          updateSettings: changeSettings,\n          destroy: function() { _destroy(); },\n          getValue: function() {\n            var raw = String(inputEl.value ?? '');\n            if (raw === '') return NaN;\n            var num = parseFloat(settings.callback_before_calculation(raw));\n            return isFinite(num) ? num : NaN;\n          },\n          setValue: function(v) {\n            if (originalinput.is(':disabled,[readonly]')) return;\n            stopSpin();\n            var parsed = Number(v);\n            if (!isFinite(parsed)) return;\n            // Apply step divisibility first, then clamp to bounds (mirrors _checkValue)\n            var adjusted = parseFloat(_forcestepdivisibility(parsed));\n            if ((settings.min !== null) && (adjusted < settings.min)) {\n              adjusted = settings.min;\n            }\n            if ((settings.max !== null) && (adjusted > settings.max)) {\n              adjusted = settings.max;\n            }\n            var prev = String(inputEl.value ?? '');\n            var next = _setDisplay(adjusted);\n            if (prev !== next) {\n              originalinput.trigger('change');\n            }\n          }\n        });\n      }\n\n      /**\n       * Sets the initial value from settings if input is empty.\n       * @private\n       */\n      function _setInitval() {\n        if (settings.initval !== '' && inputEl.value === '') {\n          inputEl.value = settings.initval;\n        }\n      }\n\n      /**\n       * Updates TouchSpin settings and applies changes.\n       * @private\n       * @param {Partial<TouchSpinOptions>} newsettings - New settings to apply\n       */\n      function changeSettings(newsettings) {\n        _updateSettings(newsettings);\n        _checkValue(true);\n\n        /** @type {string} */\n        var raw = String(inputEl.value ?? '');\n\n        if (raw !== '') {\n          var num = parseFloat(settings.callback_before_calculation(raw));\n          if (isFinite(num)) {\n            _setDisplay(num);\n          }\n        }\n      }\n\n      /**\n       * Computes the next numeric value in a given direction without touching the DOM.\n       * Pure calculation using current settings and spin state.\n       * @private\n       * @param {'up'|'down'} dir\n       * @param {number} current\n       * @returns {number} next numeric value (clamped to min/max)\n       */\n      function _nextValue(dir, current) {\n        var v = current;\n        if (isNaN(v)) {\n          v = valueIfIsNaN();\n        } else {\n          var step = _getBoostedStep();\n          v = dir === 'up' ? (v + step) : (v - step);\n        }\n        if ((settings.max !== null) && (v >= settings.max)) {\n          v = settings.max;\n        }\n        if ((settings.min !== null) && (v <= settings.min)) {\n          v = settings.min;\n        }\n        return v;\n      }\n\n      /**\n       * Formats a numeric value for display using decimals and callbacks.\n       * @private\n       * @param {number} num\n       * @returns {string}\n       */\nfunction _formatDisplay(num) {\n  return settings.callback_after_calculation(parseFloat(num).toFixed(settings.decimals));\n}\n\n      /**\n       * Applies a numeric value to the input's display and updates ARIA.\n       * Caller remains responsible for emitting change events if needed.\n       * @private\n       * @param {number} num\n       * @returns {string} the display string written to the input\n       */\n      function _setDisplay(num) {\n        var next = _formatDisplay(num);\n        if (inputEl) {\n          inputEl.value = next;\n        } else {\n          originalinput.val(next);\n        }\n        _updateAriaAttributes();\n        return next;\n      }\n\n      /**\n       * Aligns a value to step boundaries using integer arithmetic to avoid float issues.\n       * @private\n       * @param {number|null} val - Value to align\n       * @param {number} step - Step size\n       * @param {string} dir - Direction: 'up' or 'down'\n       * @returns {number|null} Aligned value\n       */\n      function _alignToStep(val, step, dir) {\n        if (val == null) return val;\n        // scale to integers to avoid float mod issues\n        var k = 1, s = step;\n        while ((s * k) % 1 !== 0 && k < 1e6) k *= 10;\n        var V = Math.round(val * k), S = Math.round(step * k);\n        if (S === 0) return val;\n        var r = V % S;\n        if (r === 0) return val;\n        return ((dir === 'down' ? (V - r) : (V + (S - r))) / k);\n      }\n\n      /**\n       * Initializes settings by merging defaults, data attributes, and options.\n       * @private\n       */\n      function _initSettings() {\n        settings = Object.assign({}, defaults, originalinput_data, _parseAttributes(), options);\n\n        // Normalize step (guard against \"any\", 0, negatives, NaN)\n        var stepNum = Number(settings.step);\n        if (!isFinite(stepNum) || stepNum <= 0) settings.step = 1;\n\n        // Normalize min/max to numbers for consistency (null/undefined preserved)\n        if (settings.min != null) {\n          var minNum = Number(settings.min);\n          settings.min = isFinite(minNum) ? minNum : null;\n        }\n        if (settings.max != null) {\n          var maxNum = Number(settings.max);\n          settings.max = isFinite(maxNum) ? maxNum : null;\n        }\n\n        // Normalize decimals (ensure non-negative integer)\n        var dec = parseInt(String(settings.decimals), 10);\n        settings.decimals = isFinite(dec) && dec >= 0 ? dec : 0;\n\n        // Normalize timing and boost options\n        settings.stepinterval = Math.max(0, parseInt(String(settings.stepinterval), 10) || 0);\n        settings.stepintervaldelay = Math.max(0, parseInt(String(settings.stepintervaldelay), 10) || 0);\n        settings.boostat = Math.max(1, parseInt(String(settings.boostat), 10) || 10);\n        if (settings.maxboostedstep !== false) {\n          var mbs = Number(settings.maxboostedstep);\n          settings.maxboostedstep = isFinite(mbs) && mbs > 0 ? mbs : false;\n        }\n\n        if (parseFloat(settings.step) !== 1) {\n          settings.max = _alignToStep(settings.max, settings.step, 'down');\n          settings.min = _alignToStep(settings.min, settings.step, 'up');\n        }\n      }\n\n      /**\n       * Parses data attributes and native input attributes into settings.\n       * @private\n       * @returns {Partial<TouchSpinOptions>} Parsed attribute values\n       */\n      function _parseAttributes() {\n        var data = {};\n\n        // Setting up based on data attributes\n        $.each(attributeMap, function (key, value) {\n          var attrName = 'bts-' + value;\n\n          if (originalinput.is('[data-' + attrName + ']')) {\n            data[key] = originalinput.data(attrName);\n          }\n        });\n\n        // Setting up based on input attributes if specified (input attributes have precedence)\n        $.each(['min', 'max', 'step'], function (i, key) {\n          if (originalinput.is('['+key+']')) {\n            if (data[key] !== undefined) {\n              console.warn('Both the \"data-bts-' + key + '\" data attribute and the \"' + key + '\" individual attribute were specified, the individual attribute will take precedence on: ', originalinput);\n            }\n            data[key] = originalinput.attr(key);\n          }\n        });\n\n        return data;\n      }\n\n      /**\n       * Initializes the Bootstrap version-specific renderer.\n       * @private\n       * @throws {Error} If renderer factory is unavailable or renderer creation fails\n       */\n      function _initRenderer() {\n        // Initialize the Bootstrap version-specific renderer\n        if (settings.renderer) {\n          // Use custom renderer if provided\n          renderer = settings.renderer;\n          return;\n        }\n\n        // Check for RendererFactory availability\n        const rf = /** @type {any} */ (typeof globalThis !== 'undefined' ? globalThis : {});\n        /** @type {RendererFactoryType|undefined} */\n        const factory = rf && rf.RendererFactory && typeof rf.RendererFactory.createRenderer === 'function' ? rf.RendererFactory : undefined;\n\n        if (!factory || !factory.createRenderer) {\n          throw new Error('Bootstrap TouchSpin: RendererFactory not available. This indicates a build system error. Please ensure the renderer files are properly built and included.');\n        }\n\n        // Create temporary renderer to get framework-specific defaults\n        const tempRenderer = factory.createRenderer($, {}, originalinput);\n        if (tempRenderer && typeof tempRenderer.getDefaultSettings === 'function') {\n          const rendererDefaults = tempRenderer.getDefaultSettings();\n\n          // Only apply renderer defaults for null values (framework-agnostic placeholders)\n          // This preserves user customizations while filling in framework-specific defaults\n          Object.keys(rendererDefaults).forEach(key => {\n            if (settings[key] === null) {\n              // Fill in framework-specific default for null placeholder\n              settings[key] = rendererDefaults[key];\n            }\n          });\n        }\n\n        renderer = factory.createRenderer($, settings, originalinput);\n\n        if (!renderer) {\n          throw new Error('Bootstrap TouchSpin: Failed to create renderer');\n        }\n      }\n\n      /**\n       * Destroys the TouchSpin instance and restores original input.\n       * @private\n       */\n      function _destroy() {\n        var $parent = originalinput.parent();\n\n        stopSpin();\n\n        // Remove all plugin handlers bound on the input\n        originalinput.off('keydown.touchspin keyup.touchspin mousewheel.touchspin DOMMouseScroll.touchspin wheel.touchspin touchspin.destroy touchspin.uponce touchspin.downonce touchspin.startupspin touchspin.startdownspin touchspin.stopspin touchspin.updatesettings');\n\n        // Clean up container event handlers\n        if (container) {\n          container.off('.touchspin');\n        }\n\n        // Remove native listeners bound by this instance\n        _offAllNative();\n\n        // Disconnect MutationObserver\n        if (mutationObserver) {\n          mutationObserver.disconnect();\n          mutationObserver = undefined;\n        }\n\n        // Teardown logic differs for injected vs existing wrappers\n        const injectedMarker = $parent.attr('data-touchspin-injected');\n\n        if (injectedMarker === 'wrapper') {\n          // Injected wrapper: remove only plugin-injected siblings, then unwrap\n          originalinput.siblings('[data-touchspin-injected]').remove();\n          originalinput.unwrap();\n        } else {\n          // Existing container or non-wrapper: remove injected elements, keep container\n          $('[data-touchspin-injected]', $parent).remove();\n          $parent.removeClass('bootstrap-touchspin');\n          $parent.removeAttr('data-touchspin-injected');\n        }\n\n        originalinput.data('alreadyinitialized', false);\n        // Cleanup internal facade reference\n        originalinput.removeData('touchspinInternal');\n      }\n\n      /**\n       * Updates internal settings and synchronizes with DOM.\n       * @private\n       * @param {Partial<TouchSpinOptions>} newsettings - Settings to update\n       */\n      function _updateSettings(newsettings) {\n        settings = Object.assign({}, settings, newsettings);\n\n        // Re-align bounds to step if any of these changed\n        if (\n          (newsettings.step !== undefined ||\n           newsettings.min  !== undefined ||\n           newsettings.max  !== undefined) &&\n          parseFloat(settings.step) !== 1\n        ) {\n          settings.max = _alignToStep(settings.max, settings.step, 'down');\n          settings.min = _alignToStep(settings.min, settings.step, 'up');\n        }\n\n        // Update postfix and prefix texts if those settings were changed.\n        if ('postfix' in newsettings || 'prefix' in newsettings) {\n          if (!renderer) {\n            throw new Error('Bootstrap TouchSpin: Renderer not available for updating prefix/postfix.');\n          }\n          renderer.updatePrefixPostfix(newsettings, {\n            _detached_prefix: _detached_prefix,\n            _detached_postfix: _detached_postfix\n          });\n        }\n\n        // Update button text if those settings were changed\n        if ('buttonup_txt' in newsettings || 'buttondown_txt' in newsettings || 'verticalup' in newsettings || 'verticaldown' in newsettings) {\n          if (newsettings.buttonup_txt !== undefined && elements.up) {\n            elements.up.html(newsettings.buttonup_txt);\n          }\n          if (newsettings.buttondown_txt !== undefined && elements.down) {\n            elements.down.html(newsettings.buttondown_txt);\n          }\n          if (newsettings.verticalup !== undefined && elements.up) {\n            elements.up.html(newsettings.verticalup);\n          }\n          if (newsettings.verticaldown !== undefined && elements.down) {\n            elements.down.html(newsettings.verticaldown);\n          }\n        }\n\n        // Sync native attributes when TouchSpin settings change\n        if (newsettings.min !== undefined || newsettings.max !== undefined || newsettings.step !== undefined) {\n          _syncNativeAttributes();\n          _updateAriaAttributes();\n        }\n\n        _hideEmptyPrefixPostfix();\n      }\n\n      /**\n       * Builds the HTML structure for TouchSpin using the renderer system.\n       * @private\n       */\n      function _buildHtml() {\n        var initval = inputEl.value,\n          parentelement = originalinput.parent();\n\n        if (initval !== '') {\n          var raw = settings.callback_before_calculation(initval);\n          var num = parseFloat(raw);\n          initval = isFinite(num)\n            ? settings.callback_after_calculation(num.toFixed(settings.decimals))\n            : settings.callback_after_calculation(raw);\n        }\n\n        originalinput.data('initvalue', initval).val(initval);\n        originalinput.addClass('form-control');\n\n        // Use the renderer system - should always be available\n        if (!renderer) {\n          throw new Error('Bootstrap TouchSpin: Renderer not initialized. This indicates an initialization error.');\n        }\n\n        if (parentelement.hasClass('input-group')) {\n          container = renderer.buildAdvancedInputGroup(parentelement);\n        } else {\n          container = renderer.buildInputGroup();\n        }\n      }\n\n\n\n\n      /**\n       * Initializes TouchSpin DOM elements using the renderer.\n       * @private\n       */\n      function _initElements() {\n        if (!renderer) {\n          throw new Error('Bootstrap TouchSpin: Renderer not available for element initialization.');\n        }\n        elements = renderer.initElements(container);\n        // Cache element handles\n        containerEl = container && container[0];\n        upEl = elements && elements.up && elements.up[0];\n        downEl = elements && elements.down && elements.down[0];\n      }\n\n      /**\n       * Initializes ARIA attributes for accessibility.\n       * @private\n       */\n      function _initAriaAttributes() {\n        // Set ARIA attributes on the input for screen readers\n        if (!inputEl.getAttribute('role')) {\n          inputEl.setAttribute('role', 'spinbutton');\n        }\n\n        // Set aria-valuemin and aria-valuemax if they exist\n        if (settings.min !== null && settings.min !== undefined) {\n          inputEl.setAttribute('aria-valuemin', String(settings.min));\n        }\n        if (settings.max !== null && settings.max !== undefined) {\n          inputEl.setAttribute('aria-valuemax', String(settings.max));\n        }\n\n        // Set current value (don't force 0 on empty input)\n        var rawInit = inputEl.value;\n        var nInit = rawInit !== '' ? parseFloat(String(rawInit)) : NaN;\n        if (!isNaN(nInit)) {\n          inputEl.setAttribute('aria-valuenow', String(nInit));\n        } else {\n          inputEl.removeAttribute('aria-valuenow');\n        }\n\n        // Add descriptive labels to buttons for screen readers\n        if (elements && elements.up && elements.down) {\n          elements.up.attr('aria-label', 'Increase value');\n          elements.down.attr('aria-label', 'Decrease value');\n        }\n      }\n\n      /**\n       * Updates ARIA attributes when value changes.\n       * @private\n       */\n      function _updateAriaAttributes() {\n        var raw = String(inputEl.value ?? '');\n        if (raw === '') {\n          inputEl.removeAttribute('aria-valuenow');\n          inputEl.removeAttribute('aria-valuetext');\n        } else {\n          var n = parseFloat(raw);\n          if (!isNaN(n)) {\n            inputEl.setAttribute('aria-valuenow', String(n));\n          } else {\n            inputEl.removeAttribute('aria-valuenow');\n          }\n          inputEl.setAttribute('aria-valuetext', raw);\n        }\n\n        // Update min/max if they've changed\n        if (settings.min !== null && settings.min !== undefined) {\n          inputEl.setAttribute('aria-valuemin', String(settings.min));\n        } else {\n          inputEl.removeAttribute('aria-valuemin');\n        }\n        if (settings.max !== null && settings.max !== undefined) {\n          inputEl.setAttribute('aria-valuemax', String(settings.max));\n        } else {\n          inputEl.removeAttribute('aria-valuemax');\n        }\n      }\n\n      /**\n       * Hides empty prefix/postfix elements and stores detached elements.\n       * @private\n       */\n      function _hideEmptyPrefixPostfix() {\n        if (!renderer) {\n          throw new Error('Bootstrap TouchSpin: Renderer not available for prefix/postfix handling.');\n        }\n        var detached = renderer.hideEmptyPrefixPostfix();\n        _detached_prefix = detached._detached_prefix;\n        _detached_postfix = detached._detached_postfix;\n      }\n\n      /**\n       * Binds all TouchSpin interaction events (keyboard, mouse, touch).\n       * @private\n       */\n      function _bindEvents() {\n        inputEl = /** @type {HTMLInputElement} */ (originalinput[0]);\n        containerEl = /** @type {HTMLElement} */ (container && container[0]);\n        upEl = /** @type {HTMLElement} */ (elements.up && elements.up[0]);\n        downEl = /** @type {HTMLElement} */ (elements.down && elements.down[0]);\n\n        function _onNative(el, type, handler, options) {\n          if (!el) return;\n          el.addEventListener(type, handler, options);\n          _nativeListeners.push([el, type, handler, options]);\n        }\n\n        // Keyboard on input\n        _onNative(inputEl, 'keydown', function (ev) {\n          var e = /** @type {KeyboardEvent} */ (ev);\n          var code = e.keyCode || e.which || 0;\n          if (code === 38) {\n            if (spinning !== 'up') {\n              upOnce();\n              startUpSpin();\n            }\n            e.preventDefault();\n          } else if (code === 40) {\n            if (spinning !== 'down') {\n              downOnce();\n              startDownSpin();\n            }\n            e.preventDefault();\n          } else if (code === 13) {\n            _checkValue(true);\n          }\n        });\n\n        _onNative(inputEl, 'keyup', function (ev) {\n          var e = /** @type {KeyboardEvent} */ (ev);\n          var code = e.keyCode || e.which || 0;\n          if (code === 38 || code === 40) {\n            stopSpin();\n          }\n        });\n\n        // Back-compat: handle jQuery-triggered blur to sanitize immediately\n        originalinput.on('blur.touchspin', function () {\n          _checkValue(true);\n        });\n\n        // Container focusout handler - sanitizes when leaving the entire widget\n        function leavingWidget(nextEl) {\n          return !nextEl || (containerEl ? !containerEl.contains(nextEl) : true);\n        }\n\n        _onNative(containerEl, 'focusout', function (e) {\n          var next = /** @type {HTMLElement|null|undefined} */ ((/** @type {FocusEvent} */(e)).relatedTarget);\n          if (!leavingWidget(next)) return;\n          setTimeout(function () {\n            var ae = /** @type {HTMLElement|null} */ (document.activeElement);\n            if (leavingWidget(ae)) {\n              stopSpin();\n              _checkValue(true);\n            }\n          }, 0);\n        });\n\n        // Buttons: keyboard (keep jQuery bindings to support namespaced triggers)\n        elements.down.on('keydown.touchspin', function (ev) {\n          var code = ev.keyCode || ev.which;\n          if (code === 32 || code === 13) {\n            if (spinning !== 'down') {\n              downOnce();\n              startDownSpin();\n            }\n            ev.preventDefault();\n          }\n        });\n        elements.down.on('keyup.touchspin', function (ev) {\n          var code = ev.keyCode || ev.which;\n          if (code === 32 || code === 13) {\n            stopSpin();\n          }\n        });\n        elements.up.on('keydown.touchspin', function (ev) {\n          var code = ev.keyCode || ev.which;\n          if (code === 32 || code === 13) {\n            if (spinning !== 'up') {\n              upOnce();\n              startUpSpin();\n            }\n            ev.preventDefault();\n          }\n        });\n        elements.up.on('keyup.touchspin', function (ev) {\n          var code = ev.keyCode || ev.which;\n          if (code === 32 || code === 13) {\n            stopSpin();\n          }\n        });\n\n        // Buttons: pointer (jQuery to support tests using namespaced triggers)\n        elements.down.on('mousedown.touchspin', function (ev) {\n          elements.down.off('touchstart.touchspin');\n          if (originalinput.is(':disabled,[readonly]')) return;\n          downOnce();\n          startDownSpin();\n          ev.preventDefault();\n          ev.stopPropagation();\n        });\n        elements.down.on('touchstart.touchspin', function (ev) {\n          elements.down.off('mousedown.touchspin');\n          if (originalinput.is(':disabled,[readonly]')) return;\n          downOnce();\n          startDownSpin();\n          ev.preventDefault();\n          ev.stopPropagation();\n        });\n        elements.up.on('mousedown.touchspin', function (ev) {\n          elements.up.off('touchstart.touchspin');\n          if (originalinput.is(':disabled,[readonly]')) return;\n          upOnce();\n          startUpSpin();\n          ev.preventDefault();\n          ev.stopPropagation();\n        });\n        elements.up.on('touchstart.touchspin', function (ev) {\n          elements.up.off('mousedown.touchspin');\n          if (originalinput.is(':disabled,[readonly]')) return;\n          upOnce();\n          startUpSpin();\n          ev.preventDefault();\n          ev.stopPropagation();\n        });\n        elements.up.on('mouseup.touchspin mouseout.touchspin touchleave.touchspin touchend.touchspin touchcancel.touchspin', function (ev) {\n          if (!spinning) return;\n          ev.stopPropagation();\n          stopSpin();\n        });\n        elements.down.on('mouseup.touchspin mouseout.touchspin touchleave.touchspin touchend.touchspin touchcancel.touchspin', function (ev) {\n          if (!spinning) return;\n          ev.stopPropagation();\n          stopSpin();\n        });\n        elements.down.on('mousemove.touchspin touchmove.touchspin', function (ev) {\n          if (!spinning) return;\n          ev.stopPropagation();\n          ev.preventDefault();\n        });\n        elements.up.on('mousemove.touchspin touchmove.touchspin', function (ev) {\n          if (!spinning) return;\n          ev.stopPropagation();\n          ev.preventDefault();\n        });\n\n        // Mouse wheel on input (native)\n        _onNative(inputEl, 'wheel', function (ev) {\n          if (!settings.mousewheel || !originalinput.is(':focus')) return;\n          var oe = /** @type {any} */ (ev);\n          var delta = (oe.wheelDelta != null ? oe.wheelDelta : 0) || -oe.deltaY || -oe.detail || 0;\n          ev.stopPropagation();\n          ev.preventDefault();\n          if (delta < 0) {\n            downOnce();\n          } else {\n            upOnce();\n          }\n        });\n      }\n\n      /**\n       * Binds TouchSpin API events for external control.\n       * @private\n       */\n      function _bindEventsInterface() {\n        originalinput.on('touchspin.destroy', function () {\n          _destroy();\n        });\n\n        originalinput.on('touchspin.uponce', function () {\n          stopSpin();\n          upOnce();\n        });\n\n        originalinput.on('touchspin.downonce', function () {\n          stopSpin();\n          downOnce();\n        });\n\n        originalinput.on('touchspin.startupspin', function () {\n          startUpSpin();\n        });\n\n        originalinput.on('touchspin.startdownspin', function () {\n          startDownSpin();\n        });\n\n        originalinput.on('touchspin.stopspin', function () {\n          stopSpin();\n        });\n\n        originalinput.on('touchspin.updatesettings', function (e, newsettings) {\n          changeSettings(newsettings);\n        });\n\n      }\n\n      /**\n       * Remove all native listeners registered by this instance.\n       * @private\n       */\n      function _offAllNative() {\n        for (var i = 0; i < _nativeListeners.length; i++) {\n          var rec = _nativeListeners[i];\n          rec[0].removeEventListener(rec[1], rec[2], rec[3]);\n        }\n        _nativeListeners = [];\n      }\n\n      /**\n       * Sets up MutationObserver to watch for attribute changes.\n       * @private\n       */\n      function _setupMutationObservers() {\n        if (typeof MutationObserver !== 'undefined') {\n          // MutationObserver is available\n          mutationObserver = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n              if (mutation.type === 'attributes') {\n                if (mutation.attributeName === 'disabled' || mutation.attributeName === 'readonly') {\n                  _updateButtonDisabledState();\n                } else if (mutation.attributeName === 'min' || mutation.attributeName === 'max' || mutation.attributeName === 'step') {\n                  _syncSettingsFromNativeAttributes();\n                }\n              }\n            });\n          });\n\n          mutationObserver.observe(originalinput[0], {\n            attributes: true,\n            attributeFilter: ['disabled','readonly','min','max','step']\n          });\n        }\n      }\n\n      /**\n       * Applies step divisibility rules to a value.\n       * @private\n       * @param {number} value - Value to apply divisibility to\n       * @returns {string} Value adjusted for step divisibility\n       */\n      function _forcestepdivisibility(value) {\n        switch (settings.forcestepdivisibility) {\n          case 'round':\n            return (Math.round(value / settings.step) * settings.step).toFixed(settings.decimals);\n          case 'floor':\n            return (Math.floor(value / settings.step) * settings.step).toFixed(settings.decimals);\n          case 'ceil':\n            return (Math.ceil(value / settings.step) * settings.step).toFixed(settings.decimals);\n          default:\n            return value.toFixed(settings.decimals);\n        }\n      }\n\n      /**\n       * Validates and corrects the input value according to constraints.\n       * @private\n       * @param {boolean} [mayTriggerChange=false] - Whether to fire change event if display value changes\n       * @fires touchspin.on.min\n       * @fires touchspin.on.max\n       */\n      function _checkValue(mayTriggerChange) {\n        var val, parsedval, returnval;\n        var prevDisplay = String(inputEl.value ?? '');\n\n        val = settings.callback_before_calculation(inputEl.value);\n\n        if (val === '') {\n          if (settings.replacementval !== '') {\n            inputEl.value = String(settings.replacementval);\n            _updateAriaAttributes();\n          } else {\n            inputEl.removeAttribute('aria-valuenow');\n          }\n          // For empty values, compare final result with initial value\n          if (mayTriggerChange) {\n            var finalDisplay = String(inputEl.value ?? '');\n            if (finalDisplay !== prevDisplay) {\n              originalinput.trigger('change');\n            }\n          }\n          return;\n        }\n\n        if (settings.decimals > 0 && val === '.') {\n          return;\n        }\n\n        parsedval = parseFloat(val);\n\n        if (isNaN(parsedval)) {\n          if (settings.replacementval !== '') {\n            var rv = parseFloat(String(settings.replacementval));\n            parsedval = isNaN(rv) ? 0 : rv;\n          } else {\n            parsedval = 0;\n          }\n        }\n\n        returnval = parsedval;\n\n        returnval = _forcestepdivisibility(parsedval);\n\n        if ((settings.min !== null) && (parsedval < settings.min)) {\n          returnval = settings.min;\n        }\n\n        if ((settings.max !== null) && (parsedval > settings.max)) {\n          returnval = settings.max;\n        }\n\n        var currentValue = String(inputEl.value ?? '');\n        var newValue = _setDisplay(parseFloat(returnval));\n\n        if (mayTriggerChange) {\n          var nextDisplay = String(inputEl.value ?? '');\n          if (nextDisplay !== prevDisplay) {\n            originalinput.trigger('change');\n          }\n        }\n      }\n\n      /**\n       * Synchronizes TouchSpin settings with native input attributes.\n       * @private\n       */\n      function _syncNativeAttributes() {\n        // Always set native attributes when input type is number to ensure consistency\n        if (inputEl.getAttribute('type') === 'number') {\n          if (settings.min !== null && settings.min !== undefined) {\n            inputEl.setAttribute('min', String(settings.min));\n          } else {\n            inputEl.removeAttribute('min');\n          }\n\n          if (settings.max !== null && settings.max !== undefined) {\n            inputEl.setAttribute('max', String(settings.max));\n          } else {\n            inputEl.removeAttribute('max');\n          }\n\n          if (settings.step !== null && settings.step !== undefined) {\n            inputEl.setAttribute('step', String(settings.step));\n          } else {\n            inputEl.removeAttribute('step');\n          }\n        }\n      }\n\n      /**\n       * Updates TouchSpin settings when native attributes change externally.\n       * @private\n       */\n      function _syncSettingsFromNativeAttributes() {\n        // Update TouchSpin settings when native attributes change externally\n        var nativeMin = inputEl.getAttribute('min');\n        var nativeMax = inputEl.getAttribute('max');\n        var nativeStep = inputEl.getAttribute('step');\n        var needsUpdate = false;\n        var newSettings = {};\n\n        // Check min attribute\n        if (nativeMin != null) {\n          var parsedMin = nativeMin === '' ? null : parseFloat(nativeMin);\n          // Normalize min to number for consistency (same as _initSettings)\n          if (parsedMin != null) {\n            var minNum = Number(parsedMin);\n            parsedMin = isFinite(minNum) ? minNum : null;\n          }\n          if (parsedMin !== settings.min) {\n            newSettings.min = parsedMin;\n            needsUpdate = true;\n          }\n        } else if (settings.min !== null) {\n          // Attribute was removed\n          newSettings.min = null;\n          needsUpdate = true;\n        }\n\n        // Check max attribute\n        if (nativeMax != null) {\n          var parsedMax = nativeMax === '' ? null : parseFloat(nativeMax);\n          // Normalize max to number for consistency (same as _initSettings)\n          if (parsedMax != null) {\n            var maxNum = Number(parsedMax);\n            parsedMax = isFinite(maxNum) ? maxNum : null;\n          }\n          if (parsedMax !== settings.max) {\n            newSettings.max = parsedMax;\n            needsUpdate = true;\n          }\n        } else if (settings.max !== null) {\n          // Attribute was removed\n          newSettings.max = null;\n          needsUpdate = true;\n        }\n\n        // Check step attribute\n        if (nativeStep != null) {\n          var parsedStep = (nativeStep === '' || nativeStep === 'any') ? 1 : parseFloat(nativeStep);\n          if (!isFinite(parsedStep) || parsedStep <= 0) parsedStep = 1;\n          if (parsedStep !== settings.step) {\n            newSettings.step = parsedStep;\n            needsUpdate = true;\n          }\n        } else if (settings.step !== 1) {\n          // Attribute was removed, default to 1\n          newSettings.step = 1;\n          needsUpdate = true;\n        }\n\n        if (needsUpdate) {\n          // Update settings without triggering another sync to avoid infinite loop\n          settings = Object.assign({}, settings, newSettings);\n\n          // Re-process step divisibility rules if step, min, or max changed\n          if (\n            (newSettings.step !== undefined ||\n             newSettings.min  !== undefined ||\n             newSettings.max  !== undefined) &&\n            parseFloat(settings.step) !== 1\n          ) {\n            settings.max = _alignToStep(settings.max, settings.step, 'down');\n            settings.min = _alignToStep(settings.min, settings.step, 'up');\n          }\n\n          // Update ARIA attributes when min/max settings change\n          _updateAriaAttributes();\n          _checkValue(true);\n        }\n      }\n\n      /**\n       * Calculates the boosted step value based on spin count.\n       * @private\n       * @returns {number} Current step value (potentially boosted)\n       */\n      function _getBoostedStep() {\n        if (!settings.booster) {\n          return settings.step;\n        } else {\n          var boosted = Math.pow(2, Math.floor(spincount / settings.boostat)) * settings.step;\n\n          if (settings.maxboostedstep) {\n            if (boosted > settings.maxboostedstep) {\n              boosted = settings.maxboostedstep;\n              value = Math.round((value / boosted)) * boosted;\n            }\n          }\n\n          return Math.max(settings.step, boosted);\n        }\n      }\n\n      /**\n       * Clears spin timers (delay + interval) without triggering events.\n       * @private\n       */\n      function _clearSpinTimers() {\n        clearTimeout(downDelayTimeout);\n        clearTimeout(upDelayTimeout);\n        clearInterval(downSpinTimer);\n        clearInterval(upSpinTimer);\n      }\n\n      /**\n       * Starts continuous spinning in the specified direction using shared helpers.\n       * Preserves original event order and semantics.\n       * @private\n       * @param {'up'|'down'} dir\n       */\n      function _startSpin(dir) {\n        if (originalinput.is(':disabled,[readonly]')) {\n          return;\n        }\n\n        // stop any previous spin and reset state\n        _clearSpinTimers();\n        spincount = 0;\n        spinning = dir;\n\n        // fire start events\n        originalinput.trigger('touchspin.on.startspin');\n        if (dir === 'up') {\n          originalinput.trigger('touchspin.on.startupspin');\n          upDelayTimeout = setTimeout(function () {\n            upSpinTimer = setInterval(function () {\n              spincount++;\n              upOnce();\n            }, settings.stepinterval);\n          }, settings.stepintervaldelay);\n        } else {\n          originalinput.trigger('touchspin.on.startdownspin');\n          downDelayTimeout = setTimeout(function () {\n            downSpinTimer = setInterval(function () {\n              spincount++;\n              downOnce();\n            }, settings.stepinterval);\n          }, settings.stepintervaldelay);\n        }\n      }\n\n      /**\n       * Returns a fallback value when input is NaN.\n       * @private\n       * @returns {number} Fallback value (firstclickvalueifempty or midpoint)\n       */\n      function valueIfIsNaN() {\n        if (typeof settings.firstclickvalueifempty === 'number') {\n          return settings.firstclickvalueifempty;\n        } else {\n          const min = typeof settings.min === 'number' ? settings.min : 0;\n          const max = typeof settings.max === 'number' ? settings.max : min;\n          return (min + max) / 2;\n        }\n      }\n\n      /**\n       * Updates TouchSpin button disabled state based on input state.\n       * @private\n       */\n      function _updateButtonDisabledState() {\n        const isDisabled = originalinput.is(':disabled,[readonly]');\n        elements.up.prop('disabled', isDisabled);\n        elements.down.prop('disabled', isDisabled);\n\n        if (isDisabled) {\n          stopSpin();\n        }\n      }\n\n      /**\n       * Increments the value by one step.\n       * @private\n       * @fires touchspin.on.max\n       */\n      function upOnce() {\n        if (originalinput.is(':disabled,[readonly]')) {\n          return;\n        }\n\n        _checkValue();\n        value = parseFloat(settings.callback_before_calculation(inputEl.value));\n        var initvalue = value;\n        value = _nextValue('up', value);\n        if ((settings.max !== null) && (value === settings.max)) {\n          originalinput.trigger('touchspin.on.max');\n          stopSpin();\n        }\n        _setDisplay(value);\n\n        if (initvalue !== value) {\n          originalinput.trigger('change');\n        }\n      }\n\n      /**\n       * Decrements the value by one step.\n       * @private\n       * @fires touchspin.on.min\n       */\n      function downOnce() {\n        if (originalinput.is(':disabled,[readonly]')) {\n          return;\n        }\n\n        _checkValue();\n        value = parseFloat(settings.callback_before_calculation(inputEl.value));\n        var initvalue = value;\n        value = _nextValue('down', value);\n        if ((settings.min !== null) && (value === settings.min)) {\n          originalinput.trigger('touchspin.on.min');\n          stopSpin();\n        }\n        _setDisplay(value);\n\n        if (initvalue !== value) {\n          originalinput.trigger('change');\n        }\n      }\n\n      /**\n       * Starts continuous downward spinning.\n       * @private\n       * @fires touchspin.on.startspin\n       * @fires touchspin.on.startdownspin\n       */\n      function startDownSpin() {\n        _startSpin('down');\n      }\n\n      /**\n       * Starts continuous upward spinning.\n       * @private\n       * @fires touchspin.on.startspin\n       * @fires touchspin.on.startupspin\n       */\n      function startUpSpin() {\n        _startSpin('up');\n      }\n\n      /**\n       * Stops all spinning and clears timers.\n       * @private\n       * @fires touchspin.on.stopupspin\n       * @fires touchspin.on.stopdownspin\n       * @fires touchspin.on.stopspin\n       */\n      function stopSpin() {\n        _clearSpinTimers();\n\n        switch (spinning) {\n          case 'up':\n            originalinput.trigger('touchspin.on.stopupspin');\n            originalinput.trigger('touchspin.on.stopspin');\n            break;\n          case 'down':\n            originalinput.trigger('touchspin.on.stopdownspin');\n            originalinput.trigger('touchspin.on.stopspin');\n            break;\n        }\n\n        spincount = 0;\n        spinning = false;\n      }\n\n    });\n\n  };\n\n}));\n\n// Renderer classes are included before this file during the build process\n// They should be available as global classes: BootstrapRenderer, Bootstrap3Renderer, etc.\n// and RendererFactory should be available\n\n// Modern facade: expose a method-only API without requiring callers to use jQuery directly.\n// This uses the existing plugin internally (no behavior change) and returns an\n// object with stable methods. During migration, internals can move behind these methods.\n(function () {\n  if (typeof window === 'undefined') return;\n  if (!window.jQuery || !window.jQuery.fn || typeof window.jQuery.fn.TouchSpin !== 'function') return;\n\n  window.TouchSpin = window.TouchSpin || {};\n  window.TouchSpin.attach = function (input, opts) {\n    var el = (input && input.nodeType === 1) ? input : document.querySelector(input);\n    if (!el) throw new Error('TouchSpin.attach: invalid element');\n    var $el = window.jQuery(el);\n    $el.TouchSpin(opts);\n    var api = $el.data('touchspinInternal');\n    if (!api) throw new Error('TouchSpin failed to initialize');\n    return {\n      upOnce: api.upOnce,\n      downOnce: api.downOnce,\n      startUpSpin: api.startUpSpin,\n      startDownSpin: api.startDownSpin,\n      stopSpin: api.stopSpin,\n      updateSettings: api.updateSettings,\n      getValue: api.getValue,\n      setValue: api.setValue,\n      destroy: api.destroy\n    };\n  };\n\n  var _Element = (typeof globalThis !== 'undefined' && /** @type {any} */ (globalThis).Element) || undefined;\n  if (_Element && _Element.prototype && !_Element.prototype.TouchSpin) {\n    Object.defineProperty(_Element.prototype, 'TouchSpin', {\n      configurable: true,\n      writable: true,\n      value: function (opts) { return window.TouchSpin.attach(this, opts); }\n    });\n  }\n})();\n"],"names":["jQuery","value","options"],"mappings":"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"}