{"version":3,"file":"touchspin-bs5.min.js","sources":["../packages/core/src/index.js","../packages/core/src/AbstractRenderer.js","../packages/renderers/bootstrap5/src/Bootstrap5Renderer.js","../src/entries/standalone-bs5.js"],"sourcesContent":["// @ts-check\n\n/**\n * @fileoverview Framework-agnostic core scaffold for TouchSpin.\n * Phase A (A1): minimal public API surface to enable incremental extraction.\n * This is a placeholder; logic will be ported from TouchSpinCore.migrated.js in A2â€“A7.\n */\n\n/**\n * @typedef {'none'|'floor'|'round'|'ceil'} ForceStepDivisibility\n */\n\n/**\n * @callback TouchSpinCalcCallback\n * @param {string} value\n * @returns {string}\n */\n\n/**\n * @typedef {Object} TouchSpinCoreOptions\n * @property {number|null=} min\n * @property {number|null=} max\n * @property {number|null=} firstclickvalueifempty\n * @property {number=} step\n * @property {number=} decimals\n * @property {ForceStepDivisibility=} forcestepdivisibility\n * @property {number=} stepinterval\n * @property {number=} stepintervaldelay\n * @property {boolean=} booster\n * @property {number=} boostat\n * @property {number|false=} maxboostedstep\n * @property {TouchSpinCalcCallback=} callback_before_calculation\n * @property {TouchSpinCalcCallback=} callback_after_calculation\n * @property {Function} renderer - Renderer class (e.g., Bootstrap5Renderer) or null for no UI\n * @property {string=} initval - Initial value for the input\n * @property {string=} replacementval - Value to use when input is empty\n * @property {boolean=} mousewheel - Enable/disable mousewheel support\n * @property {boolean=} verticalbuttons - Enable vertical button layout\n * @property {string=} verticalup - Text for vertical up button\n * @property {string=} verticaldown - Text for vertical down button\n * @property {string=} verticalupclass - CSS classes for vertical up button (handled by renderer)\n * @property {string=} verticaldownclass - CSS classes for vertical down button (handled by renderer)\n * @property {string=} prefix - Text/HTML before input (handled by renderer)\n * @property {string=} postfix - Text/HTML after input (handled by renderer)\n * @property {string=} prefix_extraclass - Extra CSS classes for prefix element (handled by renderer)\n * @property {string=} postfix_extraclass - Extra CSS classes for postfix element (handled by renderer)\n * @property {string=} buttonup_class - CSS classes for up button (handled by renderer)\n * @property {string=} buttondown_class - CSS classes for down button (handled by renderer)\n * @property {string=} buttonup_txt - Content for up button (handled by renderer)\n * @property {string=} buttondown_txt - Content for down button (handled by renderer)\n */\n\nconst DEFAULTS = {\n  min: 0,\n  max: 100,\n  initval: '',\n  replacementval: '',\n  firstclickvalueifempty: null,\n  step: 1,\n  decimals: 0,\n  forcestepdivisibility: 'round',\n  stepinterval: 100,\n  stepintervaldelay: 500,\n  verticalbuttons: false,\n  verticalup: '+',\n  verticaldown: '-',\n  verticalupclass: null,\n  verticaldownclass: null,\n  focusablebuttons: false,\n  prefix: '',\n  postfix: '',\n  prefix_extraclass: '',\n  postfix_extraclass: '',\n  booster: true,\n  boostat: 10,\n  maxboostedstep: false,\n  mousewheel: true,\n  buttonup_class: null,\n  buttondown_class: null,\n  buttonup_txt: '+',\n  buttondown_txt: '-',\n  callback_before_calculation: (v) => v,\n  callback_after_calculation: (v) => v,\n};\n\nconst INSTANCE_KEY = '_touchSpinCore';\n\nexport class TouchSpinCore {\n  /**\n   * @param {HTMLInputElement} inputEl\n   * @param {Partial<TouchSpinCoreOptions>=} opts\n   */\n  constructor(inputEl, opts = {}) {\n    if (!inputEl || inputEl.nodeName !== 'INPUT') {\n      throw new Error('TouchSpinCore requires an <input> element');\n    }\n\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n\n    // Parse data-bts-* attributes\n    const dataAttrs = this._parseDataAttributes(inputEl);\n\n    /** @type {TouchSpinCoreOptions} */\n    this.settings = Object.assign({}, DEFAULTS, dataAttrs, opts);\n\n    // Check for renderer: explicit option > global default > none\n    if (!this.settings.renderer) {\n      // Check for global default renderer\n      if (typeof globalThis !== 'undefined' && globalThis.TouchSpinDefaultRenderer) {\n        this.settings.renderer = globalThis.TouchSpinDefaultRenderer;\n      } else {\n        // Allow no renderer for keyboard/wheel-only functionality\n        console.warn('TouchSpin: No renderer specified (renderer: null). Only keyboard/wheel events will work. Consider using Bootstrap3/4/5Renderer or TailwindRenderer for UI.');\n      }\n    }\n\n    /** @type {boolean} */\n    this.spinning = false;\n    /** @type {number} */\n    this.spincount = 0;\n    /** @type {false|'up'|'down'} */\n    this.direction = false;\n    /** @type {Map<string, Set<Function>>} */\n    this._events = new Map();\n    /** @type {Array<Function>} */\n    this._teardownCallbacks = [];\n    /** @type {Map<string, Set<Function>>} */\n    this._settingObservers = new Map(); // For observer pattern\n\n    /** @type {ReturnType<typeof setTimeout>|null} */\n    this._spinDelayTimeout = null;\n    /** @type {ReturnType<typeof setInterval>|null} */\n    this._spinIntervalTimer = null;\n\n    /** @type {HTMLElement|null} */\n    this._upButton = null;\n    /** @type {HTMLElement|null} */\n    this._downButton = null;\n    /** @type {HTMLElement|null} */\n    this._wrapper = null;\n\n    // DOM event handlers (bound methods)\n    this._handleUpMouseDown = this._handleUpMouseDown.bind(this);\n    this._handleDownMouseDown = this._handleDownMouseDown.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this._handleUpKeyDown = this._handleUpKeyDown.bind(this);\n    this._handleUpKeyUp = this._handleUpKeyUp.bind(this);\n    this._handleDownKeyDown = this._handleDownKeyDown.bind(this);\n    this._handleDownKeyUp = this._handleDownKeyUp.bind(this);\n    this._handleInputChange = this._handleInputChange.bind(this);\n    this._handleInputBlur = this._handleInputBlur.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this._handleKeyUp = this._handleKeyUp.bind(this);\n    this._handleWheel = this._handleWheel.bind(this);\n\n    // Core always manages the input element\n    this._initializeInput();\n\n    // Initialize renderer with reference to core\n    if (this.settings.renderer) {\n      this.renderer = new this.settings.renderer(inputEl, this.settings, this);\n      this.renderer.init();\n    }\n\n    // Set up mutation observer to watch for disabled/readonly changes\n    this._setupMutationObserver();\n  }\n\n  /**\n   * Initialize input element (core always handles this)\n   * @private\n   */\n  _initializeInput() {\n    // Set initial value if specified and input is empty\n    if (this.settings.initval !== '' && this.input.value === '') {\n      this.input.value = this.settings.initval;\n    }\n\n    // Core always handles these for the input\n    this._updateAriaAttributes();\n    this._syncNativeAttributes();\n    this._checkValue(false);\n  }\n\n  /**\n   * Parse data-bts-* attributes from the input element.\n   * @param {HTMLInputElement} inputEl\n   * @returns {Partial<TouchSpinCoreOptions>}\n   * @private\n   */\n  _parseDataAttributes(inputEl) {\n    const attributeMap = {\n      min: 'min',\n      max: 'max',\n      initval: 'init-val',\n      replacementval: 'replacement-val',\n      firstclickvalueifempty: 'first-click-value-if-empty',\n      step: 'step',\n      decimals: 'decimals',\n      stepinterval: 'step-interval',\n      verticalbuttons: 'vertical-buttons',\n      verticalup: 'vertical-up',\n      verticaldown: 'vertical-down',\n      verticalupclass: 'vertical-up-class',\n      verticaldownclass: 'vertical-down-class',\n      forcestepdivisibility: 'force-step-divisibility',\n      stepintervaldelay: 'step-interval-delay',\n      prefix: 'prefix',\n      postfix: 'postfix',\n      prefix_extraclass: 'prefix-extra-class',\n      postfix_extraclass: 'postfix-extra-class',\n      booster: 'booster',\n      boostat: 'boostat',\n      maxboostedstep: 'max-boosted-step',\n      mousewheel: 'mouse-wheel',\n      buttondown_class: 'button-down-class',\n      buttonup_class: 'button-up-class',\n      buttondown_txt: 'button-down-txt',\n      buttonup_txt: 'button-up-txt'\n    };\n\n    const parsed = {};\n\n    // Parse data-bts-* attributes\n    for (const [optionName, attrName] of Object.entries(attributeMap)) {\n      const fullAttrName = `data-bts-${attrName}`;\n      if (inputEl.hasAttribute(fullAttrName)) {\n        const rawValue = inputEl.getAttribute(fullAttrName);\n        parsed[optionName] = this._coerceAttributeValue(optionName, rawValue);\n      }\n    }\n\n    // Also handle native attributes with precedence (warn if both specified)\n    for (const nativeAttr of ['min', 'max', 'step']) {\n      if (inputEl.hasAttribute(nativeAttr)) {\n        const rawValue = inputEl.getAttribute(nativeAttr);\n        if (parsed[nativeAttr] !== undefined) {\n          console.warn(`Both \"data-bts-${nativeAttr}\" and \"${nativeAttr}\" attributes specified. Native attribute takes precedence.`, inputEl);\n        }\n        parsed[nativeAttr] = this._coerceAttributeValue(nativeAttr, rawValue);\n      }\n    }\n\n    return parsed;\n  }\n\n  /**\n   * Convert string attribute values to appropriate types.\n   * @param {string} optionName\n   * @param {string} rawValue\n   * @returns {any}\n   * @private\n   */\n  _coerceAttributeValue(optionName, rawValue) {\n    if (rawValue === null || rawValue === undefined) {\n      return rawValue;\n    }\n\n    // Boolean attributes\n    if (['booster', 'mousewheel', 'verticalbuttons'].includes(optionName)) {\n      return rawValue === 'true' || rawValue === '' || rawValue === optionName;\n    }\n\n    // Numeric attributes\n    if (['min', 'max', 'step', 'decimals', 'stepinterval', 'stepintervaldelay',\n         'boostat', 'maxboostedstep', 'firstclickvalueifempty'].includes(optionName)) {\n      const num = parseFloat(rawValue);\n      return isNaN(num) ? rawValue : num;\n    }\n\n    // String attributes - return as-is\n    return rawValue;\n  }\n\n  /** Increment once according to step */\n  upOnce() {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('up', v);\n\n    // Check if already at max boundary before incrementing\n    if (this.settings.max != null && v === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n      return;\n    }\n\n    // Fire max event BEFORE setting display if we're reaching max\n    if (this.settings.max != null && next === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n    }\n\n    this._setDisplay(next, true);\n  }\n\n  /** Decrement once according to step */\n  downOnce() {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('down', v);\n\n    // Check if already at min boundary before decrementing\n    if (this.settings.min != null && v === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n      return;\n    }\n\n    // Fire min event BEFORE setting display if we're reaching min\n    if (this.settings.min != null && next === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n    }\n\n    this._setDisplay(next, true);\n  }\n\n  /** Start increasing repeatedly (placeholder) */\n  startUpSpin() { this._startSpin('up'); }\n\n  /** Start decreasing repeatedly (placeholder) */\n  startDownSpin() { this._startSpin('down'); }\n\n  /** Stop spinning (placeholder) */\n  stopSpin() {\n    this._clearSpinTimers();\n    if (this.spinning) {\n      if (this.direction === 'up') {\n        this.emit('stopupspin');\n        this.emit('stopspin');\n      } else if (this.direction === 'down') {\n        this.emit('stopdownspin');\n        this.emit('stopspin');\n      }\n    }\n    this.spinning = false;\n    this.direction = false;\n    this.spincount = 0;\n  }\n\n  /**\n   * @param {Partial<TouchSpinCoreOptions>} opts\n   */\n  updateSettings(opts) {\n    const oldSettings = { ...this.settings };\n    const newSettings = opts || {};\n\n    Object.assign(this.settings, newSettings);\n\n    // If step/min/max changed and step != 1, align bounds to step like the jQuery plugin\n    const step = Number(this.settings.step || 1);\n    if ((newSettings.step !== undefined || newSettings.min !== undefined || newSettings.max !== undefined) && step !== 1) {\n      if (this.settings.max != null) {\n        this.settings.max = this._alignToStep(Number(this.settings.max), step, 'down');\n      }\n      if (this.settings.min != null) {\n        this.settings.min = this._alignToStep(Number(this.settings.min), step, 'up');\n      }\n    }\n\n    // Notify observers of changed settings\n    Object.keys(newSettings).forEach(key => {\n      if (oldSettings[key] !== newSettings[key]) {\n        const observers = this._settingObservers.get(key);\n        if (observers) {\n          observers.forEach(callback => {\n            try {\n              callback(newSettings[key], oldSettings[key]);\n            } catch (error) {\n              console.error('TouchSpin: Error in setting observer callback:', error);\n            }\n          });\n        }\n      }\n    });\n\n    // Core handles its own setting changes\n    this._updateAriaAttributes();\n    this._syncNativeAttributes();\n    this._checkValue(false);\n  }\n\n  /** @returns {number} */\n  getValue() {\n    let raw = this.input.value;\n    if (raw === '' && this.settings.replacementval !== '') {\n      raw = this.settings.replacementval;\n    }\n    if (raw === '') return NaN;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    return isNaN(num) ? NaN : num;\n  }\n\n  /**\n   * @param {number|string} v\n   */\n  setValue(v) {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    const parsed = Number(v);\n    if (!isFinite(parsed)) return;\n    const adjusted = this._applyConstraints(parsed);\n    this._setDisplay(adjusted, true);\n  }\n\n  /**\n   * Initialize DOM event handling by finding elements and attaching listeners.\n   * Must be called after the renderer has created the DOM structure.\n   */\n  initDOMEventHandling() {\n    // Find DOM elements and attach listeners\n    this._findDOMElements();\n    this._attachDOMEventListeners();\n  }\n\n  /**\n   * Register a teardown callback that will be called when the instance is destroyed.\n   * This allows wrapper libraries to register cleanup logic.\n   * @param {Function} callback - Function to call on destroy\n   * @returns {Function} - Unregister function\n   */\n  registerTeardown(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Teardown callback must be a function');\n    }\n    this._teardownCallbacks.push(callback);\n\n    // Return unregister function\n    return () => {\n      const index = this._teardownCallbacks.indexOf(callback);\n      if (index > -1) {\n        this._teardownCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /** Cleanup and destroy the TouchSpin instance */\n  destroy() {\n    this.stopSpin();\n\n    // Renderer cleans up its added elements\n    if (this.renderer && this.renderer.teardown) {\n      this.renderer.teardown();\n    }\n\n    // Core cleans up input events only\n    this._detachDOMEventListeners();\n\n    // Call all registered teardown callbacks (for wrapper cleanup)\n    this._teardownCallbacks.forEach(callback => {\n      try {\n        callback();\n      } catch (error) {\n        console.error('TouchSpin teardown callback error:', error);\n      }\n    });\n    this._teardownCallbacks.length = 0; // Clear the array\n\n    // Clear setting observers\n    this._settingObservers.clear();\n\n    // Clean up mutation observer\n    if (this._mutationObserver) {\n      this._mutationObserver.disconnect();\n      this._mutationObserver = null;\n    }\n\n    // Clear button references\n    this._upButton = null;\n    this._downButton = null;\n\n    // Remove instance from element\n    if (this.input[INSTANCE_KEY] === this) {\n      delete this.input[INSTANCE_KEY];\n    }\n  }\n\n  /**\n   * Create a plain public API object with bound methods for wrappers.\n   * @returns {TouchSpinCorePublicAPI}\n   */\n  toPublicApi() {\n    return {\n      upOnce: this.upOnce.bind(this),\n      downOnce: this.downOnce.bind(this),\n      startUpSpin: this.startUpSpin.bind(this),\n      startDownSpin: this.startDownSpin.bind(this),\n      stopSpin: this.stopSpin.bind(this),\n      updateSettings: this.updateSettings.bind(this),\n      getValue: this.getValue.bind(this),\n      setValue: this.setValue.bind(this),\n      destroy: this.destroy.bind(this),\n      on: this.on.bind(this),\n      off: this.off.bind(this),\n      initDOMEventHandling: this.initDOMEventHandling.bind(this),\n      registerTeardown: this.registerTeardown.bind(this),\n      attachUpEvents: this.attachUpEvents.bind(this),\n      attachDownEvents: this.attachDownEvents.bind(this),\n      observeSetting: this.observeSetting.bind(this),\n    };\n  }\n\n  // --- Renderer Event Attachment Methods ---\n  /**\n   * Attach up button events to an element\n   * Called by renderers after creating up button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachUpEvents(element) {\n    if (!element) {\n      console.warn('TouchSpin: attachUpEvents called with null element');\n      return;\n    }\n\n    this._upButton = element;\n    element.addEventListener('mousedown', this._handleUpMouseDown);\n    element.addEventListener('touchstart', this._handleUpMouseDown, {passive: false});\n\n    // Add keyboard event listeners if focusable buttons are enabled\n    if (this.settings.focusablebuttons) {\n      element.addEventListener('keydown', this._handleUpKeyDown);\n      element.addEventListener('keyup', this._handleUpKeyUp);\n    }\n\n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  /**\n   * Attach down button events to an element\n   * Called by renderers after creating down button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachDownEvents(element) {\n    if (!element) {\n      console.warn('TouchSpin: attachDownEvents called with null element');\n      return;\n    }\n\n    this._downButton = element;\n    element.addEventListener('mousedown', this._handleDownMouseDown);\n    element.addEventListener('touchstart', this._handleDownMouseDown, {passive: false});\n\n    // Add keyboard event listeners if focusable buttons are enabled\n    if (this.settings.focusablebuttons) {\n      element.addEventListener('keydown', this._handleDownKeyDown);\n      element.addEventListener('keyup', this._handleDownKeyUp);\n    }\n\n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  // --- Settings Observer Pattern ---\n  /**\n   * Allow renderers to observe setting changes\n   * @param {string} settingName - Name of setting to observe\n   * @param {Function} callback - Function to call when setting changes (newValue, oldValue)\n   * @returns {Function} Unsubscribe function\n   */\n  observeSetting(settingName, callback) {\n    if (!this._settingObservers.has(settingName)) {\n      this._settingObservers.set(settingName, new Set());\n    }\n\n    const observers = this._settingObservers.get(settingName);\n    observers.add(callback);\n\n    // Return unsubscribe function\n    return () => observers.delete(callback);\n  }\n\n  // --- Minimal internal emitter API ---\n  /**\n   * Subscribe to a core event.\n   * Events: 'min', 'max', 'startspin', 'startupspin', 'startdownspin', 'stopspin', 'stopupspin', 'stopdownspin'\n   * @param {string} event\n   * @param {(detail?: any) => void} handler\n   */\n  on(event, handler) {\n    const set = this._events.get(event) || new Set();\n    set.add(handler);\n    this._events.set(event, set);\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Unsubscribe from a core event.\n   * @param {string} event\n   * @param {(detail?: any) => void=} handler\n   */\n  off(event, handler) {\n    const set = this._events.get(event);\n    if (!set) return;\n    if (!handler) {\n      this._events.delete(event);\n      return;\n    }\n    set.delete(handler);\n    if (set.size === 0) this._events.delete(event);\n  }\n\n  /**\n   * Emit a core event to subscribers.\n   * @param {string} event\n   * @param {any=} detail\n   */\n  emit(event, detail) {\n    const set = this._events.get(event);\n    if (!set || set.size === 0) return;\n    for (const fn of [...set]) {\n      try { fn(detail); } catch (_) {}\n    }\n  }\n\n  /**\n   * Internal: start timed spin in a direction with initial step, delay, then interval.\n   * @param {'up'|'down'} dir\n   */\n  _startSpin(dir) {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    \n    // Check if already at boundary - don't start spin if so\n    const v = this.getValue();\n    if (dir === 'up' && this.settings.max != null && v === this.settings.max) {\n      return; // Already at max, don't start spin\n    }\n    if (dir === 'down' && this.settings.min != null && v === this.settings.min) {\n      return; // Already at min, don't start spin\n    }\n    \n    // If changing direction, reset counters\n    const direction_changed = (!this.spinning || this.direction !== dir);\n    if (direction_changed) {\n      this.spinning = true;\n      this.direction = dir;\n      this.spincount = 0;\n      // Match jQuery plugin event order: startspin then direction-specific\n      this.emit('startspin');\n      if (dir === 'up') this.emit('startupspin'); else this.emit('startdownspin');\n    }\n\n    // Clear previous timers\n    this._clearSpinTimers();\n    // Schedule repeat after delay, then at interval (no immediate step; wrapper triggers first step)\n    const delay = this.settings.stepintervaldelay || 500;\n    const interval = this.settings.stepinterval || 100;\n    this._spinDelayTimeout = setTimeout(() => {\n      this._spinDelayTimeout = null;\n      this._spinIntervalTimer = setInterval(() => {\n        if (!this.spinning || this.direction !== dir) return; // safety\n        this._spinStep(dir);\n      }, interval);\n    }, delay);\n  }\n\n  _clearSpinTimers() {\n    try { if (this._spinDelayTimeout) { clearTimeout(this._spinDelayTimeout); } } catch {}\n    try { if (this._spinIntervalTimer) { clearInterval(this._spinIntervalTimer); } } catch {}\n    this._spinDelayTimeout = null;\n    this._spinIntervalTimer = null;\n  }\n\n  /**\n   * Compute the next numeric value for a direction, respecting step, booster and bounds.\n   * @param {'up'|'down'} dir\n   * @param {number} current\n   */\n  _nextValue(dir, current) {\n    let v = current;\n    if (isNaN(v)) {\n      v = this._valueIfIsNaN();\n    } else {\n      const base = this.settings.step || 1;\n      const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n      const stepUnclamped = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n      const mbs = this.settings.maxboostedstep;\n      let step = stepUnclamped;\n      if (mbs && isFinite(mbs) && stepUnclamped > Number(mbs)) {\n        step = Number(mbs);\n        // Align current value to the boosted step grid when clamped (parity with jQuery plugin)\n        v = Math.round(v / step) * step;\n      }\n      step = Math.max(base, step);\n      v = dir === 'up' ? v + step : v - step;\n    }\n    return this._applyConstraints(v);\n  }\n\n  /** Returns a reasonable value to use when current is NaN. */\n  _valueIfIsNaN() {\n    if (typeof this.settings.firstclickvalueifempty === 'number') {\n      return this.settings.firstclickvalueifempty;\n    }\n    const min = (typeof this.settings.min === 'number') ? this.settings.min : 0;\n    const max = (typeof this.settings.max === 'number') ? this.settings.max : min;\n    return (min + max) / 2;\n  }\n\n  /** Apply step divisibility and clamp to min/max. */\n  _applyConstraints(v) {\n    const aligned = this._forcestepdivisibility(v);\n    const min = this.settings.min;\n    const max = this.settings.max;\n    let clamped = aligned;\n    if (min != null && clamped < min) clamped = min;\n    if (max != null && clamped > max) clamped = max;\n    return clamped;\n  }\n\n  /** Determine the effective step with booster if enabled. */\n  _getBoostedStep() {\n    const base = this.settings.step || 1;\n    if (!this.settings.booster) return base;\n    const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n    let boosted = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n    const mbs = this.settings.maxboostedstep;\n    if (mbs && isFinite(mbs)) {\n      const cap = Number(mbs);\n      if (boosted > cap) boosted = cap;\n    }\n    return Math.max(base, boosted);\n  }\n\n  /** Aligns value to step per forcestepdivisibility. */\n  _forcestepdivisibility(val) {\n    const mode = this.settings.forcestepdivisibility || 'round';\n    const step = this.settings.step || 1;\n    const dec = this.settings.decimals || 0;\n    let out;\n    switch (mode) {\n      case 'floor':\n        out = Math.floor(val / step) * step; break;\n      case 'ceil':\n        out = Math.ceil(val / step) * step; break;\n      case 'none':\n        out = val; break;\n      case 'round':\n      default:\n        out = Math.round(val / step) * step; break;\n    }\n    // Normalize to configured decimals without string pipeline; formatting applies later\n    return Number(out.toFixed(dec));\n  }\n\n  /** Aligns a value to nearest step boundary using integer arithmetic. */\n  _alignToStep(val, step, dir) {\n    if (step === 0) return val;\n    let k = 1, s = step;\n    while (((s * k) % 1) !== 0 && k < 1e6) k *= 10;\n    const V = Math.round(val * k);\n    const S = Math.round(step * k);\n    const r = V % S;\n    if (r === 0) return val;\n    return (dir === 'down' ? (V - r) : (V + (S - r))) / k;\n  }\n\n  /** Format and write to input, optionally emit change if different. */\n  _setDisplay(num, mayTriggerChange) {\n    const prev = String(this.input.value ?? '');\n    const next = this._formatDisplay(num);\n    this.input.value = next;\n    this._updateAriaAttributes();\n    if (mayTriggerChange && prev !== next) {\n      // mirror plugin behavior: trigger a native change event\n      this.input.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    return next;\n  }\n\n  _formatDisplay(num) {\n    const dec = this.settings.decimals || 0;\n    const after = this.settings.callback_after_calculation || ((v) => v);\n    const s = Number(num).toFixed(dec);\n    return after(s);\n  }\n\n  /**\n   * Perform one spin step in a direction while tracking spincount for booster.\n   * @param {'up'|'down'} dir\n   */\n  _spinStep(dir) {\n    this.spincount++;\n    if (dir === 'up') this.upOnce(); else this.downOnce();\n  }\n\n  /** Sanitize current input value and update display; optionally emits change. */\n  _checkValue(mayTriggerChange) {\n    const v = this.getValue();\n    if (!isFinite(v)) return;\n    const adjusted = this._applyConstraints(v);\n    this._setDisplay(adjusted, !!mayTriggerChange);\n  }\n\n  _updateAriaAttributes() {\n    const el = this.input;\n    if (el.getAttribute('role') !== 'spinbutton') {\n      el.setAttribute('role', 'spinbutton');\n    }\n    const min = this.settings.min;\n    const max = this.settings.max;\n    if (min != null) el.setAttribute('aria-valuemin', String(min)); else el.removeAttribute('aria-valuemin');\n    if (max != null) el.setAttribute('aria-valuemax', String(max)); else el.removeAttribute('aria-valuemax');\n    const raw = el.value;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    if (isFinite(num)) el.setAttribute('aria-valuenow', String(num)); else el.removeAttribute('aria-valuenow');\n    el.setAttribute('aria-valuetext', String(raw));\n  }\n\n  /**\n   * Synchronize TouchSpin settings to native input attributes.\n   * Only applies to type=\"number\" inputs to maintain browser consistency.\n   * @private\n   */\n  _syncNativeAttributes() {\n    // Only set native attributes on number inputs\n    if (this.input.getAttribute('type') === 'number') {\n      // Sync min attribute\n      if (this.settings.min != null && isFinite(this.settings.min)) {\n        this.input.setAttribute('min', String(this.settings.min));\n      } else {\n        this.input.removeAttribute('min');\n      }\n\n      // Sync max attribute\n      if (this.settings.max != null && isFinite(this.settings.max)) {\n        this.input.setAttribute('max', String(this.settings.max));\n      } else {\n        this.input.removeAttribute('max');\n      }\n\n      // Sync step attribute\n      if (this.settings.step != null && isFinite(this.settings.step) && this.settings.step > 0) {\n        this.input.setAttribute('step', String(this.settings.step));\n      } else {\n        this.input.removeAttribute('step');\n      }\n    }\n  }\n\n  /**\n   * Update TouchSpin settings from native attribute changes.\n   * Called by mutation observer when min/max/step attributes change.\n   * @private\n   */\n  _syncSettingsFromNativeAttributes() {\n    const nativeMin = this.input.getAttribute('min');\n    const nativeMax = this.input.getAttribute('max');\n    const nativeStep = this.input.getAttribute('step');\n    let needsUpdate = false;\n    const newSettings = {};\n\n    // Check min attribute\n    if (nativeMin != null) {\n      const parsedMin = nativeMin === '' ? null : parseFloat(nativeMin);\n      const minNum = parsedMin != null && isFinite(parsedMin) ? parsedMin : null;\n      if (minNum !== this.settings.min) {\n        newSettings.min = minNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.min != null) {\n      // Attribute was removed\n      newSettings.min = null;\n      needsUpdate = true;\n    }\n\n    // Check max attribute\n    if (nativeMax != null) {\n      const parsedMax = nativeMax === '' ? null : parseFloat(nativeMax);\n      const maxNum = parsedMax != null && isFinite(parsedMax) ? parsedMax : null;\n      if (maxNum !== this.settings.max) {\n        newSettings.max = maxNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.max != null) {\n      // Attribute was removed\n      newSettings.max = null;\n      needsUpdate = true;\n    }\n\n    // Check step attribute\n    if (nativeStep != null) {\n      const parsedStep = nativeStep === '' ? null : parseFloat(nativeStep);\n      const stepNum = parsedStep != null && isFinite(parsedStep) && parsedStep > 0 ? parsedStep : null;\n      if (stepNum !== this.settings.step) {\n        newSettings.step = stepNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.step !== 1) {\n      // Attribute was removed, reset to default\n      newSettings.step = 1;\n      needsUpdate = true;\n    }\n\n    // Apply updates if needed\n    if (needsUpdate) {\n      this.updateSettings(newSettings);\n    }\n  }\n\n  // --- DOM Event Handling Methods ---\n\n  /**\n   * Find and store references to DOM elements using data-touchspin-injected attributes.\n   * @private\n   */\n  _findDOMElements() {\n    // Core doesn't need to find buttons - renderers handle button events directly\n    // We only need to find the wrapper for potential future use\n    let wrapper = this.input.parentElement;\n    while (wrapper && !wrapper.hasAttribute('data-touchspin-injected')) {\n      wrapper = wrapper.parentElement;\n    }\n    this._wrapper = wrapper;\n  }\n\n  /**\n   * Attach DOM event listeners to elements.\n   * @private\n   */\n  _attachDOMEventListeners() {\n    // Core should NOT attach button events - renderers handle that via attachUpEvents/attachDownEvents\n\n    // Global mouseup/touchend to stop spinning\n    document.addEventListener('mouseup', this._handleMouseUp);\n    document.addEventListener('mouseleave', this._handleMouseUp);\n    document.addEventListener('touchend', this._handleMouseUp);\n\n    // Input events (always attach these - they work without renderer UI)\n    this.input.addEventListener('change', this._handleInputChange, true); // Capture phase to intercept\n    this.input.addEventListener('blur', this._handleInputBlur);\n    this.input.addEventListener('keydown', this._handleKeyDown);\n    this.input.addEventListener('keyup', this._handleKeyUp);\n    this.input.addEventListener('wheel', this._handleWheel);\n  }\n\n  /**\n   * Remove DOM event listeners.\n   * @private\n   */\n  _detachDOMEventListeners() {\n    // Core does not manage button events - renderers handle their own cleanup\n\n    // Global events\n    document.removeEventListener('mouseup', this._handleMouseUp);\n    document.removeEventListener('mouseleave', this._handleMouseUp);\n    document.removeEventListener('touchend', this._handleMouseUp);\n\n    // Input events\n    this.input.removeEventListener('change', this._handleInputChange, true);\n    this.input.removeEventListener('blur', this._handleInputBlur);\n    this.input.removeEventListener('keydown', this._handleKeyDown);\n    this.input.removeEventListener('keyup', this._handleKeyUp);\n    this.input.removeEventListener('wheel', this._handleWheel);\n  }\n\n  // --- DOM Event Handlers ---\n\n  /**\n   * Handle mousedown/touchstart on up button.\n   * @private\n   */\n  _handleUpMouseDown(e) {\n    e.preventDefault();\n    this.upOnce();\n    this.startUpSpin();\n  }\n\n  /**\n   * Handle mousedown/touchstart on down button.\n   * @private\n   */\n  _handleDownMouseDown(e) {\n    e.preventDefault();\n    this.downOnce();\n    this.startDownSpin();\n  }\n\n  /**\n   * Handle mouseup/touchend/mouseleave to stop spinning.\n   * @private\n   */\n  _handleMouseUp(e) {\n    this.stopSpin();\n  }\n\n  /**\n   * Handle keydown events on up button.\n   * @private\n   */\n  _handleUpKeyDown(e) {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      e.preventDefault();\n      this.upOnce();\n      this.startUpSpin();\n    }\n  }\n\n  /**\n   * Handle keyup events on up button.\n   * @private\n   */\n  _handleUpKeyUp(e) {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle keydown events on down button.\n   * @private\n   */\n  _handleDownKeyDown(e) {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      e.preventDefault();\n      this.downOnce();\n      this.startDownSpin();\n    }\n  }\n\n  /**\n   * Handle keyup events on down button.\n   * @private\n   */\n  _handleDownKeyUp(e) {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Intercept change events to prevent wrong values from propagating.\n   * @private\n   */\n  _handleInputChange(e) {\n    const currentValue = this.getValue();\n    const wouldBeSanitized = this._applyConstraints(currentValue);\n\n    if (isFinite(currentValue) && currentValue !== wouldBeSanitized) {\n      // This change event has wrong value - prevent it from propagating\n      e.stopImmediatePropagation();\n      // Don't sanitize here - blur handler will do it with correct change event\n    }\n    // If values match, let the change event through normally\n  }\n\n  /**\n   * Handle blur events on the input element for sanitization.\n   * @private\n   */\n  _handleInputBlur(e) {\n    this._checkValue(true);\n  }\n\n  /**\n   * Handle keydown events on the input element.\n   * @private\n   */\n  _handleKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowUp':\n        e.preventDefault();\n        this.upOnce();\n        this.startUpSpin();\n        break;\n      case 'ArrowDown':\n        e.preventDefault();\n        this.downOnce();\n        this.startDownSpin();\n        break;\n      case 'Enter':\n        this._checkValue(false);\n        break;\n    }\n  }\n\n  /**\n   * Handle keyup events on the input element.\n   * @private\n   */\n  _handleKeyUp(e) {\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle wheel events on the input element.\n   * @private\n   */\n  _handleWheel(e) {\n    if (!this.settings.mousewheel) {\n      return;\n    }\n\n    if (document.activeElement === this.input) {\n      e.preventDefault();\n      if (e.deltaY < 0) {\n        this.upOnce();\n      } else if (e.deltaY > 0) {\n        this.downOnce();\n      }\n    }\n  }\n\n  /**\n   * Set up mutation observer to watch for disabled/readonly attribute changes\n   * @private\n   */\n  _setupMutationObserver() {\n    if (typeof MutationObserver !== 'undefined') {\n      this._mutationObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (mutation.type === 'attributes') {\n            if (mutation.attributeName === 'disabled' || mutation.attributeName === 'readonly') {\n              this._updateButtonDisabledState();\n            } else if (mutation.attributeName === 'min' || mutation.attributeName === 'max' || mutation.attributeName === 'step') {\n              this._syncSettingsFromNativeAttributes();\n            }\n          }\n        });\n      });\n\n      this._mutationObserver.observe(this.input, {\n        attributes: true,\n        attributeFilter: ['disabled', 'readonly', 'min', 'max', 'step']\n      });\n    }\n  }\n\n  /**\n   * Update button disabled state based on input disabled/readonly state\n   * @private\n   */\n  _updateButtonDisabledState() {\n    const isDisabled = this.input.disabled || this.input.hasAttribute('readonly');\n\n    if (this._upButton) {\n      this._upButton.disabled = isDisabled;\n    }\n    if (this._downButton) {\n      this._downButton.disabled = isDisabled;\n    }\n\n    if (isDisabled) {\n      this.stopSpin();\n    }\n  }\n}\n\n/**\n * @typedef {Object} TouchSpinCorePublicAPI\n * @property {() => void} upOnce\n * @property {() => void} downOnce\n * @property {() => void} startUpSpin\n * @property {() => void} startDownSpin\n * @property {() => void} stopSpin\n * @property {(opts: Partial<TouchSpinCoreOptions>) => void} updateSettings\n * @property {() => number} getValue\n * @property {(v: number|string) => void} setValue\n * @property {() => void} destroy\n * @property {(event: string, handler: (detail?: any) => void) => () => void} on\n * @property {(event: string, handler?: (detail?: any) => void) => void} off\n * @property {() => void} initDOMEventHandling\n * @property {(callback: Function) => () => void} registerTeardown\n */\n\n/**\n * Initialize TouchSpin on an input element or get existing instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function TouchSpin(inputEl, opts) {\n  // Check if element is an input (graceful handling for public API)\n  if (!inputEl || inputEl.nodeName !== 'INPUT') {\n    console.warn('Must be an input.');\n    return null;\n  }\n\n  // If options provided, initialize/reinitialize\n  if (opts !== undefined) {\n    // Destroy existing instance if it exists (destroy() removes itself from element)\n    if (inputEl[INSTANCE_KEY]) {\n      console.warn('TouchSpin: Destroying existing instance and reinitializing. Consider using updateSettings() instead.');\n      inputEl[INSTANCE_KEY].destroy();\n    }\n\n    // Create new instance and store on element\n    const core = new TouchSpinCore(inputEl, opts);\n    inputEl[INSTANCE_KEY] = core;\n\n    // Initialize DOM event handling\n    core.initDOMEventHandling();\n\n    return core.toPublicApi();\n  }\n\n  // No options - return existing instance or create with defaults\n  if (!inputEl[INSTANCE_KEY]) {\n    const core = new TouchSpinCore(inputEl, {});\n    inputEl[INSTANCE_KEY] = core;\n    core.initDOMEventHandling();\n    return core.toPublicApi();\n  }\n\n  return inputEl[INSTANCE_KEY].toPublicApi();\n}\n\n/**\n * Get existing TouchSpin instance from input element (without creating one).\n * @param {HTMLInputElement} inputEl\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function getTouchSpin(inputEl) {\n  return inputEl[INSTANCE_KEY] ? inputEl[INSTANCE_KEY].toPublicApi() : null;\n}\n\n/**\n * Create and return a plain public API bound to a new core instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI}\n * @deprecated Use TouchSpin() instead\n */\nexport function createPublicApi(inputEl, opts) {\n  return TouchSpin(inputEl, opts);\n}\n\n/** Event name constants for wrappers to map/bridge. */\nexport const CORE_EVENTS = Object.freeze({\n  MIN: 'min',\n  MAX: 'max',\n  START_SPIN: 'startspin',\n  START_UP: 'startupspin',\n  START_DOWN: 'startdownspin',\n  STOP_SPIN: 'stopspin',\n  STOP_UP: 'stopupspin',\n  STOP_DOWN: 'stopdownspin',\n});\n\n/**\n * Convenience helper to attach core to an input element.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCore}\n */\nexport function attach(inputEl, opts) {\n  return new TouchSpinCore(inputEl, opts);\n}\n\nexport default TouchSpinCore;\n\n// Note: AbstractRenderer is not exported as it's only needed by renderer implementations\n// Renderers should import it directly: import AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n","/**\n * AbstractRenderer - Base class for TouchSpin renderers\n * Part of @touchspin/core package to avoid duplication across renderer packages\n * \n * @example\n * class CustomRenderer extends AbstractRenderer {\n *   init() {\n *     this.wrapper = this.buildUI();\n *     const upBtn = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n *     const downBtn = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n *     this.core.attachUpEvents(upBtn);\n *     this.core.attachDownEvents(downBtn);\n *     this.core.observeSetting('prefix', (value) => this.updatePrefix(value));\n *   }\n * }\n */\nclass AbstractRenderer {\n  /**\n   * @param {HTMLInputElement} inputEl - The input element to render around\n   * @param {Object} settings - TouchSpin settings (read-only)\n   * @param {Object} core - TouchSpin core instance for event delegation\n   */\n  constructor(inputEl, settings, core) {\n    // New renderer architecture\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n    /** @type {Object} */\n    this.settings = settings; // Read-only access to settings\n    /** @type {Object} */\n    this.core = core; // Reference to core for calling attachment methods\n    /** @type {HTMLElement|null} */\n    this.wrapper = null; // Set by subclasses during init()\n    \n    // Legacy compatibility (transitional)\n    this.$ = typeof $ !== 'undefined' ? $ : null;\n    this.originalinput = this.$ ? this.$(inputEl) : null;\n    this.container = null;\n    this.elements = null;\n  }\n\n  /**\n   * Initialize the renderer - build DOM structure and attach events\n   * Must be implemented by subclasses\n   * @abstract\n   */\n  init() { \n    throw new Error('init() must be implemented by renderer'); \n  }\n  \n  /**\n   * Cleanup renderer - remove injected elements and restore original state\n   * Default implementation removes all injected elements\n   * Subclasses can override for custom teardown\n   */\n  teardown() {\n    // Default implementation - remove all injected elements\n    this.removeInjectedElements();\n    // Subclasses can override for custom teardown\n  }\n  \n  /**\n   * Utility method to remove all injected TouchSpin elements\n   * Handles both regular wrappers and advanced input groups\n   * Called automatically by teardown()\n   */\n  removeInjectedElements() {\n    // Find and remove all elements with data-touchspin-injected attribute\n    if (this.wrapper) {\n      const injected = this.wrapper.querySelectorAll('[data-touchspin-injected]');\n      injected.forEach(el => el.remove());\n      \n      // If wrapper itself was injected and is not the original parent\n      if (this.wrapper.hasAttribute('data-touchspin-injected') && this.wrapper.parentElement) {\n        const injectedType = this.wrapper.getAttribute('data-touchspin-injected');\n        \n        if (injectedType === 'wrapper-advanced') {\n          // For advanced input groups, just remove the TouchSpin classes and attribute\n          // but keep the original input-group structure intact\n          this.wrapper.classList.remove('bootstrap-touchspin');\n          this.wrapper.removeAttribute('data-touchspin-injected');\n        } else {\n          // For regular wrappers, unwrap the input element\n          const parent = this.wrapper.parentElement;\n          parent.insertBefore(this.input, this.wrapper);\n          this.wrapper.remove();\n        }\n      }\n    }\n    \n    // Also find any injected elements that might be siblings or elsewhere\n    const allInjected = document.querySelectorAll('[data-touchspin-injected]');\n    allInjected.forEach(el => {\n      // Only remove if it's related to this input (check if input is descendant or sibling)\n      if (el.contains(this.input) || \n          (el.parentElement && el.parentElement.contains(this.input)) ||\n          this.input.parentElement?.contains(el)) {\n        // Don't remove the input itself\n        if (el !== this.input) {\n          el.remove();\n        }\n      }\n    });\n  }\n\n  // Legacy methods (transitional - for backward compatibility)\n  getFrameworkId() { throw new Error('getFrameworkId() must be implemented by subclasses'); }\n  buildAdvancedInputGroup(parentelement) { throw new Error('buildAdvancedInputGroup() must be implemented by subclasses'); }\n  buildInputGroup() { throw new Error('buildInputGroup() must be implemented by subclasses'); }\n  buildVerticalButtons() { throw new Error('buildVerticalButtons() must be implemented by subclasses'); }\n\n  initElements(container) {\n    this.container = container;\n    let downButtons = this._findElements(container, 'down');\n    let upButtons = this._findElements(container, 'up');\n    if (downButtons.length === 0 || upButtons.length === 0) {\n      const verticalContainer = this._findElements(container.parent(), 'vertical-wrapper');\n      if (verticalContainer.length > 0) {\n        downButtons = this._findElements(verticalContainer, 'down');\n        upButtons = this._findElements(verticalContainer, 'up');\n      }\n    }\n    \n    // Ensure input element has data-touchspin-injected=\"input\" for core event targeting\n    this.originalinput.attr('data-touchspin-injected', 'input');\n    \n    this.elements = {\n      down: downButtons,\n      up: upButtons,\n      input: this.$('input', container),\n      prefix: this._findElements(container, 'prefix').addClass(this.settings.prefix_extraclass),\n      postfix: this._findElements(container, 'postfix').addClass(this.settings.postfix_extraclass)\n    };\n    return this.elements;\n  }\n\n  _findElements(container, role) { return this.$(`[data-touchspin-injected=\"${role}\"]`, container); }\n\n  hideEmptyPrefixPostfix() {\n    const detached = {};\n    if (this.settings.prefix === '') detached._detached_prefix = this.elements.prefix.detach();\n    if (this.settings.postfix === '') detached._detached_postfix = this.elements.postfix.detach();\n    return detached;\n  }\n\n  updatePrefixPostfix(newsettings, detached) { throw new Error('updatePrefixPostfix() must be implemented by subclasses'); }\n\n  getWrapperTestId() {\n    // Modern vanilla JS version\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-wrapper\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for up button\n   * @returns {string} Testid attribute or empty string\n   */\n  getUpButtonTestId() {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-up\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for down button\n   * @returns {string} Testid attribute or empty string\n   */\n  getDownButtonTestId() {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-down\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for prefix element\n   * @returns {string} Testid attribute or empty string\n   */\n  getPrefixTestId() {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-prefix\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for postfix element\n   * @returns {string} Testid attribute or empty string\n   */\n  getPostfixTestId() {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-postfix\"`;\n    return '';\n  }\n}\n\nexport default AbstractRenderer;","/**\n * Bootstrap 5 Renderer - New Architecture\n * Builds Bootstrap 5 UI elements around TouchSpin input\n */\nimport AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n\nclass Bootstrap5Renderer extends AbstractRenderer {\n\n  init() {\n    // Initialize internal element references\n    this.prefixEl = null;\n    this.postfixEl = null;\n    \n    // Add form-control class if not present (Bootstrap requirement)\n    if (!this.input.classList.contains('form-control')) {\n      this.input.classList.add('form-control');\n      this._formControlAdded = true; // Track if we added it\n    }\n    \n    // 1. Build and inject DOM structure around input\n    this.wrapper = this.buildInputGroup();\n    \n    // 2. Find created buttons and store prefix/postfix references\n    const upButton = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n    const downButton = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n    this.prefixEl = this.wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n    this.postfixEl = this.wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n    \n    // 3. Tell core to attach its event handlers\n    this.core.attachUpEvents(upButton);\n    this.core.attachDownEvents(downButton);\n    \n    // 4. Register for setting changes we care about\n    this.core.observeSetting('prefix', (newValue) => this.updatePrefix(newValue));\n    this.core.observeSetting('postfix', (newValue) => this.updatePostfix(newValue));\n    this.core.observeSetting('buttonup_class', (newValue) => this.updateButtonClass('up', newValue));\n    this.core.observeSetting('buttondown_class', (newValue) => this.updateButtonClass('down', newValue));\n    this.core.observeSetting('verticalupclass', (newValue) => this.updateVerticalButtonClass('up', newValue));\n    this.core.observeSetting('verticaldownclass', (newValue) => this.updateVerticalButtonClass('down', newValue));\n    this.core.observeSetting('verticalup', (newValue) => this.updateVerticalButtonText('up', newValue));\n    this.core.observeSetting('verticaldown', (newValue) => this.updateVerticalButtonText('down', newValue));\n    this.core.observeSetting('buttonup_txt', (newValue) => this.updateButtonText('up', newValue));\n    this.core.observeSetting('buttondown_txt', (newValue) => this.updateButtonText('down', newValue));\n    this.core.observeSetting('prefix_extraclass', (newValue) => this.updatePrefixClasses());\n    this.core.observeSetting('postfix_extraclass', (newValue) => this.updatePostfixClasses());\n  }\n\n  teardown() {\n    // Remove form-control class only if we added it\n    if (this._formControlAdded) {\n      this.input.classList.remove('form-control');\n      this._formControlAdded = false;\n    }\n    \n    // Call parent teardown to handle DOM cleanup\n    super.teardown();\n  }\n\n  buildInputGroup() {\n    // Check if input is already inside an input-group\n    const existingInputGroup = this.input.closest('.input-group');\n    \n    if (existingInputGroup) {\n      return this.buildAdvancedInputGroup(existingInputGroup);\n    } else {\n      return this.buildBasicInputGroup();\n    }\n  }\n  \n  buildBasicInputGroup() {\n    const inputGroupSize = this._detectInputGroupSize();\n    const testidAttr = this.getWrapperTestId();\n    \n    let html;\n    if (this.settings.verticalbuttons) {\n      html = `\n        <div class=\"input-group ${inputGroupSize} bootstrap-touchspin\" data-touchspin-injected=\"wrapper\"${testidAttr}>\n          <span class=\"input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}\" data-touchspin-injected=\"prefix\"${this.getPrefixTestId()}>${this.settings.prefix || ''}</span>\n          <span class=\"input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}\" data-touchspin-injected=\"postfix\"${this.getPostfixTestId()}>${this.settings.postfix || ''}</span>\n          ${this.buildVerticalButtons()}\n        </div>\n      `;\n    } else {\n      html = `\n        <div class=\"input-group ${inputGroupSize} bootstrap-touchspin\" data-touchspin-injected=\"wrapper\"${testidAttr}>\n          <span class=\"input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}\" data-touchspin-injected=\"prefix\"${this.getPrefixTestId()}>${this.settings.prefix || ''}</span>\n          <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttondown_class || 'btn btn-outline-secondary'} bootstrap-touchspin-down\" data-touchspin-injected=\"down\"${this.getDownButtonTestId()} type=\"button\" aria-label=\"Decrease value\">${this.settings.buttondown_txt || 'âˆ’'}</button>\n          <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttonup_class || 'btn btn-outline-secondary'} bootstrap-touchspin-up\" data-touchspin-injected=\"up\"${this.getUpButtonTestId()} type=\"button\" aria-label=\"Increase value\">${this.settings.buttonup_txt || '+'}</button>\n          <span class=\"input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}\" data-touchspin-injected=\"postfix\"${this.getPostfixTestId()}>${this.settings.postfix || ''}</span>\n        </div>\n      `;\n    }\n    \n    // Create wrapper and wrap the input\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = html.trim();\n    const wrapper = tempDiv.firstChild;\n    \n    // Insert wrapper and move input into it\n    this.input.parentElement.insertBefore(wrapper, this.input);\n    \n    // Find the position to insert input\n    if (this.settings.verticalbuttons) {\n      // For vertical buttons, insert after prefix\n      const prefixEl = wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n      wrapper.insertBefore(this.input, prefixEl.nextSibling);\n    } else {\n      // For horizontal buttons, insert after down button, before up button\n      const upButton = wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n      wrapper.insertBefore(this.input, upButton);\n    }\n    \n    // Hide empty prefix/postfix (pass wrapper directly since this.wrapper isn't set yet)\n    this.hideEmptyPrefixPostfix(wrapper);\n    \n    return wrapper;\n  }\n  \n  buildAdvancedInputGroup(existingInputGroup) {\n    // Add bootstrap-touchspin class to existing input-group\n    existingInputGroup.classList.add('bootstrap-touchspin');\n    existingInputGroup.setAttribute('data-touchspin-injected', 'wrapper-advanced');\n    \n    // Add testid if wrapper doesn't already have one and input has one\n    const inputTestId = this.input.getAttribute('data-testid');\n    const existingWrapperTestId = existingInputGroup.getAttribute('data-testid');\n    if (!existingWrapperTestId && inputTestId) {\n      existingInputGroup.setAttribute('data-testid', `${inputTestId}-wrapper`);\n    }\n    \n    // Create elements based on vertical or horizontal layout\n    let elementsHtml;\n    if (this.settings.verticalbuttons) {\n      elementsHtml = `\n        <span class=\"input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}\" data-touchspin-injected=\"prefix\"${this.getPrefixTestId()}>${this.settings.prefix || ''}</span>\n        <span class=\"input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}\" data-touchspin-injected=\"postfix\"${this.getPostfixTestId()}>${this.settings.postfix || ''}</span>\n        ${this.buildVerticalButtons()}\n      `;\n    } else {\n      elementsHtml = `\n        <span class=\"input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}\" data-touchspin-injected=\"prefix\"${this.getPrefixTestId()}>${this.settings.prefix || ''}</span>\n        <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttondown_class || 'btn btn-outline-secondary'} bootstrap-touchspin-down\" data-touchspin-injected=\"down\"${this.getDownButtonTestId()} type=\"button\" aria-label=\"Decrease value\">${this.settings.buttondown_txt || 'âˆ’'}</button>\n        <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttonup_class || 'btn btn-outline-secondary'} bootstrap-touchspin-up\" data-touchspin-injected=\"up\"${this.getUpButtonTestId()} type=\"button\" aria-label=\"Increase value\">${this.settings.buttonup_txt || '+'}</button>\n        <span class=\"input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}\" data-touchspin-injected=\"postfix\"${this.getPostfixTestId()}>${this.settings.postfix || ''}</span>\n      `;\n    }\n    \n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = elementsHtml;\n    \n    // Insert prefix before the input\n    const prefixEl = tempDiv.querySelector('[data-touchspin-injected=\"prefix\"]');\n    existingInputGroup.insertBefore(prefixEl, this.input);\n    \n    // Declare postfixEl at function scope\n    let postfixEl;\n    \n    if (this.settings.verticalbuttons) {\n      // For vertical buttons, insert vertical wrapper after input\n      const verticalWrapper = tempDiv.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n      existingInputGroup.insertBefore(verticalWrapper, this.input.nextSibling);\n      \n      // Insert postfix after vertical wrapper\n      postfixEl = tempDiv.querySelector('[data-touchspin-injected=\"postfix\"]');\n      existingInputGroup.insertBefore(postfixEl, verticalWrapper.nextSibling);\n    } else {\n      // For horizontal buttons, insert them around the input\n      const downButton = tempDiv.querySelector('[data-touchspin-injected=\"down\"]');\n      existingInputGroup.insertBefore(downButton, this.input);\n      \n      const upButton = tempDiv.querySelector('[data-touchspin-injected=\"up\"]');\n      existingInputGroup.insertBefore(upButton, this.input.nextSibling);\n      \n      // Insert postfix after up button\n      postfixEl = tempDiv.querySelector('[data-touchspin-injected=\"postfix\"]');\n      existingInputGroup.insertBefore(postfixEl, upButton.nextSibling);\n    }\n    \n    // Store internal references for advanced mode too\n    this.prefixEl = prefixEl;\n    this.postfixEl = postfixEl;\n    \n    // Hide empty prefix/postfix\n    this.hideEmptyPrefixPostfix(existingInputGroup);\n    \n    return existingInputGroup;\n  }\n\n  _detectInputGroupSize() {\n    const classList = this.input.className;\n    if (classList.includes('form-control-sm')) {\n      return 'input-group-sm';\n    } else if (classList.includes('form-control-lg')) {\n      return 'input-group-lg';\n    }\n    return '';\n  }\n\n  hideEmptyPrefixPostfix(wrapper = this.wrapper) {\n    // Use internal references if available, otherwise query from wrapper\n    const prefixEl = this.prefixEl || wrapper.querySelector('[data-touchspin-injected=\"prefix\"]');\n    const postfixEl = this.postfixEl || wrapper.querySelector('[data-touchspin-injected=\"postfix\"]');\n    \n    if (prefixEl && (!this.settings.prefix || this.settings.prefix === '')) {\n      prefixEl.style.display = 'none';\n    }\n    if (postfixEl && (!this.settings.postfix || this.settings.postfix === '')) {\n      postfixEl.style.display = 'none';\n    }\n  }\n\n  updatePrefix(value) {\n    // Use internal reference\n    const prefixEl = this.prefixEl;\n    \n    if (value && value !== '') {\n      if (prefixEl) {\n        prefixEl.textContent = value;\n        prefixEl.style.display = '';\n        // Update classes in case prefix_extraclass changed\n        prefixEl.className = `input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}`.trim();\n      }\n    } else if (prefixEl) {\n      // Hide element if value is empty but keep it in DOM\n      prefixEl.style.display = 'none';\n    }\n  }\n  \n  updatePostfix(value) {\n    // Use internal reference\n    const postfixEl = this.postfixEl;\n    \n    if (value && value !== '') {\n      if (postfixEl) {\n        postfixEl.textContent = value;\n        postfixEl.style.display = '';\n        // Update classes in case postfix_extraclass changed\n        postfixEl.className = `input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}`.trim();\n      }\n    } else if (postfixEl) {\n      // Hide element if value is empty but keep it in DOM\n      postfixEl.style.display = 'none';\n    }\n  }\n  \n  updateButtonClass(type, className) {\n    const button = this.wrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n    if (button) {\n      button.className = `${className || 'btn btn-outline-secondary'} bootstrap-touchspin-${type}`;\n    }\n  }\n\n  buildVerticalButtons() {\n    // Bootstrap 5: Return complete wrapper since there's no outer wrapper in the calling code\n    return `\n      <span class=\"input-group-text bootstrap-touchspin-vertical-button-wrapper\" data-touchspin-injected=\"vertical-wrapper\">\n        <span class=\"input-group-btn-vertical\">\n          <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttonup_class || 'btn btn-outline-secondary'} ${this.settings.verticalupclass || 'btn btn-outline-secondary'} bootstrap-touchspin-up\" data-touchspin-injected=\"up\"${this.getUpButtonTestId()} type=\"button\" aria-label=\"Increase value\">${this.settings.verticalup || '+'}</button>\n          <button tabindex=\"${this.settings.focusablebuttons ? '0' : '-1'}\" class=\"${this.settings.buttondown_class || 'btn btn-outline-secondary'} ${this.settings.verticaldownclass || 'btn btn-outline-secondary'} bootstrap-touchspin-down\" data-touchspin-injected=\"down\"${this.getDownButtonTestId()} type=\"button\" aria-label=\"Decrease value\">${this.settings.verticaldown || 'âˆ’'}</button>\n        </span>\n      </span>\n    `;\n  }\n\n  updateVerticalButtonClass(type, className) {\n    const verticalWrapper = this.wrapper.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n    if (verticalWrapper) {\n      const button = verticalWrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n      if (button) {\n        // Update the vertical-specific class while preserving base classes\n        const baseClasses = this.settings.buttonup_class || this.settings.buttondown_class || 'btn btn-outline-secondary';\n        button.className = `${baseClasses} ${className || 'btn btn-outline-secondary'} bootstrap-touchspin-${type}`;\n      }\n    }\n  }\n\n  updateVerticalButtonText(type, text) {\n    const verticalWrapper = this.wrapper.querySelector('[data-touchspin-injected=\"vertical-wrapper\"]');\n    if (verticalWrapper) {\n      const button = verticalWrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n      if (button) {\n        button.textContent = text || (type === 'up' ? '+' : 'âˆ’');\n      }\n    }\n  }\n\n  updateButtonText(type, text) {\n    const button = this.wrapper.querySelector(`[data-touchspin-injected=\"${type}\"]`);\n    if (button) {\n      button.textContent = text || (type === 'up' ? '+' : 'âˆ’');\n    }\n  }\n\n  updatePrefixClasses() {\n    const prefixEl = this.prefixEl;\n    if (prefixEl) {\n      prefixEl.className = `input-group-text bootstrap-touchspin-prefix ${this.settings.prefix_extraclass || ''}`.trim();\n    }\n  }\n\n  updatePostfixClasses() {\n    const postfixEl = this.postfixEl;\n    if (postfixEl) {\n      postfixEl.className = `input-group-text bootstrap-touchspin-postfix ${this.settings.postfix_extraclass || ''}`.trim();\n    }\n  }\n}\n\nexport default Bootstrap5Renderer;\n","// Standalone Bootstrap 5 build entry point\nimport { TouchSpin as CoreTouchSpin, TouchSpinCore, getTouchSpin } from '../../packages/core/src/index.js';\nimport Bootstrap5Renderer from '../../packages/renderers/bootstrap5/src/Bootstrap5Renderer.js';\n\n// Create a wrapper that automatically sets the Bootstrap 5 renderer\nfunction TouchSpin(element, options = {}) {\n  if (!(element instanceof Element)) {\n    throw new TypeError('TouchSpin expects an HTMLElement');\n  }\n  \n  // Set the baked-in renderer for this build\n  options.renderer = options.renderer || Bootstrap5Renderer;\n  \n  // Use the core TouchSpin function which properly handles initDOMEventHandling\n  return CoreTouchSpin(element, options);\n}\n\n// Expose additional API functions\nTouchSpin.get = getTouchSpin;\nTouchSpin.destroy = (element) => {\n  const instance = getTouchSpin(element);\n  if (instance && instance.destroy) {\n    instance.destroy();\n    return true;\n  }\n  return false;\n};\n\n// For standalone builds, ensure globals are properly exposed\nif (typeof window !== 'undefined') {\n  window.TouchSpin = TouchSpin;\n  window.TouchSpinCore = TouchSpinCore;\n  window.getTouchSpin = getTouchSpin;\n  window.Bootstrap5Renderer = Bootstrap5Renderer;\n}\n\n// Export for module systems only (no default export)\nexport { TouchSpin, TouchSpinCore, getTouchSpin, Bootstrap5Renderer };"],"names":["DEFAULTS","min","max","initval","replacementval","firstclickvalueifempty","step","decimals","forcestepdivisibility","stepinterval","stepintervaldelay","verticalbuttons","verticalup","verticaldown","verticalupclass","verticaldownclass","focusablebuttons","prefix","postfix","prefix_extraclass","postfix_extraclass","booster","boostat","maxboostedstep","mousewheel","buttonup_class","buttondown_class","buttonup_txt","buttondown_txt","callback_before_calculation","v","callback_after_calculation","INSTANCE_KEY","TouchSpinCore","_createClass","inputEl","opts","arguments","length","undefined","_classCallCheck","nodeName","Error","this","input","dataAttrs","_parseDataAttributes","settings","Object","assign","renderer","globalThis","TouchSpinDefaultRenderer","console","warn","spinning","spincount","direction","_events","Map","_teardownCallbacks","_settingObservers","_spinDelayTimeout","_spinIntervalTimer","_upButton","_downButton","_wrapper","_handleUpMouseDown","bind","_handleDownMouseDown","_handleMouseUp","_handleUpKeyDown","_handleUpKeyUp","_handleDownKeyDown","_handleDownKeyUp","_handleInputChange","_handleInputBlur","_handleKeyDown","_handleKeyUp","_handleWheel","_initializeInput","init","_setupMutationObserver","key","value","_updateAriaAttributes","_syncNativeAttributes","_checkValue","parsed","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","optionName","attrName","fullAttrName","concat","hasAttribute","rawValue","getAttribute","_coerceAttributeValue","_i2","_arr","nativeAttr","includes","num","parseFloat","isNaN","disabled","getValue","next","_nextValue","emit","stopSpin","_setDisplay","_startSpin","_clearSpinTimers","_this","oldSettings","_objectSpread","newSettings","Number","_alignToStep","keys","forEach","observers","get","callback","error","raw","NaN","before","String","isFinite","adjusted","_applyConstraints","_findDOMElements","_attachDOMEventListeners","_this2","push","index","indexOf","splice","teardown","_detachDOMEventListeners","clear","_mutationObserver","disconnect","upOnce","downOnce","startUpSpin","startDownSpin","updateSettings","setValue","destroy","on","off","initDOMEventHandling","registerTeardown","attachUpEvents","attachDownEvents","observeSetting","element","addEventListener","passive","_updateButtonDisabledState","settingName","has","set","Set","add","delete","event","handler","_this3","size","detail","_i3","_arr2","_toConsumableArray","fn","_","dir","_this4","delay","interval","setTimeout","setInterval","_spinStep","clearTimeout","_unused","clearInterval","_unused2","current","_valueIfIsNaN","base","Math","parseInt","stepUnclamped","pow","floor","mbs","round","aligned","_forcestepdivisibility","clamped","boosted","cap","val","out","mode","dec","ceil","toFixed","k","s","V","S","r","mayTriggerChange","_this$input$value","prev","_formatDisplay","dispatchEvent","Event","bubbles","el","setAttribute","removeAttribute","nativeMin","nativeMax","nativeStep","needsUpdate","parsedMin","minNum","parsedMax","maxNum","parsedStep","stepNum","wrapper","parentElement","document","removeEventListener","e","preventDefault","keyCode","currentValue","wouldBeSanitized","stopImmediatePropagation","activeElement","deltaY","_this5","MutationObserver","mutations","mutation","type","attributeName","_syncSettingsFromNativeAttributes","observe","attributes","attributeFilter","isDisabled","getTouchSpin","toPublicApi","Bootstrap5Renderer","_AbstractRenderer","_callSuper","_inherits","prefixEl","postfixEl","classList","contains","_formControlAdded","buildInputGroup","upButton","querySelector","downButton","core","newValue","updatePrefix","updatePostfix","updateButtonClass","updateVerticalButtonClass","updateVerticalButtonText","updateButtonText","updatePrefixClasses","updatePostfixClasses","remove","existingInputGroup","closest","buildAdvancedInputGroup","buildBasicInputGroup","html","inputGroupSize","_detectInputGroupSize","testidAttr","getWrapperTestId","getPrefixTestId","getPostfixTestId","buildVerticalButtons","getDownButtonTestId","getUpButtonTestId","tempDiv","createElement","innerHTML","trim","firstChild","insertBefore","nextSibling","hideEmptyPrefixPostfix","elementsHtml","inputTestId","verticalWrapper","className","style","display","textContent","button","baseClasses","text","AbstractRenderer","$","originalinput","container","elements","removeInjectedElements","querySelectorAll","_this$input$parentEle","parentelement","downButtons","_findElements","upButtons","verticalContainer","parent","attr","down","up","addClass","role","detached","_detached_prefix","detach","_detached_postfix","newsettings","TouchSpin","options","Element","TypeError","CoreTouchSpin","instance","window"],"mappings":"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"}