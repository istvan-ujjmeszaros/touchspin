{
  "modules": [
    {
      "id": "legacy-plugin",
      "name": "Legacy jQuery Plugin",
      "file": "src/jquery.bootstrap-touchspin.js",
      "type": "jquery-plugin",
      "publicApi": [
        "TouchSpin(options|command)",
        "commands: destroy|uponce|downonce|startupspin|startdownspin|stopspin|updatesettings|get|getvalue|set|setvalue"
      ]
    },
    {
      "id": "core",
      "name": "Core",
      "file": "packages/core/src/index.js",
      "type": "library",
      "classes": [
        {
          "name": "TouchSpinCore",
          "methods": [
            "constructor(inputEl, opts)",
            "getValue()",
            "setValue(v)",
            "upOnce()",
            "downOnce()",
            "startUpSpin()",
            "startDownSpin()",
            "stopSpin()",
            "updateSettings(partial)",
            "initDOMEventHandling()",
            "destroy()",
            "on(event, handler)",
            "off(event, handler?)",
            "observeSetting(name, cb)",
            "attachUpEvents(element)",
            "attachDownEvents(element)"
          ],
          "internal": [
            "_sanitizeSettings()",
            "_applyConstraints(v)",
            "_forcestepdivisibility(v)",
            "_nextValue(dir, current)",
            "_getBoostedStep()",
            "_setDisplay(num, mayTriggerChange)",
            "_updateAriaAttributes()",
            "_syncNativeAttributes()",
            "_syncSettingsFromNativeAttributes()",
            "_startSpin(dir)",
            "_clearSpinTimers()",
            "_findDOMElements()",
            "_setupMutationObserver()"
          ]
        }
      ],
      "exports": ["TouchSpin", "getTouchSpin", "CORE_EVENTS"]
    },
    {
      "id": "wrapper",
      "name": "jQuery Wrapper",
      "file": "packages/jquery-plugin/src/index.js",
      "type": "adapter",
      "publicApi": [
        "installJqueryTouchSpin($)",
        "$(...).TouchSpin(options|command)"
      ],
      "bridges": {
        "commands": {
          "destroy": "api.destroy()",
          "uponce": "api.upOnce()",
          "downonce": "api.downOnce()",
          "startupspin": "api.startUpSpin()",
          "startdownspin": "api.startDownSpin()",
          "stopspin": "api.stopSpin()",
          "updatesettings": "api.updateSettings(partial)",
          "get|getvalue": "api.getValue() (or raw value if no instance)",
          "set|setvalue": "api.setValue(v)"
        },
        "events": {
          "core:min": "touchspin.on.min",
          "core:max": "touchspin.on.max",
          "core:startspin": "touchspin.on.startspin",
          "core:startupspin": "touchspin.on.startupspin",
          "core:startdownspin": "touchspin.on.startdownspin",
          "core:stopspin": "touchspin.on.stopspin",
          "core:stopupspin": "touchspin.on.stopupspin",
          "core:stopdownspin": "touchspin.on.stopdownspin"
        }
      }
    },
    {
      "id": "renderers",
      "name": "Renderers",
      "type": "family",
      "members": [
        {
          "id": "bootstrap3",
          "file": "packages/renderers/bootstrap3/src/Bootstrap3Renderer.js"
        },
        {
          "id": "bootstrap4",
          "file": "packages/renderers/bootstrap4/src/Bootstrap4Renderer.js"
        },
        {
          "id": "bootstrap5",
          "file": "packages/renderers/bootstrap5/src/Bootstrap5Renderer.js"
        },
        {
          "id": "tailwind",
          "file": "packages/renderers/tailwind/src/TailwindRenderer.js"
        }
      ],
      "rendererContract": {
        "init()": "Build DOM around input, set wrapper + prefix/postfix + buttons",
        "teardown()": "Remove injected elements / unwrap",
        "callCore": ["core.attachUpEvents(buttonUp)", "core.attachDownEvents(buttonDown)", "core.observeSetting(name, cb)"]
      },
      "testids": ["{input}-wrapper", "{input}-up", "{input}-down", "{input}-prefix", "{input}-postfix"]
    }
  ],
  "relationships": [
    {"from": "wrapper", "to": "core", "type": "forwards-commands"},
    {"from": "wrapper", "to": "core", "type": "bridges-events"},
    {"from": "core", "to": "renderers", "type": "renderer-init-and-event-attachment"},
    {"from": "legacy-plugin", "to": "renderers", "type": "direct-renderer-use"}
  ],
  "events": [
    "min", "max", "startspin", "startupspin", "startdownspin", "stopspin", "stopupspin", "stopdownspin"
  ],
  "valueFlow": {
    "formatting": ["callback_before_calculation", "decimals", "callback_after_calculation"],
    "constraints": ["min", "max", "step", "forcestepdivisibility"],
    "booster": ["booster", "boostat", "maxboostedstep"]
  }
}

