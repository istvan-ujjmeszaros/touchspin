name: CI Tests
run-name: Run Bootstrap TouchSpin Tests

on:
  push:
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
          # Don't use built-in cache - it doesn't work with Yarn 4/corepack

      - name: Enable corepack (Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.9.4 --activate
          yarn --version

      # Cache Yarn dependencies (.yarn/cache directory for PnP)
      - name: Get yarn cache directory
        id: yarn-cache-dir
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            node_modules
          key: ${{ runner.os }}-yarn-nm-${{ hashFiles('yarn.lock', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-nm-

      # Get Playwright version for precise cache key
      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('./package.json').devDependencies['@playwright/test']")" >> $GITHUB_OUTPUT

      # Cache Playwright browsers with version-specific key
      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-chromium
          restore-keys: |
            ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-
            ${{ runner.os }}-playwright-

      - name: Yarn install and prepare environment
        run: |
          # Replace PnP with node-modules for CI to avoid Vite issues
          cat > .yarnrc.yml << 'EOF'
          nodeLinker: node-modules
          EOF
          yarn install

      # Only install Playwright if not cached
      - name: Install Playwright browser
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install chromium

      # Install system dependencies separately (always needed even with cache)
      - name: Install Playwright system dependencies
        run: yarn playwright install-deps chromium

      # Cache build artifacts
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            packages/renderers/*/dist
          key: ${{ runner.os }}-build-${{ hashFiles('packages/**/src/**', 'tsconfig*.json', 'vite.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build test artifacts (devdist)
        run: yarn build:test

      - name: Assert devdist presence
        run: |
          test -f packages/core/devdist/index.js
          test -f packages/vanilla-renderer/devdist/VanillaRenderer.js
          test -f packages/renderers/bootstrap5/devdist/Bootstrap5Renderer.js

      - name: Guard - no src imports in tests
        run: yarn guard:no-src-in-tests

      - name: Run tests (Chromium)
        run: yarn test

      - name: Validate tarballs (dry-run pack)
        if: success()
        run: |
          yarn workspaces foreach -A -v exec npm pack --dry-run

      - name: Upload Playwright report on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results-${{ github.run_id }}-${{ github.run_attempt }}
          path: reports/
          retention-days: 7
          if-no-files-found: ignore

  build:
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'

      - name: Enable corepack (Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.9.4 --activate

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            node_modules
          key: ${{ runner.os }}-yarn-nm-${{ hashFiles('yarn.lock', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-nm-

      - name: Yarn install
        run: |
          cat > .yarnrc.yml << 'EOF'
          nodeLinker: node-modules
          EOF
          yarn install --immutable

      - name: Build publish artifacts (dist)
        run: yarn build