{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Framework-agnostic core for TouchSpin (TypeScript)\n */\n\nexport type ForceStepDivisibility = 'none' | 'floor' | 'round' | 'ceil';\n\nexport type TouchSpinCalcCallback = (value: string) => string;\n\n// Export event types\nexport { TouchSpinCallableEvent, TouchSpinEmittedEvent } from './events';\nexport type { TouchSpinUpdateSettingsData } from './events';\n\nimport type { Renderer, RendererConstructor } from './renderer';\ntype WithCoreElement = HTMLInputElement & { [INSTANCE_KEY]?: TouchSpinCore };\n\nexport interface TouchSpinCoreOptions {\n  min?: number | null;\n  max?: number | null;\n  firstclickvalueifempty?: number | null;\n  step?: number;\n  decimals?: number;\n  forcestepdivisibility?: ForceStepDivisibility;\n  stepinterval?: number;\n  stepintervaldelay?: number;\n  booster?: boolean;\n  boostat?: number;\n  maxboostedstep?: number | false;\n  callback_before_calculation?: TouchSpinCalcCallback;\n  callback_after_calculation?: TouchSpinCalcCallback;\n  // Renderer constructor (e.g., Bootstrap5Renderer) or null for no UI\n  renderer?: RendererConstructor | null | undefined;\n  initval?: string;\n  replacementval?: string;\n  mousewheel?: boolean;\n  verticalbuttons?: boolean;\n  verticalup?: string;\n  verticaldown?: string;\n  verticalupclass?: string | null;\n  verticaldownclass?: string | null;\n  focusablebuttons?: boolean;\n  prefix?: string;\n  postfix?: string;\n  prefix_extraclass?: string;\n  postfix_extraclass?: string;\n  buttonup_class?: string | null;\n  buttondown_class?: string | null;\n  buttonup_txt?: string;\n  buttondown_txt?: string;\n}\n\n\nconst DEFAULTS: Required<Omit<TouchSpinCoreOptions, 'renderer'>> & { renderer: null } = {\n  min: 0,\n  max: 100,\n  initval: '',\n  replacementval: '',\n  firstclickvalueifempty: null,\n  step: 1,\n  decimals: 0,\n  forcestepdivisibility: 'round',\n  stepinterval: 100,\n  stepintervaldelay: 500,\n  verticalbuttons: false,\n  verticalup: '+',\n  verticaldown: '−',\n  verticalupclass: null,\n  verticaldownclass: null,\n  focusablebuttons: false,\n  prefix: '',\n  postfix: '',\n  prefix_extraclass: '',\n  postfix_extraclass: '',\n  booster: true,\n  boostat: 10,\n  maxboostedstep: false,\n  mousewheel: true,\n  buttonup_class: null,\n  buttondown_class: null,\n  buttonup_txt: '+',\n  buttondown_txt: '&minus;',\n  callback_before_calculation: (v) => v,\n  callback_after_calculation: (v) => v,\n  renderer: null,\n};\n\nconst INSTANCE_KEY = '_touchSpinCore' as const;\n\ntype CoreEventName = 'min' | 'max' | 'startspin' | 'startupspin' | 'startdownspin' | 'stopspin' | 'stopupspin' | 'stopdownspin';\n\nexport class TouchSpinCore {\n  input: HTMLInputElement;\n  settings: TouchSpinCoreOptions;\n  spinning: boolean;\n  spincount: number;\n  direction: false | 'up' | 'down';\n  private _events: Map<CoreEventName, Set<(detail?: unknown) => void>> = new Map();\n  private _teardownCallbacks: Array<() => void> = [];\n  private _settingObservers: Map<string, Set<(value: unknown, prev?: unknown) => void>> = new Map();\n  private _spinDelayTimeout: ReturnType<typeof setTimeout> | null = null;\n  private _spinIntervalTimer: ReturnType<typeof setInterval> | null = null;\n  private _upButton: (HTMLElement & { disabled?: boolean }) | null = null;\n  private _originalAttributes: {\n    type: string | null;\n    attributes: Map<string, string | null>;\n  } | null = null;\n  private _downButton: (HTMLElement & { disabled?: boolean }) | null = null;\n  private _wrapper: HTMLElement | null = null;\n  private _mutationObserver: MutationObserver | null = null;\n  renderer?: Renderer;\n  /**\n   * Sanitize a partial settings object BEFORE applying it.\n   * Returns a new object with only provided keys normalized.\n   * @param {Partial<TouchSpinCoreOptions>} partial\n   * @param {TouchSpinCoreOptions} current\n   * @returns {Partial<TouchSpinCoreOptions>}\n   */\n  static sanitizePartialSettings(partial: Partial<TouchSpinCoreOptions>, current: TouchSpinCoreOptions): Partial<TouchSpinCoreOptions> {\n    const out = { ...partial };\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'step')) {\n      const n = Number(partial.step);\n      out.step = (isFinite(n) && n > 0) ? n : 1;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'decimals')) {\n      const n = Number(partial.decimals);\n      out.decimals = (isFinite(n) && n >= 0) ? Math.floor(n) : 0;\n    }\n\n    const hasMin = Object.prototype.hasOwnProperty.call(partial, 'min');\n    const hasMax = Object.prototype.hasOwnProperty.call(partial, 'max');\n    if (hasMin) {\n      if (partial.min === null || partial.min === undefined || (typeof partial.min === 'string' && partial.min === '')) {\n        out.min = null;\n      } else {\n        const n = Number(partial.min);\n        out.min = isFinite(n) ? n : null;\n      }\n    }\n    if (hasMax) {\n      if (partial.max === null || partial.max === undefined || (typeof partial.max === 'string' && partial.max === '')) {\n        out.max = null;\n      } else {\n        const n = Number(partial.max);\n        out.max = isFinite(n) ? n : null;\n      }\n    }\n    if (\n      hasMin && hasMax &&\n      out.min != null && out.max != null &&\n      typeof out.min === 'number' && typeof out.max === 'number' &&\n      out.min > out.max\n    ) {\n      const tmp = out.min; out.min = out.max; out.max = tmp;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'stepinterval')) {\n      const n = Number(partial.stepinterval);\n      out.stepinterval = (isFinite(n) && n >= 0) ? n : DEFAULTS.stepinterval;\n    }\n    if (Object.prototype.hasOwnProperty.call(partial, 'stepintervaldelay')) {\n      const n = Number(partial.stepintervaldelay);\n      out.stepintervaldelay = (isFinite(n) && n >= 0) ? n : DEFAULTS.stepintervaldelay;\n    }\n\n    return out;\n  }\n  /**\n   * @param inputEl The input element\n   * @param opts Partial settings\n   */\n  constructor(inputEl: HTMLInputElement, opts: Partial<TouchSpinCoreOptions> = {}) {\n    if (!inputEl || inputEl.nodeName !== 'INPUT') {\n      throw new Error('TouchSpinCore requires an <input> element');\n    }\n\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n\n    // Parse data-bts-* attributes\n    const dataAttrs = this._parseDataAttributes(inputEl);\n\n    // Allow global default options (e.g., to set a global default renderer or defaults)\n    /** @type {Partial<TouchSpinCoreOptions>} */\n    const globalDefaults = (typeof globalThis !== 'undefined' &&\n      (globalThis as unknown as { TouchSpinDefaultOptions?: Partial<TouchSpinCoreOptions> }).TouchSpinDefaultOptions)\n      ? TouchSpinCore.sanitizePartialSettings(\n          (globalThis as unknown as { TouchSpinDefaultOptions?: Partial<TouchSpinCoreOptions> }).TouchSpinDefaultOptions!,\n          DEFAULTS\n        )\n      : {};\n\n    /** @type {TouchSpinCoreOptions} */\n    this.settings = Object.assign({}, DEFAULTS, globalDefaults, dataAttrs, opts);\n    // Sanitize settings to ensure safe, predictable behavior\n    this._sanitizeSettings();\n\n    // Check for renderer: explicit option > global default > none\n    if (!this.settings.renderer) {\n      // Check for global default renderer\n      const g = globalThis as unknown as { TouchSpinDefaultRenderer?: RendererConstructor };\n      if (typeof g !== 'undefined' && g.TouchSpinDefaultRenderer) {\n        this.settings.renderer = g.TouchSpinDefaultRenderer;\n      } else {\n        // Allow no renderer for keyboard/wheel-only functionality\n        console.warn('TouchSpin: No renderer specified (renderer: null). Only keyboard/wheel events will work. Consider using Bootstrap3/4/5Renderer or TailwindRenderer for UI.');\n      }\n    }\n\n    /** @type {boolean} */\n    this.spinning = false;\n    /** @type {number} */\n    this.spincount = 0;\n    /** @type {false|'up'|'down'} */\n    this.direction = false;\n    /** @type {Map<string, Set<Function>>} */\n    this._events = new Map();\n    /** @type {Array<Function>} */\n    this._teardownCallbacks = [];\n    /** @type {Map<string, Set<Function>>} */\n    this._settingObservers = new Map(); // For observer pattern\n\n    /** @type {ReturnType<typeof setTimeout>|null} */\n    this._spinDelayTimeout = null;\n    /** @type {ReturnType<typeof setInterval>|null} */\n    this._spinIntervalTimer = null;\n\n    /** @type {HTMLElement|null} */\n    this._upButton = null;\n    /** @type {HTMLElement|null} */\n    this._downButton = null;\n    /** @type {HTMLElement|null} */\n    this._wrapper = null;\n\n    // DOM event handlers (bound methods)\n    this._handleUpMouseDown = this._handleUpMouseDown.bind(this);\n    this._handleDownMouseDown = this._handleDownMouseDown.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this._handleUpKeyDown = this._handleUpKeyDown.bind(this);\n    this._handleUpKeyUp = this._handleUpKeyUp.bind(this);\n    this._handleDownKeyDown = this._handleDownKeyDown.bind(this);\n    this._handleDownKeyUp = this._handleDownKeyUp.bind(this);\n    this._handleInputChange = this._handleInputChange.bind(this);\n    this._handleInputBlur = this._handleInputBlur.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this._handleKeyUp = this._handleKeyUp.bind(this);\n    this._handleWheel = this._handleWheel.bind(this);\n\n    // Core always manages the input element\n    this._initializeInput();\n\n    // Initialize renderer with reference to core\n    if (this.settings.renderer) {\n      const Ctor = this.settings.renderer as unknown as new (\n        inputEl: HTMLInputElement,\n        settings: Readonly<Record<string, unknown>>,\n        core: unknown\n      ) => Renderer;\n      this.renderer = new Ctor(inputEl, this.settings as unknown as Readonly<Record<string, unknown>>, this);\n      this.renderer.init();\n    }\n\n    // Set up mutation observer to watch for disabled/readonly changes\n    this._setupMutationObserver();\n\n    // Finalize wrapper attributes after complete initialization\n    //\n    // The data-touchspin-injected attribute serves as a marker that the TouchSpin\n    // component is fully constructed - DOM is built, event handlers are attached,\n    // and mutation observer is active. Tests use this attribute to detect when\n    // components are ready for interaction.\n    //\n    // By setting these attributes as the final initialization step, we prevent race\n    // conditions where tests might try to interact with components before their DOM\n    // structure, event handlers, or internal monitoring are ready. This is especially\n    // important under high CPU load where DOM operations may take longer.\n    //\n    // Complete initialization sequence:\n    // 1. renderer.init() - Constructs DOM and attaches event handlers\n    // 2. _setupMutationObserver() - Starts monitoring input attribute changes\n    // 3. renderer.finalizeWrapperAttributes() - Marks component as ready:\n    //    - Adds data-testid for test element selection\n    //    - Adds data-touchspin-injected to signal component is fully ready\n    if (this.renderer) {\n      this.renderer.finalizeWrapperAttributes();\n    }\n\n    this.input.setAttribute('data-touchspin-injected', 'input');\n  }\n\n  /**\n   * Initialize input element (core always handles this)\n   * @private\n   */\n  _initializeInput(): void {\n    // Capture original attributes before TouchSpin modifies anything\n    this._captureOriginalAttributes();\n\n    // Set initial value if specified and input is empty\n    const initVal = this.settings.initval ?? '';\n    if (initVal !== '' && this.input.value === '') {\n      this.input.value = initVal;\n    }\n\n    // Core always handles these for the input\n    this._updateAriaAttributes();\n    this._syncNativeAttributes();\n    this._checkValue(false);\n  }\n\n  /**\n   * Normalize and validate settings: coerce invalid values to safe defaults.\n   * - step: > 0 number, otherwise 1\n   * - decimals: integer >= 0, otherwise 0\n   * - min/max: finite numbers or null\n   * - stepinterval/stepintervaldelay: integers >= 0 (fallback to defaults if invalid)\n   * @private\n   */\n  _sanitizeSettings(): void {\n    // step\n    const stepNum = Number(this.settings.step);\n    if (!isFinite(stepNum) || stepNum <= 0) {\n      this.settings.step = 1;\n    } else {\n      this.settings.step = stepNum;\n    }\n\n    // decimals\n    const decNum = Number(this.settings.decimals);\n    if (!isFinite(decNum) || decNum < 0) {\n      this.settings.decimals = 0;\n    } else {\n      this.settings.decimals = Math.floor(decNum);\n    }\n\n    // min/max\n    // Preserve explicit nulls; coerce other values to numbers or null\n    if (this.settings.min === null || this.settings.min === undefined || (typeof this.settings.min === 'string' && this.settings.min === '')) {\n      this.settings.min = null;\n    } else {\n      const minNum = Number(this.settings.min);\n      this.settings.min = isFinite(minNum) ? minNum : null;\n    }\n    if (this.settings.max === null || this.settings.max === undefined || (typeof this.settings.max === 'string' && this.settings.max === '')) {\n      this.settings.max = null;\n    } else {\n      const maxNum = Number(this.settings.max);\n      this.settings.max = isFinite(maxNum) ? maxNum : null;\n    }\n\n    // Ensure min <= max when both present\n    if (this.settings.min !== null && this.settings.max !== null && this.settings.min > this.settings.max) {\n      // Swap to maintain logical bounds\n      const tmp = this.settings.min;\n      this.settings.min = this.settings.max;\n      this.settings.max = tmp;\n    }\n\n    // stepinterval\n    const si = Number(this.settings.stepinterval);\n    if (!isFinite(si) || si < 0) this.settings.stepinterval = DEFAULTS.stepinterval;\n\n    // stepintervaldelay\n    const sid = Number(this.settings.stepintervaldelay);\n    if (!isFinite(sid) || sid < 0) this.settings.stepintervaldelay = DEFAULTS.stepintervaldelay;\n\n    // Validate callbacks and handle input type conversion if needed\n    this._validateCallbacks();\n  }\n\n  /**\n   * Validate callbacks and automatically convert number inputs to text inputs\n   * when formatting callbacks that add non-numeric characters are detected.\n   * @private\n   */\n  _validateCallbacks(): void {\n    // Only validate for number inputs\n    const currentType = this.input.getAttribute('type');\n    if (currentType !== 'number') return;\n\n    // Only check if callbacks are set (not default)\n    const defaultCallback = (v: string) => v;\n    if (!this.settings.callback_after_calculation ||\n        this.settings.callback_after_calculation.toString() === defaultCallback.toString()) return;\n\n    // Test the callback with a sample value\n    const testValue = '123.45';\n    const afterResult = this.settings.callback_after_calculation(testValue);\n\n    // Check if result contains non-numeric characters\n    // Allow: optional minus, digits, optional decimal point and digits\n    if (!/^-?\\d*\\.?\\d*$/.test(afterResult)) {\n      console.warn(\n        'TouchSpin: Detected formatting callback that adds non-numeric characters. ' +\n        'Converting input from type=\"number\" to type=\"text\" to support formatting like \"' + afterResult + '\". ' +\n        'This ensures compatibility with custom formatting while maintaining full TouchSpin functionality. ' +\n        'The original type will be restored when TouchSpin is destroyed.'\n      );\n\n      // Capture original attributes before making any changes\n      this._captureOriginalAttributes();\n\n      // Convert input type to text to support formatting\n      this.input.setAttribute('type', 'text');\n\n      // Remove number-specific native attributes since they only work on number inputs\n      this.input.removeAttribute('min');\n      this.input.removeAttribute('max');\n      this.input.removeAttribute('step');\n    }\n  }\n\n  /**\n   * Capture the original attributes of the input before TouchSpin modifies them.\n   * This ensures complete transparency - the input can be restored to its exact original state.\n   * @private\n   */\n  _captureOriginalAttributes(): void {\n    if (this._originalAttributes !== null) return; // Already captured\n\n    const attributesToTrack = [\n      'role', 'aria-valuemin', 'aria-valuemax',\n      'aria-valuenow', 'aria-valuetext',\n      'min', 'max', 'step'\n    ];\n\n    this._originalAttributes = {\n      type: this.input.getAttribute('type'),\n      attributes: new Map()\n    };\n\n    // Store original values (null if attribute didn't exist)\n    attributesToTrack.forEach(attr => {\n      this._originalAttributes!.attributes.set(attr, this.input.getAttribute(attr));\n    });\n  }\n\n  /**\n   * Restore the input to its original state by restoring all original attributes.\n   * This ensures complete transparency - the input returns to its exact original state.\n   * @private\n   */\n  _restoreOriginalAttributes(): void {\n    if (this._originalAttributes === null) return; // Nothing to restore\n\n    // Strip formatting from value if converting back to number\n    const currentValue = this.input.value;\n    if (currentValue && this.settings.callback_before_calculation &&\n        this._originalAttributes.type === 'number' &&\n        this.input.getAttribute('type') === 'text') {\n      const numericValue = this.settings.callback_before_calculation(currentValue);\n      this.input.value = numericValue;\n    }\n\n    // Restore original type\n    if (this._originalAttributes.type) {\n      this.input.setAttribute('type', this._originalAttributes.type);\n    }\n\n    // Restore all original attributes\n    this._originalAttributes.attributes.forEach((originalValue, attrName) => {\n      if (originalValue === null) {\n        // Attribute didn't exist originally, remove it\n        this.input.removeAttribute(attrName);\n      } else {\n        // Restore original value\n        this.input.setAttribute(attrName, originalValue);\n      }\n    });\n\n    this._originalAttributes = null;\n  }\n\n  /**\n   * Parse data-bts-* attributes from the input element.\n   * @param {HTMLInputElement} inputEl\n   * @returns {Partial<TouchSpinCoreOptions>}\n   * @private\n   */\n  _parseDataAttributes(inputEl: HTMLInputElement): Partial<TouchSpinCoreOptions> {\n    const attributeMap: Partial<Record<keyof TouchSpinCoreOptions, string>> = {\n      min: 'min',\n      max: 'max',\n      initval: 'init-val',\n      replacementval: 'replacement-val',\n      firstclickvalueifempty: 'first-click-value-if-empty',\n      step: 'step',\n      decimals: 'decimals',\n      stepinterval: 'step-interval',\n      verticalbuttons: 'vertical-buttons',\n      verticalup: 'vertical-up',\n      verticaldown: 'vertical-down',\n      verticalupclass: 'vertical-up-class',\n      verticaldownclass: 'vertical-down-class',\n      forcestepdivisibility: 'force-step-divisibility',\n      stepintervaldelay: 'step-interval-delay',\n      prefix: 'prefix',\n      postfix: 'postfix',\n      prefix_extraclass: 'prefix-extra-class',\n      postfix_extraclass: 'postfix-extra-class',\n      booster: 'booster',\n      boostat: 'boostat',\n      maxboostedstep: 'max-boosted-step',\n      mousewheel: 'mouse-wheel',\n      buttondown_class: 'button-down-class',\n      buttonup_class: 'button-up-class',\n      buttondown_txt: 'button-down-txt',\n      buttonup_txt: 'button-up-txt'\n    };\n\n    const parsed: Partial<TouchSpinCoreOptions> = {};\n\n    // Parse data-bts-* attributes\n    for (const [optionName, attrName] of Object.entries(attributeMap) as Array<[keyof TouchSpinCoreOptions, string]>) {\n      const fullAttrName = `data-bts-${attrName}`;\n      if (inputEl.hasAttribute(fullAttrName)) {\n        const rawValue = inputEl.getAttribute(fullAttrName);\n        // Assign strongly typed value\n\n        // @ts-ignore - narrow via optionName switch\n        parsed[optionName] = this._coerceAttributeValue(optionName as string, rawValue ?? '');\n      }\n    }\n\n    // Also handle native attributes with precedence (warn if both specified)\n    for (const nativeAttr of ['min', 'max', 'step']) {\n      if (inputEl.hasAttribute(nativeAttr)) {\n        const rawValue = inputEl.getAttribute(nativeAttr);\n        if ((parsed as Record<string, unknown>)[nativeAttr] !== undefined) {\n          console.warn(`Both \"data-bts-${nativeAttr}\" and \"${nativeAttr}\" attributes specified. Native attribute takes precedence.`, inputEl);\n        }\n\n        // @ts-ignore\n        parsed[nativeAttr as keyof TouchSpinCoreOptions] = this._coerceAttributeValue(nativeAttr, rawValue ?? '');\n      }\n    }\n\n    return parsed;\n  }\n\n  /**\n   * Convert string attribute values to appropriate types.\n   * @param {string} optionName\n   * @param {string} rawValue\n   * @returns {any}\n   * @private\n   */\n  _coerceAttributeValue(optionName: string, rawValue: string) {\n    if (rawValue === null || rawValue === undefined) {\n      return rawValue;\n    }\n\n    // Boolean attributes\n    if (['booster', 'mousewheel', 'verticalbuttons', 'focusablebuttons'].includes(optionName)) {\n      return rawValue === 'true' || rawValue === '' || rawValue === optionName;\n    }\n\n    // Numeric attributes\n    if (['min', 'max', 'step', 'decimals', 'stepinterval', 'stepintervaldelay',\n         'boostat', 'maxboostedstep', 'firstclickvalueifempty'].includes(optionName)) {\n      const num = parseFloat(rawValue);\n      return isNaN(num) ? rawValue : num;\n    }\n\n    // String attributes - return as-is\n    return rawValue;\n  }\n\n  /** Increment once according to step */\n  upOnce(): void {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('up', v);\n\n    // Check if already at max boundary before incrementing\n    if (this.settings.max !== null && v === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n      return;\n    }\n\n    // Fire max event BEFORE setting display if we're reaching max\n    if (this.settings.max !== null && next === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n    }\n\n    this._setDisplay(next, true);\n  }\n\n  /** Decrement once according to step */\n  downOnce(): void {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('down', v);\n\n    // Check if already at min boundary before decrementing\n    if (this.settings.min !== null && v === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n      return;\n    }\n\n    // Fire min event BEFORE setting display if we're reaching min\n    if (this.settings.min !== null && next === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n    }\n\n    this._setDisplay(next, true);\n  }\n\n  /** Start increasing repeatedly; no immediate step here. */\n  startUpSpin(): void {\n    this._startSpin('up');\n  }\n\n  /** Start decreasing repeatedly; no immediate step here. */\n  startDownSpin(): void {\n    this._startSpin('down');\n  }\n\n  /** Stop spinning (placeholder) */\n  stopSpin(): void {\n    this._clearSpinTimers();\n    if (this.spinning) {\n      if (this.direction === 'up') {\n        this.emit('stopupspin');\n        this.emit('stopspin');\n      } else if (this.direction === 'down') {\n        this.emit('stopdownspin');\n        this.emit('stopspin');\n      }\n    }\n    this.spinning = false;\n    this.direction = false;\n    this.spincount = 0;\n  }\n\n  updateSettings(opts: Partial<TouchSpinCoreOptions>): void {\n    const oldSettings = { ...this.settings };\n    const newSettings = opts || {};\n\n    // Sanitize the incoming partial BEFORE merge\n    const sanitizedPartial = TouchSpinCore.sanitizePartialSettings(newSettings, oldSettings);\n\n    // Apply incoming changes (sanitized) first\n    Object.assign(this.settings, sanitizedPartial);\n    // Extra safety: sanitize full settings after merge\n    this._sanitizeSettings();\n\n    // If step/min/max changed and step != 1, align bounds to step like the jQuery plugin\n    const step = Number(this.settings.step || 1);\n    if ((sanitizedPartial.step !== undefined || sanitizedPartial.min !== undefined || sanitizedPartial.max !== undefined) && step !== 1) {\n      if (this.settings.max !== null) {\n        this.settings.max = this._alignToStep(Number(this.settings.max), step, 'down');\n      }\n      if (this.settings.min !== null) {\n        this.settings.min = this._alignToStep(Number(this.settings.min), step, 'up');\n      }\n    }\n\n    // Notify observers of keys whose EFFECTIVE values changed after sanitization\n    (Object.keys(this.settings) as Array<keyof TouchSpinCoreOptions>).forEach((key) => {\n      if (oldSettings[key] !== this.settings[key]) {\n        const observers = this._settingObservers.get(String(key));\n        if (observers) {\n          observers.forEach(callback => {\n            try {\n              callback(this.settings[key] as unknown, oldSettings[key] as unknown);\n            } catch (error) {\n              console.error('TouchSpin: Error in setting observer callback:', error);\n            }\n          });\n        }\n      }\n    });\n\n    // Core handles its own setting changes\n    this._updateAriaAttributes();\n    this._syncNativeAttributes();\n    this._checkValue(false);\n  }\n\n  getValue(): number {\n    let raw = this.input.value;\n    const repl = this.settings.replacementval ?? '';\n    if (raw === '' && repl !== '') {\n      raw = repl;\n    }\n    if (raw === '') return NaN;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    return isNaN(num) ? NaN : num;\n  }\n\n  setValue(v: number | string): void {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    const parsed = Number(v);\n    if (!isFinite(parsed)) return;\n    const adjusted = this._applyConstraints(parsed);\n    const wasSanitized = parsed !== adjusted;\n    this._setDisplay(adjusted, true, wasSanitized, true);\n  }\n\n  /**\n   * Initialize DOM event handling by finding elements and attaching listeners.\n   * Must be called after the renderer has created the DOM structure.\n   */\n  initDOMEventHandling(): void {\n    // Find DOM elements and attach listeners\n    this._findDOMElements();\n    this._attachDOMEventListeners();\n  }\n\n  /**\n   * Register a teardown callback that will be called when the instance is destroyed.\n   * This allows wrapper libraries to register cleanup logic.\n   * @param {Function} callback - Function to call on destroy\n   * @returns {Function} - Unregister function\n   */\n  registerTeardown(callback: () => void): () => void {\n    if (typeof callback !== 'function') {\n      throw new Error('Teardown callback must be a function');\n    }\n    this._teardownCallbacks.push(callback);\n\n    // Return unregister function\n    return () => {\n      const index = this._teardownCallbacks.indexOf(callback);\n      if (index > -1) {\n        this._teardownCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /** Cleanup and destroy the TouchSpin instance */\n  destroy(): void {\n    // Remove the data-touchspin-injected attribute first to signal plugin is no longer ready\n    this.input.removeAttribute('data-touchspin-injected');\n\n    this.stopSpin();\n\n    // Renderer cleans up its added elements\n    if (this.renderer && this.renderer.teardown) {\n      this.renderer.teardown();\n    }\n\n    // Core cleans up input events only\n    this._detachDOMEventListeners();\n\n    // Call all registered teardown callbacks (for wrapper cleanup)\n    this._teardownCallbacks.forEach(callback => {\n      try {\n        callback();\n      } catch (error) {\n        console.error('TouchSpin teardown callback error:', error);\n      }\n    });\n    this._teardownCallbacks.length = 0; // Clear the array\n\n    // Clear setting observers\n    this._settingObservers.clear();\n\n    // Clean up mutation observer\n    if (this._mutationObserver) {\n      this._mutationObserver.disconnect();\n      this._mutationObserver = null;\n    }\n\n    // Clear button references\n    this._upButton = null;\n    this._downButton = null;\n\n    // Restore all original attributes\n    this._restoreOriginalAttributes();\n\n    // Remove instance from element (type-safe guard)\n    type WithCore = HTMLInputElement & { [INSTANCE_KEY]?: TouchSpinCore };\n    const inst = (this.input as WithCore)[INSTANCE_KEY];\n    if (inst && inst === this) {\n      delete (this.input as WithCore)[INSTANCE_KEY];\n    }\n  }\n\n  /**\n   * Create a plain public API object with bound methods for wrappers.\n   * @returns {TouchSpinCorePublicAPI}\n   */\n  toPublicApi(): TouchSpinCorePublicAPI {\n    return {\n      upOnce: this.upOnce.bind(this),\n      downOnce: this.downOnce.bind(this),\n      startUpSpin: this.startUpSpin.bind(this),\n      startDownSpin: this.startDownSpin.bind(this),\n      stopSpin: this.stopSpin.bind(this),\n      updateSettings: this.updateSettings.bind(this),\n      getValue: this.getValue.bind(this),\n      setValue: this.setValue.bind(this),\n      destroy: this.destroy.bind(this),\n      on: this.on.bind(this),\n      off: this.off.bind(this),\n      initDOMEventHandling: this.initDOMEventHandling.bind(this),\n      registerTeardown: this.registerTeardown.bind(this),\n      attachUpEvents: this.attachUpEvents.bind(this),\n      attachDownEvents: this.attachDownEvents.bind(this),\n      observeSetting: this.observeSetting.bind(this),\n    };\n  }\n\n  // --- Renderer Event Attachment Methods ---\n  /**\n   * Attach up button events to an element\n   * Called by renderers after creating up button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachUpEvents(element: HTMLElement | null): void {\n    if (!element) {\n      console.warn('TouchSpin: attachUpEvents called with null element');\n      return;\n    }\n\n    this._upButton = element;\n    element.addEventListener('mousedown', this._handleUpMouseDown);\n    element.addEventListener('touchstart', this._handleUpMouseDown, {passive: false});\n\n    // Add keyboard event listeners if focusable buttons are enabled\n    if (this.settings.focusablebuttons) {\n      element.addEventListener('keydown', this._handleUpKeyDown);\n      element.addEventListener('keyup', this._handleUpKeyUp);\n    }\n\n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  /**\n   * Attach down button events to an element\n   * Called by renderers after creating down button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachDownEvents(element: HTMLElement | null): void {\n    if (!element) {\n      console.warn('TouchSpin: attachDownEvents called with null element');\n      return;\n    }\n\n    this._downButton = element;\n    element.addEventListener('mousedown', this._handleDownMouseDown);\n    element.addEventListener('touchstart', this._handleDownMouseDown, {passive: false});\n\n    // Add keyboard event listeners if focusable buttons are enabled\n    if (this.settings.focusablebuttons) {\n      element.addEventListener('keydown', this._handleDownKeyDown);\n      element.addEventListener('keyup', this._handleDownKeyUp);\n    }\n\n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  // --- Settings Observer Pattern ---\n  /**\n   * Allow renderers to observe setting changes\n   * @param {string} settingName - Name of setting to observe\n   * @param {Function} callback - Function to call when setting changes (newValue, oldValue)\n   * @returns {Function} Unsubscribe function\n   */\n  observeSetting<K extends keyof TouchSpinCoreOptions>(settingName: K, callback: (newValue: NonNullable<TouchSpinCoreOptions[K]>, oldValue?: TouchSpinCoreOptions[K]) => void): () => void {\n    const key = String(settingName);\n    if (!this._settingObservers.has(key)) {\n      this._settingObservers.set(key, new Set());\n    }\n\n    const observers = this._settingObservers.get(key)!;\n    observers.add(callback as (value: unknown, prev?: unknown) => void);\n\n    // Return unsubscribe function\n    return () => observers.delete(callback as (value: unknown, prev?: unknown) => void);\n  }\n\n  // --- Minimal internal emitter API ---\n  /**\n   * Subscribe to a core event.\n   * Events: 'min', 'max', 'startspin', 'startupspin', 'startdownspin', 'stopspin', 'stopupspin', 'stopdownspin'\n   * @param {string} event\n   * @param {(detail?: any) => void} handler\n   */\n  on(event: CoreEventName, handler: (detail?: unknown) => void): () => void {\n    const set = this._events.get(event) || new Set<(detail?: unknown) => void>();\n    set.add(handler);\n    this._events.set(event, set);\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Unsubscribe from a core event.\n   * @param {string} event\n   * @param {(detail?: any) => void=} handler\n   */\n  off(event: CoreEventName, handler?: (detail?: unknown) => void): void {\n    const set = this._events.get(event);\n    if (!set) return;\n    if (!handler) {\n      this._events.delete(event);\n      return;\n    }\n    set.delete(handler);\n    if (set.size === 0) this._events.delete(event);\n  }\n\n  /**\n   * Emit a core event to subscribers.\n   * @param {string} event\n   * @param {any=} detail\n   */\n  emit(event: CoreEventName, detail?: unknown): void {\n    const set = this._events.get(event);\n    if (!set || set.size === 0) return;\n    for (const fn of [...set]) {\n      try { fn(detail); } catch {\n        // Silently ignore callback errors to prevent one bad callback from breaking others\n      }\n    }\n  }\n\n  /**\n   * Internal: start timed spin in a direction with initial step, delay, then interval.\n   * @param {'up'|'down'} dir\n   */\n  _startSpin(dir: 'up' | 'down'): void {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n\n    // If already spinning in the same direction, do nothing (idempotent)\n    if (this.spinning && this.direction === dir) {\n      return;\n    }\n    // If switching direction while spinning, stop first\n    if (this.spinning && this.direction !== dir) {\n      this.stopSpin();\n    }\n\n    // Perform an immediate single step before starting timers (parity with jQuery plugin UX)\n    if (dir === 'up') this.upOnce(); else this.downOnce();\n\n    // If we reached a boundary after the initial step, don't start continuous spin\n    const v = this.getValue();\n    if (dir === 'up' && this.settings.max !== null && v === this.settings.max) {\n      return;\n    }\n    if (dir === 'down' && this.settings.min !== null && v === this.settings.min) {\n      return;\n    }\n\n    // If changing direction, reset counters\n    const direction_changed = (!this.spinning || this.direction !== dir);\n    if (direction_changed) {\n      this.spinning = true;\n      this.direction = dir;\n      this.spincount = 0;\n      // Match jQuery plugin event order: startspin then direction-specific\n      this.emit('startspin');\n      if (dir === 'up') this.emit('startupspin'); else this.emit('startdownspin');\n    }\n\n    // Clear previous timers\n    this._clearSpinTimers();\n    // Schedule repeat after delay, then at interval\n    const delay = this.settings.stepintervaldelay || 500;\n    const interval = this.settings.stepinterval || 100;\n    this._spinDelayTimeout = setTimeout(() => {\n      this._spinDelayTimeout = null;\n      this._spinIntervalTimer = setInterval(() => {\n        if (!this.spinning || this.direction !== dir) return; // safety\n        this._spinStep(dir);\n      }, interval);\n    }, delay);\n  }\n\n  _clearSpinTimers(): void {\n    try { if (this._spinDelayTimeout) { clearTimeout(this._spinDelayTimeout); } } catch {\n      // Ignore timer cleanup errors\n    }\n    try { if (this._spinIntervalTimer) { clearInterval(this._spinIntervalTimer); } } catch {\n      // Ignore timer cleanup errors\n    }\n    this._spinDelayTimeout = null;\n    this._spinIntervalTimer = null;\n  }\n\n  /**\n   * Compute the next numeric value for a direction, respecting step, booster and bounds.\n   * @param {'up'|'down'} dir\n   * @param {number} current\n   */\n  _nextValue(dir: 'up' | 'down', current: number): number {\n    let v = current;\n    if (isNaN(v)) {\n      v = this._valueIfIsNaN();\n    } else {\n      const base = this.settings.step || 1;\n      const mbs = this.settings.maxboostedstep;\n      let stepCandidate = base;\n      // Apply booster only if enabled\n      if (this.settings.booster) {\n        const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n        stepCandidate = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n      }\n      let step = stepCandidate;\n      if (mbs && isFinite(mbs) && stepCandidate > Number(mbs)) {\n        step = Number(mbs);\n        // Align current value to the boosted step grid when clamped (parity with jQuery plugin)\n        v = Math.round(v / step) * step;\n      }\n      step = Math.max(base, step);\n      v = dir === 'up' ? v + step : v - step;\n    }\n    return this._applyConstraints(v);\n  }\n\n  /** Returns a reasonable value to use when current is NaN. */\n  _valueIfIsNaN(): number {\n    if (typeof this.settings.firstclickvalueifempty === 'number') {\n      return this.settings.firstclickvalueifempty;\n    }\n    const min = (typeof this.settings.min === 'number') ? this.settings.min : 0;\n    const max = (typeof this.settings.max === 'number') ? this.settings.max : min;\n    return (min + max) / 2;\n  }\n\n  /** Apply step divisibility and clamp to min/max. */\n  _applyConstraints(v: number): number {\n    const aligned = this._forcestepdivisibility(v);\n    const min = this.settings.min ?? null;\n    const max = this.settings.max ?? null;\n    let clamped = aligned;\n    if (typeof min === 'number' && clamped < min) clamped = min;\n    if (typeof max === 'number' && clamped > max) clamped = max;\n    return clamped;\n  }\n\n  /** Determine the effective step with booster if enabled. */\n  _getBoostedStep(): number {\n    const base = this.settings.step || 1;\n    if (!this.settings.booster) return base;\n    const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n    let boosted = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n    const mbs = this.settings.maxboostedstep;\n    if (mbs && isFinite(mbs)) {\n      const cap = Number(mbs);\n      if (boosted > cap) boosted = cap;\n    }\n    return Math.max(base, boosted);\n  }\n\n  /** Aligns value to step per forcestepdivisibility. */\n  _forcestepdivisibility(val: number): number {\n    const mode = this.settings.forcestepdivisibility || 'round';\n    const step = this.settings.step || 1;\n    const dec = this.settings.decimals || 0;\n    let out;\n    switch (mode) {\n      case 'floor':\n        out = Math.floor(val / step) * step; break;\n      case 'ceil':\n        out = Math.ceil(val / step) * step; break;\n      case 'none':\n        out = val; break;\n      case 'round':\n      default:\n        out = Math.round(val / step) * step; break;\n    }\n    // Normalize to configured decimals without string pipeline; formatting applies later\n    return Number(out.toFixed(dec));\n  }\n\n  /** Aligns a value to nearest step boundary using integer arithmetic. */\n  _alignToStep(val: number, step: number, dir: 'up' | 'down'): number {\n    if (step === 0) return val;\n    let k = 1;\n    const s = step;\n    while (((s * k) % 1) !== 0 && k < 1e6) k *= 10;\n    const V = Math.round(val * k);\n    const S = Math.round(step * k);\n    const r = V % S;\n    if (r === 0) return val;\n    return (dir === 'down' ? (V - r) : (V + (S - r))) / k;\n  }\n\n  /** Format and write to input, optionally emit change if different. */\n  _setDisplay(num: number, mayTriggerChange: boolean, forceTrigger: boolean = false, onlyTriggerIfSanitized: boolean = false): string {\n    const prev = String(this.input.value ?? '');\n    const next = this._formatDisplay(num);\n    this.input.value = next;\n    this._updateAriaAttributes();\n\n    // Emit change based on context:\n    // - For programmatic setValue: only if sanitized (forceTrigger)\n    // - For user interactions: if sanitized OR display changed\n    if (mayTriggerChange && (onlyTriggerIfSanitized ? forceTrigger : (forceTrigger || prev !== next))) {\n      // mirror plugin behavior: trigger a native change event\n      this.input.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    return next;\n  }\n\n  _formatDisplay(num: number): string {\n    const dec = this.settings.decimals || 0;\n    const after = this.settings.callback_after_calculation || ((v) => v);\n    const s = Number(num).toFixed(dec);\n    return after(s);\n  }\n\n  /**\n   * Perform one spin step in a direction while tracking spincount for booster.\n   * @param {'up'|'down'} dir\n   */\n  _spinStep(dir: 'up' | 'down'): void {\n    this.spincount++;\n    if (dir === 'up') this.upOnce(); else this.downOnce();\n  }\n\n  /** Sanitize current input value and update display; optionally emits change. */\n  _checkValue(mayTriggerChange: boolean): void {\n    const v = this.getValue();\n    if (!isFinite(v)) return;\n    const adjusted = this._applyConstraints(v);\n    const wasSanitized = v !== adjusted;\n    this._setDisplay(adjusted, !!mayTriggerChange, wasSanitized);\n  }\n\n  _updateAriaAttributes(): void {\n    const el = this.input;\n    if (el.getAttribute('role') !== 'spinbutton') {\n      el.setAttribute('role', 'spinbutton');\n    }\n    const min = this.settings.min ?? null;\n    const max = this.settings.max ?? null;\n    if (typeof min === 'number') el.setAttribute('aria-valuemin', String(min)); else el.removeAttribute('aria-valuemin');\n    if (typeof max === 'number') el.setAttribute('aria-valuemax', String(max)); else el.removeAttribute('aria-valuemax');\n    const raw = el.value;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    if (isFinite(num)) el.setAttribute('aria-valuenow', String(num)); else el.removeAttribute('aria-valuenow');\n    el.setAttribute('aria-valuetext', String(raw));\n  }\n\n  /**\n   * Synchronize TouchSpin settings to native input attributes.\n   * Only applies to type=\"number\" inputs to maintain browser consistency.\n   * @private\n   */\n  _syncNativeAttributes(): void {\n    // Only set native attributes on number inputs\n    if (this.input.getAttribute('type') === 'number') {\n      // Sync min attribute\n      const min = this.settings.min ?? null;\n      if (typeof min === 'number' && isFinite(min)) {\n        this.input.setAttribute('min', String(min));\n      } else {\n        this.input.removeAttribute('min');\n      }\n\n      // Sync max attribute\n      const max = this.settings.max ?? null;\n      if (typeof max === 'number' && isFinite(max)) {\n        this.input.setAttribute('max', String(max));\n      } else {\n        this.input.removeAttribute('max');\n      }\n\n      // Sync step attribute\n      const step = this.settings.step;\n      if (typeof step === 'number' && isFinite(step) && step > 0) {\n        this.input.setAttribute('step', String(step));\n      } else {\n        this.input.removeAttribute('step');\n      }\n    }\n  }\n\n  /**\n   * Update TouchSpin settings from native attribute changes.\n   * Called by mutation observer when min/max/step attributes change.\n   * @private\n   */\n  _syncSettingsFromNativeAttributes(): void {\n    const nativeMin = this.input.getAttribute('min');\n    const nativeMax = this.input.getAttribute('max');\n    const nativeStep = this.input.getAttribute('step');\n    let needsUpdate = false;\n    const newSettings: Partial<TouchSpinCoreOptions> = {};\n\n    // Check min attribute\n    if (nativeMin !== null) {\n      const parsedMin = nativeMin === '' ? null : parseFloat(nativeMin);\n      const minNum = parsedMin !== null && isFinite(parsedMin) ? parsedMin : null;\n      if (minNum !== this.settings.min) {\n        newSettings.min = minNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.min !== null) {\n      // Attribute was removed\n      newSettings.min = null;\n      needsUpdate = true;\n    }\n\n    // Check max attribute\n    if (nativeMax !== null) {\n      const parsedMax = nativeMax === '' ? null : parseFloat(nativeMax);\n      const maxNum = parsedMax !== null && isFinite(parsedMax) ? parsedMax : null;\n      if (maxNum !== this.settings.max) {\n        newSettings.max = maxNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.max !== null) {\n      // Attribute was removed\n      newSettings.max = null;\n      needsUpdate = true;\n    }\n\n    // Check step attribute\n    if (nativeStep !== null) {\n      const parsedStep = nativeStep === '' ? undefined : parseFloat(nativeStep);\n      const stepNum: number | undefined = parsedStep !== undefined && isFinite(parsedStep) && parsedStep > 0 ? parsedStep : undefined;\n      if (stepNum !== this.settings.step) {\n        newSettings.step = stepNum ?? 1;\n        needsUpdate = true;\n      }\n    } else if (this.settings.step !== 1) {\n      // Attribute was removed, reset to default\n      newSettings.step = 1;\n      needsUpdate = true;\n    }\n\n    // Apply updates if needed\n    if (needsUpdate) {\n      this.updateSettings(newSettings);\n    }\n  }\n\n  // --- DOM Event Handling Methods ---\n\n  /**\n   * Find and store references to DOM elements using data-touchspin-injected attributes.\n   * @private\n   */\n  _findDOMElements(): void {\n    // Core doesn't need to find buttons - renderers handle button events directly\n    // We only need to find the wrapper for potential future use\n    let wrapper = this.input.parentElement;\n    while (wrapper && !wrapper.hasAttribute('data-touchspin-injected')) {\n      wrapper = wrapper.parentElement;\n    }\n    this._wrapper = wrapper;\n  }\n\n  /**\n   * Attach DOM event listeners to elements.\n   * @private\n   */\n  _attachDOMEventListeners(): void {\n    // Core should NOT attach button events - renderers handle that via attachUpEvents/attachDownEvents\n\n    // Global mouseup/touchend to stop spinning\n    document.addEventListener('mouseup', this._handleMouseUp);\n    document.addEventListener('mouseleave', this._handleMouseUp);\n    document.addEventListener('touchend', this._handleMouseUp);\n\n    // Input events (always attach these - they work without renderer UI)\n    this.input.addEventListener('change', this._handleInputChange, true); // Capture phase to intercept\n    this.input.addEventListener('blur', this._handleInputBlur);\n    this.input.addEventListener('keydown', this._handleKeyDown);\n    this.input.addEventListener('keyup', this._handleKeyUp);\n    this.input.addEventListener('wheel', this._handleWheel);\n  }\n\n  /**\n   * Remove DOM event listeners.\n   * @private\n   */\n  _detachDOMEventListeners(): void {\n    // Core does not manage button events - renderers handle their own cleanup\n\n    // Global events\n    document.removeEventListener('mouseup', this._handleMouseUp);\n    document.removeEventListener('mouseleave', this._handleMouseUp);\n    document.removeEventListener('touchend', this._handleMouseUp);\n\n    // Input events\n    this.input.removeEventListener('change', this._handleInputChange, true);\n    this.input.removeEventListener('blur', this._handleInputBlur);\n    this.input.removeEventListener('keydown', this._handleKeyDown);\n    this.input.removeEventListener('keyup', this._handleKeyUp);\n    this.input.removeEventListener('wheel', this._handleWheel);\n  }\n\n  // --- DOM Event Handlers ---\n\n  /**\n   * Handle mousedown/touchstart on up button.\n   * @private\n   */\n  _handleUpMouseDown(e: MouseEvent | TouchEvent): void {\n    e.preventDefault();\n    this.startUpSpin();\n  }\n\n  /**\n   * Handle mousedown/touchstart on down button.\n   * @private\n   */\n  _handleDownMouseDown(e: MouseEvent | TouchEvent): void {\n    e.preventDefault();\n    this.startDownSpin();\n  }\n\n  /**\n   * Handle mouseup/touchend/mouseleave to stop spinning.\n   * @private\n   */\n  _handleMouseUp(e: MouseEvent | TouchEvent): void {\n    this.stopSpin();\n  }\n\n  /**\n   * Handle keydown events on up button.\n   * @private\n   */\n  _handleUpKeyDown(e: KeyboardEvent): void {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      e.preventDefault();\n      // Ignore auto-repeat while holding the key\n      if (e.repeat) return;\n      this.startUpSpin();\n    }\n  }\n\n  /**\n   * Handle keyup events on up button.\n   * @private\n   */\n  _handleUpKeyUp(e: KeyboardEvent): void {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle keydown events on down button.\n   * @private\n   */\n  _handleDownKeyDown(e: KeyboardEvent): void {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      e.preventDefault();\n      // Ignore auto-repeat while holding the key\n      if (e.repeat) return;\n      this.startDownSpin();\n    }\n  }\n\n  /**\n   * Handle keyup events on down button.\n   * @private\n   */\n  _handleDownKeyUp(e: KeyboardEvent): void {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Intercept change events to prevent wrong values from propagating.\n   * @private\n   */\n  _handleInputChange(e: Event): void {\n    const currentValue = this.getValue();\n    const wouldBeSanitized = this._applyConstraints(currentValue);\n\n    if (isFinite(currentValue) && currentValue !== wouldBeSanitized) {\n      // This change event has wrong value - prevent it from propagating\n      e.stopImmediatePropagation();\n      // Don't sanitize here - blur handler will do it with correct change event\n    }\n    // If values match, let the change event through normally\n  }\n\n  /**\n   * Handle blur events on the input element for sanitization.\n   * @private\n   */\n  _handleInputBlur(e: FocusEvent): void {\n    this._checkValue(true);\n  }\n\n  /**\n   * Handle keydown events on the input element.\n   * @private\n   */\n  _handleKeyDown(e: KeyboardEvent): void {\n    switch (e.key) {\n      case 'ArrowUp':\n        e.preventDefault();\n        if (e.repeat) return; // ignore auto-repeat\n        this.startUpSpin();\n        break;\n      case 'ArrowDown':\n        e.preventDefault();\n        if (e.repeat) return; // ignore auto-repeat\n        this.startDownSpin();\n        break;\n      case 'Enter':\n        this._checkValue(false);\n        break;\n    }\n  }\n\n  /**\n   * Handle keyup events on the input element.\n   * @private\n   */\n  _handleKeyUp(e: KeyboardEvent): void {\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle wheel events on the input element.\n   * @private\n   */\n  _handleWheel(e: WheelEvent): void {\n    if (!this.settings.mousewheel) {\n      return;\n    }\n\n    if (document.activeElement === this.input) {\n      e.preventDefault();\n      if (e.deltaY < 0) {\n        this.upOnce();\n      } else if (e.deltaY > 0) {\n        this.downOnce();\n      }\n    }\n  }\n\n  /**\n   * Set up mutation observer to watch for disabled/readonly attribute changes\n   * @private\n   */\n  _setupMutationObserver(): void {\n    if (typeof MutationObserver !== 'undefined') {\n      this._mutationObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (mutation.type === 'attributes') {\n            if (mutation.attributeName === 'disabled' || mutation.attributeName === 'readonly') {\n              this._updateButtonDisabledState();\n            } else if (mutation.attributeName === 'min' || mutation.attributeName === 'max' || mutation.attributeName === 'step') {\n              this._syncSettingsFromNativeAttributes();\n            }\n          }\n        });\n      });\n\n      this._mutationObserver.observe(this.input, {\n        attributes: true,\n        attributeFilter: ['disabled', 'readonly', 'min', 'max', 'step']\n      });\n    }\n  }\n\n  /**\n   * Update button disabled state based on input disabled/readonly state\n   * @private\n   */\n  _updateButtonDisabledState(): void {\n    const isDisabled = this.input.disabled || this.input.hasAttribute('readonly');\n\n    if (this._upButton) {\n      this._upButton.disabled = isDisabled;\n    }\n    if (this._downButton) {\n      this._downButton.disabled = isDisabled;\n    }\n\n    if (isDisabled) {\n      this.stopSpin();\n    }\n  }\n}\n\nexport interface TouchSpinCorePublicAPI {\n  upOnce: () => void;\n  downOnce: () => void;\n  startUpSpin: () => void;\n  startDownSpin: () => void;\n  stopSpin: () => void;\n  updateSettings: (opts: Partial<TouchSpinCoreOptions>) => void;\n  getValue: () => number;\n  setValue: (v: number | string) => void;\n  destroy: () => void;\n  on: (event: CoreEventName, handler: (detail?: unknown) => void) => () => void;\n  off: (event: CoreEventName, handler?: (detail?: unknown) => void) => void;\n  initDOMEventHandling: () => void;\n  registerTeardown: (callback: () => void) => () => void;\n  attachUpEvents: (el: HTMLElement | null) => void;\n  attachDownEvents: (el: HTMLElement | null) => void;\n  observeSetting: <K extends keyof TouchSpinCoreOptions>(key: K, cb: (value: NonNullable<TouchSpinCoreOptions[K]>, prev?: TouchSpinCoreOptions[K]) => void) => () => void;\n}\n\n/**\n * Initialize TouchSpin on an input element or get existing instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function TouchSpin(inputEl: HTMLInputElement, opts?: Partial<TouchSpinCoreOptions>): TouchSpinCorePublicAPI | null {\n  // Check if element is an input (graceful handling for public API)\n  if (!inputEl || inputEl.nodeName !== 'INPUT') {\n    console.warn('Must be an input.');\n    return null;\n  }\n\n  // If options provided, initialize/reinitialize\n  if (opts !== undefined) {\n    // Destroy existing instance if it exists (destroy() removes itself from element)\n    if ((inputEl as WithCoreElement)[INSTANCE_KEY]) {\n      console.warn('TouchSpin: Destroying existing instance and reinitializing. Consider using updateSettings() instead.');\n      (inputEl as WithCoreElement)[INSTANCE_KEY]!.destroy();\n    }\n\n    // Create new instance and store on element\n    const core = new TouchSpinCore(inputEl, opts);\n    (inputEl as WithCoreElement)[INSTANCE_KEY] = core;\n\n    // Initialize DOM event handling\n    core.initDOMEventHandling();\n\n    return core.toPublicApi();\n  }\n\n  // No options - return existing instance or create with defaults\n  if (!(inputEl as WithCoreElement)[INSTANCE_KEY]) {\n    const core = new TouchSpinCore(inputEl, {});\n    (inputEl as WithCoreElement)[INSTANCE_KEY] = core;\n    core.initDOMEventHandling();\n    return core.toPublicApi();\n  }\n\n  return ((inputEl as WithCoreElement)[INSTANCE_KEY] as TouchSpinCore).toPublicApi();\n}\n\n/**\n * Get existing TouchSpin instance from input element (without creating one).\n * @param {HTMLInputElement} inputEl\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function getTouchSpin(inputEl: HTMLInputElement): TouchSpinCorePublicAPI | null {\n  return (inputEl as WithCoreElement)[INSTANCE_KEY]\n    ? ((inputEl as WithCoreElement)[INSTANCE_KEY] as TouchSpinCore).toPublicApi()\n    : null;\n}\n\n/**\n * Create and return a plain public API bound to a new core instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI}\n * @deprecated Use TouchSpin() instead\n */\nexport function createPublicApi(inputEl: HTMLInputElement, opts?: Partial<TouchSpinCoreOptions>): TouchSpinCorePublicAPI | null {\n  return TouchSpin(inputEl, opts);\n}\n\n/** Event name constants for wrappers to map/bridge. */\nexport const CORE_EVENTS = Object.freeze({\n  MIN: 'min',\n  MAX: 'max',\n  START_SPIN: 'startspin',\n  START_UP: 'startupspin',\n  START_DOWN: 'startdownspin',\n  STOP_SPIN: 'stopspin',\n  STOP_UP: 'stopupspin',\n  STOP_DOWN: 'stopdownspin',\n} as const);\n\n/**\n * Convenience helper to attach core to an input element.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCore}\n */\nexport function attach(inputEl: HTMLInputElement, opts?: Partial<TouchSpinCoreOptions>): TouchSpinCore {\n  return new TouchSpinCore(inputEl, opts ?? {});\n}\n\nexport default TouchSpinCore;\n\n// Note: AbstractRenderer is not exported as it's only needed by renderer implementations\n// Renderers should import it directly: import AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n"]}