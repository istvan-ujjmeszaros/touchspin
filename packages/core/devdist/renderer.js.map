{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../src/renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,IAAI,gBAAgB,EAAE,MAAM,oBAAoB,CAAC","sourcesContent":["export { default as AbstractRenderer } from './AbstractRenderer';\nexport type {\n  RendererOptionKind,\n  RendererOptionDef,\n  RendererOptionSchema,\n  InferOptionsFromSchema,\n} from './AbstractRenderer';\n\n// Canonical Renderer interface and constructor type for TouchSpin\n// Exposed under the subpath '@touchspin/core/renderer'\nimport type { TouchSpinCoreOptions } from './index';\n\n// Minimal instance surface used by core. Renderers may implement more.\nexport interface Renderer {\n  init(): void;\n  finalizeWrapperAttributes(): void;\n  teardown?(): void;\n}\n\n// Constructor signature for renderer classes\nexport type CoreFacade = {\n  attachUpEvents: (el: HTMLElement | null) => void;\n  attachDownEvents: (el: HTMLElement | null) => void;\n  observeSetting: (key: string, cb: (value: unknown) => void) => () => void;\n};\n\nexport type RendererConstructor = new (\n  inputEl: HTMLInputElement,\n  settings: Readonly<Record<string, unknown>>,\n  core: CoreFacade\n) => Renderer;\n\n// Optionally exposed element bag type for renderer implementations\nexport type RendererElements = {\n  input: HTMLInputElement;\n  up: HTMLButtonElement | HTMLElement;\n  down: HTMLButtonElement | HTMLElement;\n  container: HTMLElement;\n};\n\n// Back-compat type aliases to preserve existing imports\nexport type TSRenderer = RendererConstructor;\nexport type TSElements = RendererElements;\n"]}