{"version":3,"file":"AbstractRenderer.js","sourceRoot":"","sources":["../src/AbstractRenderer.ts"],"names":[],"mappings":"AAsCA,MAAe,gBAAgB;IAkB7B,YAAY,OAAyB,EAAE,QAAwC,EAAE,IAAwP;QACvU,4BAA4B;QAC5B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,+BAA+B;QACzD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,mDAAmD;QACrE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,kCAAkC;QACvD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,CAAC,6EAA6E;QAE3G,qDAAqD;IACvD,CAAC;IASD;;;;OAIG;IACH,QAAQ;QACN,wDAAwD;QACxD,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,8CAA8C;IAChD,CAAC;IAED;;;;OAIG;IACH,sBAAsB;QACpB,sEAAsE;QACtE,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,CAAC;YAC5E,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAE,EAAkB,CAAC,MAAM,EAAE,CAAC,CAAC;YAEvD,gEAAgE;YAChE,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,yBAAyB,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;gBACvF,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,yBAAyB,CAAC,CAAC;gBAE1E,IAAI,YAAY,KAAK,kBAAkB,EAAE,CAAC;oBACxC,6EAA6E;oBAC7E,qDAAqD;oBACrD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;oBACrD,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;gBAC1D,CAAC;qBAAM,CAAC;oBACN,iDAAiD;oBACjD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,aAA4B,CAAC;oBACzD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC9C,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACxB,CAAC;YACH,CAAC;QACH,CAAC;QAED,sEAAsE;QACtE,MAAM,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,CAAC;QAC3E,WAAW,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;YACzB,sFAAsF;YACtF,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;gBACvB,CAAC,EAAE,CAAC,aAAa,IAAI,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3D,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC/E,gCAAgC;gBAChC,IAAI,EAAE,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;oBACrB,EAAkB,CAAC,MAAM,EAAE,CAAC;gBAC/B,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oDAAoD;IACpD,wEAAwE;IAExE;;;OAGG;IACH,iBAAiB;QACf,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,WAAW;YAAE,OAAO,iBAAiB,WAAW,MAAM,CAAC;QAC3D,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;OAGG;IACH,mBAAmB;QACjB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,WAAW;YAAE,OAAO,iBAAiB,WAAW,QAAQ,CAAC;QAC7D,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,WAAW;YAAE,OAAO,iBAAiB,WAAW,UAAU,CAAC;QAC/D,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACd,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,WAAW;YAAE,OAAO,iBAAiB,WAAW,WAAW,CAAC;QAChE,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACH,yBAAyB;QACvB,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,oEAAoE;YACpE,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YACtD,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,CAAC;gBACxD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,GAAG,UAAU,CAAC,CAAC;YAChE,CAAC;YAED,uDAAuD;YACvD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,yBAAyB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;IAED;;;OAGG;IACO,sBAAsB,CAC9B,MAAS,EACT,OAAgC,IAAI,CAAC,QAA8C;QAEnF,MAAM,GAAG,GAA4B,EAAE,CAAC;QACxC,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;YACzB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC;gBACpD,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;QACH,CAAC;QACD,OAAO,GAAmD,CAAC;IAC7D,CAAC;CACF;AAED,eAAe,gBAAgB,CAAC","sourcesContent":["/**\n * AbstractRenderer - Base class for TouchSpin renderers\n * Part of @touchspin/core package to avoid duplication across renderer packages\n *\n * @example\n * class CustomRenderer extends AbstractRenderer {\n *   init() {\n *     this.wrapper = this.buildUI();\n *     const upBtn = this.wrapper.querySelector('[data-touchspin-injected=\"up\"]');\n *     const downBtn = this.wrapper.querySelector('[data-touchspin-injected=\"down\"]');\n *     this.core.attachUpEvents(upBtn);\n *     this.core.attachDownEvents(downBtn);\n *     this.core.observeSetting('prefix', (value) => this.updatePrefix(value));\n *   }\n * }\n */\nimport type { TouchSpinCoreOptions } from './index';\nimport type { Renderer } from './renderer';\n\nexport type RendererOptionKind = 'string' | 'boolean' | 'number' | 'enum';\nexport type RendererOptionDef =\n  | { kind: 'string' }\n  | { kind: 'boolean' }\n  | { kind: 'number' }\n  | { kind: 'enum'; values: readonly string[] };\nexport type RendererOptionSchema = Readonly<Record<string, RendererOptionDef>>;\n\ntype InferOption<S extends RendererOptionDef> =\n  S extends { kind: 'string' } ? string | undefined\n    : S extends { kind: 'boolean' } ? boolean | undefined\n    : S extends { kind: 'number' } ? number | undefined\n    : S extends { kind: 'enum'; values: readonly (infer V)[] } ? V | undefined\n    : unknown;\n\nexport type InferOptionsFromSchema<S extends RendererOptionSchema> = {\n  [K in keyof S]: InferOption<S[K]>;\n};\n\nabstract class AbstractRenderer implements Renderer {\n  /**\n   * @param {HTMLInputElement} inputEl - The input element to render around\n   * @param {Object} settings - TouchSpin settings (read-only)\n   * @param {Object} core - TouchSpin core instance for event delegation\n   */\n  input: HTMLInputElement;\n  settings: Readonly<TouchSpinCoreOptions>;\n  // Core instance provides specific methods used by renderers\n  // Using a structural type to avoid circular import\n  core: {\n    attachUpEvents: (el: HTMLElement | null) => void;\n    attachDownEvents: (el: HTMLElement | null) => void;\n    observeSetting: <K extends keyof TouchSpinCoreOptions>(key: K, cb: (value: NonNullable<TouchSpinCoreOptions[K]>) => void) => () => void;\n  };\n  wrapper: HTMLElement | null;\n  wrapperType: string;\n\n  constructor(inputEl: HTMLInputElement, settings: Readonly<TouchSpinCoreOptions>, core: { attachUpEvents: (el: HTMLElement | null) => void; attachDownEvents: (el: HTMLElement | null) => void; observeSetting: <K extends keyof TouchSpinCoreOptions>(key: K, cb: (value: NonNullable<TouchSpinCoreOptions[K]>) => void) => () => void; }) {\n    // New renderer architecture\n    this.input = inputEl;\n    this.settings = settings; // Read-only access to settings\n    this.core = core; // Reference to core for calling attachment methods\n    this.wrapper = null; // Set by subclasses during init()\n    this.wrapperType = 'wrapper'; // Default wrapper type, set to 'wrapper-advanced' by buildAdvancedInputGroup\n\n    // No legacy properties needed in modern architecture\n  }\n\n  /**\n   * Initialize the renderer - build DOM structure and attach events\n   * Must be implemented by subclasses\n   * @abstract\n   */\n  abstract init(): void;\n\n  /**\n   * Cleanup renderer - remove injected elements and restore original state\n   * Default implementation removes all injected elements\n   * Subclasses can override for custom teardown\n   */\n  teardown(): void {\n    // Default implementation - remove all injected elements\n    this.removeInjectedElements();\n    // Subclasses can override for custom teardown\n  }\n\n  /**\n   * Utility method to remove all injected TouchSpin elements\n   * Handles both regular wrappers and advanced input groups\n   * Called automatically by teardown()\n   */\n  removeInjectedElements(): void {\n    // Find and remove all elements with data-touchspin-injected attribute\n    if (this.wrapper) {\n      const injected = this.wrapper.querySelectorAll('[data-touchspin-injected]');\n      injected.forEach((el) => (el as HTMLElement).remove());\n\n      // If wrapper itself was injected and is not the original parent\n      if (this.wrapper.hasAttribute('data-touchspin-injected') && this.wrapper.parentElement) {\n        const injectedType = this.wrapper.getAttribute('data-touchspin-injected');\n\n        if (injectedType === 'wrapper-advanced') {\n          // For advanced input groups, just remove the TouchSpin classes and attribute\n          // but keep the original input-group structure intact\n          this.wrapper.classList.remove('bootstrap-touchspin');\n          this.wrapper.removeAttribute('data-touchspin-injected');\n        } else {\n          // For regular wrappers, unwrap the input element\n          const parent = this.wrapper.parentElement as HTMLElement;\n          parent.insertBefore(this.input, this.wrapper);\n          this.wrapper.remove();\n        }\n      }\n    }\n\n    // Also find any injected elements that might be siblings or elsewhere\n    const allInjected = document.querySelectorAll('[data-touchspin-injected]');\n    allInjected.forEach((el) => {\n      // Only remove if it's related to this input (check if input is descendant or sibling)\n      if (el.contains(this.input) ||\n          (el.parentElement && el.parentElement.contains(this.input)) ||\n          (this.input.parentElement ? this.input.parentElement.contains(el) : false)) {\n        // Don't remove the input itself\n        if (el !== this.input) {\n          (el as HTMLElement).remove();\n        }\n      }\n    });\n  }\n\n  // All legacy jQuery-based methods have been removed\n  // Modern renderers implement their own init() method and use vanilla JS\n\n  /**\n   * Get testid attribute for up button\n   * @returns {string} Testid attribute or empty string\n   */\n  getUpButtonTestId(): string {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-up\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for down button\n   * @returns {string} Testid attribute or empty string\n   */\n  getDownButtonTestId(): string {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-down\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for prefix element\n   * @returns {string} Testid attribute or empty string\n   */\n  getPrefixTestId(): string {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-prefix\"`;\n    return '';\n  }\n\n  /**\n   * Get testid attribute for postfix element\n   * @returns {string} Testid attribute or empty string\n   */\n  getPostfixTestId(): string {\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) return ` data-testid=\"${inputTestId}-postfix\"`;\n    return '';\n  }\n\n  /**\n   * Finalize wrapper attributes after DOM construction and event attachment.\n   * Sets both data-testid and data-touchspin-injected attributes.\n   * Called by core as the final initialization step.\n   */\n  finalizeWrapperAttributes(): void {\n    if (this.wrapper) {\n      // Set test ID if input has one and wrapper doesn't already have one\n      const testid = this.input.getAttribute('data-testid');\n      if (testid && !this.wrapper.hasAttribute('data-testid')) {\n        this.wrapper.setAttribute('data-testid', testid + '-wrapper');\n      }\n\n      // Mark component as ready (DOM built, events attached)\n      this.wrapper.setAttribute('data-touchspin-injected', this.wrapperType);\n    }\n  }\n\n  /**\n   * Helper to project flat core settings into a typed renderer-specific view.\n   * No coercion; simply narrows known keys per schema for better DX.\n   */\n  protected projectRendererOptions<S extends RendererOptionSchema>(\n    schema: S,\n    from: Record<string, unknown> = this.settings as unknown as Record<string, unknown>\n  ): Readonly<Partial<InferOptionsFromSchema<S>>> {\n    const out: Record<string, unknown> = {};\n    for (const key in schema) {\n      if (Object.prototype.hasOwnProperty.call(from, key)) {\n        out[key] = from[key];\n      }\n    }\n    return out as Readonly<Partial<InferOptionsFromSchema<S>>>;\n  }\n}\n\nexport default AbstractRenderer;\n"]}