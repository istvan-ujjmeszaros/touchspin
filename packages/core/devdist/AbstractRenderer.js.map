{"version":3,"file":"AbstractRenderer.js","sourceRoot":"","sources":["../src/AbstractRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TouchSpinCoreOptions } from './index';\nimport type { Renderer } from './renderer';\n\nexport type RendererOptionKind = 'string' | 'boolean' | 'number' | 'enum';\n\ntype RendererOptionDefinition =\n  | { kind: 'string' }\n  | { kind: 'boolean' }\n  | { kind: 'number' }\n  | { kind: 'enum'; values: readonly string[] };\n\nexport type RendererOptionDef = RendererOptionDefinition;\nexport type RendererOptionSchema = Readonly<Record<string, RendererOptionDefinition>>;\n\ntype RendererOptionValue<Definition extends RendererOptionDefinition> =\n  Definition extends { kind: 'string' }\n    ? string | undefined\n    : Definition extends { kind: 'boolean' }\n    ? boolean | undefined\n    : Definition extends { kind: 'number' }\n    ? number | undefined\n    : Definition extends { kind: 'enum'; values: readonly (infer Option)[] }\n    ? Option | undefined\n    : unknown;\n\nexport type InferOptionsFromSchema<Schema extends RendererOptionSchema> = {\n  [Key in keyof Schema]: RendererOptionValue<Schema[Key]>;\n};\n\ntype RendererCoreBridge = {\n  attachUpEvents: (element: HTMLElement | null) => void;\n  attachDownEvents: (element: HTMLElement | null) => void;\n  observeSetting: <Key extends keyof TouchSpinCoreOptions>(\n    key: Key,\n    listener: (value: NonNullable<TouchSpinCoreOptions[Key]>) => void\n  ) => () => void;\n};\n\ntype SettingsRecord = Record<string, unknown>;\n\nconst TOUCHSPIN_ATTRIBUTE = 'data-touchspin-injected';\nconst TEST_ID_ATTRIBUTE = 'data-testid';\nconst WRAPPER_TYPE_DEFAULT = 'wrapper';\nconst WRAPPER_TYPE_ADVANCED = 'wrapper-advanced';\nconst WRAPPER_READY_CLASS = 'bootstrap-touchspin';\n\nabstract class AbstractRenderer implements Renderer {\n  protected readonly input: HTMLInputElement;\n  protected readonly settings: Readonly<TouchSpinCoreOptions>;\n  protected readonly core: RendererCoreBridge;\n\n  protected wrapper: HTMLElement | null = null;\n  protected wrapperType = WRAPPER_TYPE_DEFAULT;\n\n  constructor(\n    input: HTMLInputElement,\n    settings: Readonly<TouchSpinCoreOptions>,\n    core: RendererCoreBridge\n  ) {\n    this.input = input;\n    this.settings = settings;\n    this.core = core;\n  }\n\n  abstract init(): void;\n\n  teardown(): void {\n    this.removeInjectedElements();\n  }\n\n  removeInjectedElements(): void {\n    this.removeInjectedNodesWithinWrapper();\n    this.removeNearbyInjectedNodes();\n  }\n\n  finalizeWrapperAttributes(): void {\n    if (!this.wrapper) return;\n\n    const testId = this.input.getAttribute(TEST_ID_ATTRIBUTE);\n    if (testId && !this.wrapper.hasAttribute(TEST_ID_ATTRIBUTE)) {\n      this.wrapper.setAttribute(TEST_ID_ATTRIBUTE, `${testId}-wrapper`);\n    }\n\n    this.wrapper.setAttribute(TOUCHSPIN_ATTRIBUTE, this.wrapperType);\n  }\n\n  getUpButtonTestId(): string {\n    return this.buildDataTestId('up');\n  }\n\n  getDownButtonTestId(): string {\n    return this.buildDataTestId('down');\n  }\n\n  getPrefixTestId(): string {\n    return this.buildDataTestId('prefix');\n  }\n\n  getPostfixTestId(): string {\n    return this.buildDataTestId('postfix');\n  }\n\n  protected extractRendererSettings<Schema extends RendererOptionSchema>(\n    schema: Schema,\n    sourceSettings: SettingsRecord = this.settings as SettingsRecord\n  ): Readonly<Partial<InferOptionsFromSchema<Schema>>> {\n    const selected: Record<string, unknown> = {};\n\n    for (const key in schema) {\n      if (Object.prototype.hasOwnProperty.call(sourceSettings, key)) {\n        selected[key] = sourceSettings[key];\n      }\n    }\n\n    return selected as Readonly<Partial<InferOptionsFromSchema<Schema>>>;\n  }\n\n  // Backward compatibility alias\n  protected projectRendererOptions<Schema extends RendererOptionSchema>(\n    schema: Schema,\n    from: Record<string, unknown> = this.settings as Record<string, unknown>\n  ): Readonly<Partial<InferOptionsFromSchema<Schema>>> {\n    return this.extractRendererSettings(schema, from);\n  }\n\n  private removeInjectedNodesWithinWrapper(): void {\n    const { wrapper } = this;\n    if (!wrapper) return;\n\n    wrapper\n      .querySelectorAll(`[${TOUCHSPIN_ATTRIBUTE}]`)\n      .forEach((element) => (element as HTMLElement).remove());\n\n    if (!wrapper.hasAttribute(TOUCHSPIN_ATTRIBUTE) || !wrapper.parentElement) {\n      return;\n    }\n\n    const wrapperType = wrapper.getAttribute(TOUCHSPIN_ATTRIBUTE);\n    if (wrapperType === WRAPPER_TYPE_ADVANCED) {\n      wrapper.classList.remove(WRAPPER_READY_CLASS);\n      wrapper.removeAttribute(TOUCHSPIN_ATTRIBUTE);\n      return;\n    }\n\n    wrapper.parentElement.insertBefore(this.input, wrapper);\n    wrapper.remove();\n  }\n\n  private removeNearbyInjectedNodes(): void {\n    const injectedNodes = document.querySelectorAll(`[${TOUCHSPIN_ATTRIBUTE}]`);\n\n    injectedNodes.forEach((node) => {\n      if (!(node instanceof HTMLElement)) return;\n      if (node === this.input) return;\n      if (!this.isNodeRelatedToInput(node)) return;\n\n      node.remove();\n    });\n  }\n\n  private isNodeRelatedToInput(node: Element): boolean {\n    const parent = node.parentElement;\n    const inputParent = this.input.parentElement;\n\n    const nodeContainsInput = node.contains(this.input);\n    const parentContainsInput = parent?.contains(this.input) ?? false;\n    const inputContainsNode = inputParent?.contains(node) ?? false;\n\n    return nodeContainsInput || parentContainsInput || inputContainsNode;\n  }\n\n  private buildDataTestId(suffix: string): string {\n    const base = this.input.getAttribute(TEST_ID_ATTRIBUTE);\n    return base ? ` data-testid=\"${base}-${suffix}\"` : '';\n  }\n}\n\nexport default AbstractRenderer;\n"]}