{"version":3,"sources":["../../../../core/src/events.ts","../../../../core/src/index.ts","../../../../core/src/AbstractRenderer.ts","../../src/Bootstrap5Renderer.ts","../../src/touchspin-bs5-complete.ts"],"sourcesContent":["/**\n * TouchSpin Event Types\n * Provides type safety for event names used throughout TouchSpin ecosystem\n */\n\n/**\n * Callable events that can be triggered on TouchSpin jQuery instances\n * These events tell TouchSpin to perform an action\n */\nexport enum TouchSpinCallableEvent {\n  /** Update TouchSpin settings */\n  UPDATE_SETTINGS = 'touchspin.updatesettings',\n\n  /** Increment value by one step */\n  UP_ONCE = 'touchspin.uponce',\n\n  /** Decrement value by one step */\n  DOWN_ONCE = 'touchspin.downonce',\n\n  /** Start continuous upward spinning */\n  START_UP_SPIN = 'touchspin.startupspin',\n\n  /** Start continuous downward spinning */\n  START_DOWN_SPIN = 'touchspin.startdownspin',\n\n  /** Stop any continuous spinning */\n  STOP_SPIN = 'touchspin.stopspin',\n\n  /** Destroy the TouchSpin instance */\n  DESTROY = 'touchspin.destroy'\n}\n\n/**\n * Events emitted by TouchSpin during operation\n * These events notify when something has happened\n */\nexport enum TouchSpinEmittedEvent {\n  /** Fired when minimum boundary is reached */\n  ON_MIN = 'touchspin.on.min',\n\n  /** Fired when maximum boundary is reached */\n  ON_MAX = 'touchspin.on.max',\n\n  /** Fired when any spinning starts */\n  ON_START_SPIN = 'touchspin.on.startspin',\n\n  /** Fired when any spinning stops */\n  ON_STOP_SPIN = 'touchspin.on.stopspin',\n\n  /** Fired when upward spinning starts */\n  ON_START_UP_SPIN = 'touchspin.on.startupspin',\n\n  /** Fired when downward spinning starts */\n  ON_START_DOWN_SPIN = 'touchspin.on.startdownspin',\n\n  /** Fired when upward spinning stops */\n  ON_STOP_UP_SPIN = 'touchspin.on.stopupspin',\n\n  /** Fired when downward spinning stops */\n  ON_STOP_DOWN_SPIN = 'touchspin.on.stopdownspin'\n}\n\n/**\n * Type for update settings event data\n */\nexport interface TouchSpinUpdateSettingsData {\n  [key: string]: unknown;\n}\n","/**\n * Framework-agnostic core for TouchSpin (TypeScript)\n */\n\nexport type ForceStepDivisibility = 'none' | 'floor' | 'round' | 'ceil';\n\nexport type TouchSpinCalcCallback = (value: string) => string;\n\n// Export event types\nexport { TouchSpinCallableEvent, TouchSpinEmittedEvent } from './events.js';\nexport type { TouchSpinUpdateSettingsData } from './events.js';\n\nimport type { Renderer, RendererConstructor } from './renderer.js';\ntype WithCoreElement = HTMLInputElement & { [INSTANCE_KEY]?: TouchSpinCore };\n\nexport interface TouchSpinCoreOptions {\n  min?: number | null;\n  max?: number | null;\n  firstclickvalueifempty?: number | null;\n  step?: number;\n  decimals?: number;\n  forcestepdivisibility?: ForceStepDivisibility;\n  stepinterval?: number;\n  stepintervaldelay?: number;\n  booster?: boolean;\n  boostat?: number;\n  maxboostedstep?: number | false;\n  callback_before_calculation?: TouchSpinCalcCallback;\n  callback_after_calculation?: TouchSpinCalcCallback;\n  // Renderer constructor (e.g., Bootstrap5Renderer) or null for no UI\n  renderer?: RendererConstructor | null | undefined;\n  initval?: string | number;\n  replacementval?: string | number;\n  mousewheel?: boolean;\n  verticalbuttons?: boolean;\n  verticalup?: string;\n  verticaldown?: string;\n  verticalupclass?: string | null;\n  verticaldownclass?: string | null;\n  focusablebuttons?: boolean;\n  prefix?: string;\n  postfix?: string;\n  prefix_extraclass?: string;\n  postfix_extraclass?: string;\n  buttonup_class?: string | null;\n  buttondown_class?: string | null;\n  buttonup_txt?: string;\n  buttondown_txt?: string;\n}\n\n\nconst DEFAULTS: Required<Omit<TouchSpinCoreOptions, 'renderer'>> & { renderer: null } = {\n  min: 0,\n  max: 100,\n  initval: '',\n  replacementval: '',\n  firstclickvalueifempty: null,\n  step: 1,\n  decimals: 0,\n  forcestepdivisibility: 'round',\n  stepinterval: 100,\n  stepintervaldelay: 500,\n  verticalbuttons: false,\n  verticalup: '+',\n  verticaldown: 'âˆ’',\n  verticalupclass: null,\n  verticaldownclass: null,\n  focusablebuttons: false,\n  prefix: '',\n  postfix: '',\n  prefix_extraclass: '',\n  postfix_extraclass: '',\n  booster: true,\n  boostat: 10,\n  maxboostedstep: false,\n  mousewheel: true,\n  buttonup_class: null,\n  buttondown_class: null,\n  buttonup_txt: '+',\n  buttondown_txt: '&minus;',\n  callback_before_calculation: (v) => v,\n  callback_after_calculation: (v) => v,\n  renderer: null,\n};\n\nconst INSTANCE_KEY = '_touchSpinCore' as const;\n\ntype CoreEventName = 'min' | 'max' | 'startspin' | 'startupspin' | 'startdownspin' | 'stopspin' | 'stopupspin' | 'stopdownspin';\n\nexport class TouchSpinCore {\n  input: HTMLInputElement;\n  settings: TouchSpinCoreOptions;\n  spinning: boolean;\n  spincount: number;\n  direction: false | 'up' | 'down';\n  private _teardownCallbacks: Array<() => void> = [];\n  private _settingObservers: Map<string, Set<(value: unknown, prev?: unknown) => void>> = new Map();\n  private _spinDelayTimeout: ReturnType<typeof setTimeout> | null = null;\n  private _spinIntervalTimer: ReturnType<typeof setInterval> | null = null;\n  private _upButton: (HTMLElement & { disabled?: boolean }) | null = null;\n  private _originalAttributes: {\n    type: string | null;\n    attributes: Map<string, string | null>;\n  } | null = null;\n  private _downButton: (HTMLElement & { disabled?: boolean }) | null = null;\n  private _wrapper: HTMLElement | null = null;\n  private _mutationObserver: MutationObserver | null = null;\n  renderer?: Renderer;\n  /**\n   * Sanitize a partial settings object BEFORE applying it.\n   * Returns a new object with only provided keys normalized.\n   * @param {Partial<TouchSpinCoreOptions>} partial\n   * @param {TouchSpinCoreOptions} current\n   * @returns {Partial<TouchSpinCoreOptions>}\n   */\n  static sanitizePartialSettings(partial: Partial<TouchSpinCoreOptions>, current: TouchSpinCoreOptions): Partial<TouchSpinCoreOptions> {\n    const out = { ...partial };\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'step')) {\n      const n = Number(partial.step);\n      out.step = (isFinite(n) && n > 0) ? n : 1;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'decimals')) {\n      const n = Number(partial.decimals);\n      out.decimals = (isFinite(n) && n >= 0) ? Math.floor(n) : 0;\n    }\n\n    const hasMin = Object.prototype.hasOwnProperty.call(partial, 'min');\n    const hasMax = Object.prototype.hasOwnProperty.call(partial, 'max');\n    if (hasMin) {\n      if (partial.min === null || partial.min === undefined || (typeof partial.min === 'string' && partial.min === '')) {\n        out.min = null;\n      } else {\n        const n = Number(partial.min);\n        out.min = isFinite(n) ? n : null;\n      }\n    }\n    if (hasMax) {\n      if (partial.max === null || partial.max === undefined || (typeof partial.max === 'string' && partial.max === '')) {\n        out.max = null;\n      } else {\n        const n = Number(partial.max);\n        out.max = isFinite(n) ? n : null;\n      }\n    }\n    if (\n      hasMin && hasMax &&\n      out.min != null && out.max != null &&\n      typeof out.min === 'number' && typeof out.max === 'number' &&\n      out.min > out.max\n    ) {\n      const tmp = out.min; out.min = out.max; out.max = tmp;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(partial, 'stepinterval')) {\n      const n = Number(partial.stepinterval);\n      out.stepinterval = (isFinite(n) && n >= 0) ? n : DEFAULTS.stepinterval;\n    }\n    if (Object.prototype.hasOwnProperty.call(partial, 'stepintervaldelay')) {\n      const n = Number(partial.stepintervaldelay);\n      out.stepintervaldelay = (isFinite(n) && n >= 0) ? n : DEFAULTS.stepintervaldelay;\n    }\n\n    return out;\n  }\n  /**\n   * @param inputEl The input element\n   * @param opts Partial settings\n   */\n  constructor(inputEl: HTMLInputElement, opts: Partial<TouchSpinCoreOptions> = {}) {\n    if (!inputEl || inputEl.nodeName !== 'INPUT') {\n      throw new Error('TouchSpinCore requires an <input> element');\n    }\n\n    /** @type {HTMLInputElement} */\n    this.input = inputEl;\n\n    // Parse data-bts-* attributes\n    const dataAttrs = this._parseDataAttributes(inputEl);\n\n    // Allow global default options (e.g., to set a global default renderer or defaults)\n    /** @type {Partial<TouchSpinCoreOptions>} */\n    const globalDefaults = (typeof globalThis !== 'undefined' &&\n      (globalThis as unknown as { TouchSpinDefaultOptions?: Partial<TouchSpinCoreOptions> }).TouchSpinDefaultOptions)\n      ? TouchSpinCore.sanitizePartialSettings(\n          (globalThis as unknown as { TouchSpinDefaultOptions?: Partial<TouchSpinCoreOptions> }).TouchSpinDefaultOptions!,\n          DEFAULTS\n        )\n      : {};\n\n    /** @type {TouchSpinCoreOptions} */\n    this.settings = Object.assign({}, DEFAULTS, globalDefaults, dataAttrs, opts);\n    // Sanitize settings to ensure safe, predictable behavior\n    this._sanitizeSettings();\n\n    // Check for renderer: explicit option > global default > none\n    if (!this.settings.renderer) {\n      // Check for global default renderer\n      const g = globalThis as unknown as { TouchSpinDefaultRenderer?: RendererConstructor };\n      if (typeof g !== 'undefined' && g.TouchSpinDefaultRenderer) {\n        this.settings.renderer = g.TouchSpinDefaultRenderer;\n      } else {\n        // Allow no renderer for keyboard/wheel-only functionality\n        console.warn('TouchSpin: No renderer specified (renderer: null). Only keyboard/wheel events will work. Consider using Bootstrap3/4/5Renderer or TailwindRenderer for UI.');\n      }\n    }\n\n    /** @type {boolean} */\n    this.spinning = false;\n    /** @type {number} */\n    this.spincount = 0;\n    /** @type {false|'up'|'down'} */\n    this.direction = false;\n    /** @type {Array<Function>} */\n    this._teardownCallbacks = [];\n    /** @type {Map<string, Set<Function>>} */\n    this._settingObservers = new Map(); // For observer pattern\n\n    /** @type {ReturnType<typeof setTimeout>|null} */\n    this._spinDelayTimeout = null;\n    /** @type {ReturnType<typeof setInterval>|null} */\n    this._spinIntervalTimer = null;\n\n    /** @type {HTMLElement|null} */\n    this._upButton = null;\n    /** @type {HTMLElement|null} */\n    this._downButton = null;\n    /** @type {HTMLElement|null} */\n    this._wrapper = null;\n\n    // DOM event handlers (bound methods)\n    this._handleUpMouseDown = this._handleUpMouseDown.bind(this);\n    this._handleDownMouseDown = this._handleDownMouseDown.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this._handleUpKeyDown = this._handleUpKeyDown.bind(this);\n    this._handleUpKeyUp = this._handleUpKeyUp.bind(this);\n    this._handleDownKeyDown = this._handleDownKeyDown.bind(this);\n    this._handleDownKeyUp = this._handleDownKeyUp.bind(this);\n    this._handleWindowChangeCapture = this._handleWindowChangeCapture.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this._handleKeyUp = this._handleKeyUp.bind(this);\n    this._handleWheel = this._handleWheel.bind(this);\n\n    // Core always manages the input element\n    this._initializeInput();\n\n    // Initialize renderer with reference to core\n    if (this.settings.renderer) {\n      const Ctor = this.settings.renderer as unknown as new (\n        inputEl: HTMLInputElement,\n        settings: Readonly<Record<string, unknown>>,\n        core: unknown\n      ) => Renderer;\n      this.renderer = new Ctor(inputEl, this.settings as unknown as Readonly<Record<string, unknown>>, this);\n      this.renderer.init();\n    }\n\n    // Set up mutation observer to watch for disabled/readonly changes\n    this._setupMutationObserver();\n\n    // Finalize wrapper attributes after complete initialization\n    //\n    // The data-touchspin-injected attribute serves as a marker that the TouchSpin\n    // component is fully constructed - DOM is built, event handlers are attached,\n    // and mutation observer is active. Tests use this attribute to detect when\n    // components are ready for interaction.\n    //\n    // By setting these attributes as the final initialization step, we prevent race\n    // conditions where tests might try to interact with components before their DOM\n    // structure, event handlers, or internal monitoring are ready. This is especially\n    // important under high CPU load where DOM operations may take longer.\n    //\n    // Complete initialization sequence:\n    // 1. renderer.init() - Constructs DOM and attaches event handlers\n    // 2. _setupMutationObserver() - Starts monitoring input attribute changes\n    // 3. renderer.finalizeWrapperAttributes() - Marks component as ready:\n    //    - Adds data-testid for test element selection\n    //    - Adds data-touchspin-injected to signal component is fully ready\n    if (this.renderer) {\n      this.renderer.finalizeWrapperAttributes();\n    }\n\n    this.input.setAttribute('data-touchspin-injected', 'input');\n  }\n\n  /**\n   * Initialize input element (core always handles this)\n   * @private\n   */\n  _initializeInput(): void {\n    // Capture original attributes before TouchSpin modifies anything\n    this._captureOriginalAttributes();\n\n    // Set initial value if specified and input is empty\n    const initVal = this.settings.initval ?? '';\n    if (initVal !== '' && this.input.value === '') {\n      this.input.value = String(initVal);\n    }\n\n    // Core always handles these for the input\n    this._updateAriaAttributes();\n    this._syncNativeAttributes();\n    this._checkValue(false);\n  }\n\n  /**\n   * Normalize and validate settings: coerce invalid values to safe defaults.\n   * - step: > 0 number, otherwise 1\n   * - decimals: integer >= 0, otherwise 0\n   * - min/max: finite numbers or null\n   * - stepinterval/stepintervaldelay: integers >= 0 (fallback to defaults if invalid)\n   * @private\n   */\n  _sanitizeSettings(): void {\n    // step\n    const stepNum = Number(this.settings.step);\n    if (!isFinite(stepNum) || stepNum <= 0) {\n      this.settings.step = 1;\n    } else {\n      this.settings.step = stepNum;\n    }\n\n    // decimals\n    const decNum = Number(this.settings.decimals);\n    if (!isFinite(decNum) || decNum < 0) {\n      this.settings.decimals = 0;\n    } else {\n      this.settings.decimals = Math.floor(decNum);\n    }\n\n    // min/max\n    // Preserve explicit nulls; coerce other values to numbers or null\n    if (this.settings.min === null || this.settings.min === undefined || (typeof this.settings.min === 'string' && this.settings.min === '')) {\n      this.settings.min = null;\n    } else {\n      const minNum = Number(this.settings.min);\n      this.settings.min = isFinite(minNum) ? minNum : null;\n    }\n    if (this.settings.max === null || this.settings.max === undefined || (typeof this.settings.max === 'string' && this.settings.max === '')) {\n      this.settings.max = null;\n    } else {\n      const maxNum = Number(this.settings.max);\n      this.settings.max = isFinite(maxNum) ? maxNum : null;\n    }\n\n    // Ensure min <= max when both present\n    if (this.settings.min !== null && this.settings.max !== null && this.settings.min > this.settings.max) {\n      // Swap to maintain logical bounds\n      const tmp = this.settings.min;\n      this.settings.min = this.settings.max;\n      this.settings.max = tmp;\n    }\n\n    // stepinterval\n    const si = Number(this.settings.stepinterval);\n    if (!isFinite(si) || si < 0) this.settings.stepinterval = DEFAULTS.stepinterval;\n\n    // stepintervaldelay\n    const sid = Number(this.settings.stepintervaldelay);\n    if (!isFinite(sid) || sid < 0) this.settings.stepintervaldelay = DEFAULTS.stepintervaldelay;\n\n    // Validate callbacks and handle input type conversion if needed\n    this._validateCallbacks();\n\n    // Check for callback pairing and warn if needed\n    this._checkCallbackPairing();\n  }\n\n  /**\n   * Validate callbacks and automatically convert number inputs to text inputs\n   * when formatting callbacks that add non-numeric characters are detected.\n   * @private\n   */\n  _validateCallbacks(): void {\n    // Only validate for number inputs\n    const currentType = this.input.getAttribute('type');\n    if (currentType !== 'number') return;\n\n    // Only check if callbacks are set (not default)\n    const defaultCallback = (v: string) => v;\n    if (!this.settings.callback_after_calculation ||\n        this.settings.callback_after_calculation.toString() === defaultCallback.toString()) return;\n\n    // Test the callback with a sample value\n    const testValue = '123.45';\n    const afterResult = this.settings.callback_after_calculation(testValue);\n\n    // Check if result contains non-numeric characters\n    // Allow: optional minus, digits, optional decimal point and digits\n    if (!/^-?\\d*\\.?\\d*$/.test(afterResult)) {\n      console.warn(\n        'TouchSpin: Detected formatting callback that adds non-numeric characters. ' +\n        'Converting input from type=\"number\" to type=\"text\" to support formatting like \"' + afterResult + '\". ' +\n        'This ensures compatibility with custom formatting while maintaining full TouchSpin functionality. ' +\n        'The original type will be restored when TouchSpin is destroyed.'\n      );\n\n      // Capture original attributes before making any changes\n      this._captureOriginalAttributes();\n\n      // Convert input type to text to support formatting\n      this.input.setAttribute('type', 'text');\n\n      // Remove number-specific native attributes since they only work on number inputs\n      this.input.removeAttribute('min');\n      this.input.removeAttribute('max');\n      this.input.removeAttribute('step');\n    }\n  }\n\n  /**\n   * Capture the original attributes of the input before TouchSpin modifies them.\n   * This ensures complete transparency - the input can be restored to its exact original state.\n   * @private\n   */\n  _captureOriginalAttributes(): void {\n    if (this._originalAttributes !== null) return; // Already captured\n\n    const attributesToTrack = [\n      'role', 'aria-valuemin', 'aria-valuemax',\n      'aria-valuenow', 'aria-valuetext',\n      'min', 'max', 'step'\n    ];\n\n    this._originalAttributes = {\n      type: this.input.getAttribute('type'),\n      attributes: new Map()\n    };\n\n    // Store original values (null if attribute didn't exist)\n    attributesToTrack.forEach(attr => {\n      this._originalAttributes!.attributes.set(attr, this.input.getAttribute(attr));\n    });\n  }\n\n  /**\n   * Restore the input to its original state by restoring all original attributes.\n   * This ensures complete transparency - the input returns to its exact original state.\n   * @private\n   */\n  _restoreOriginalAttributes(): void {\n    if (this._originalAttributes === null) return; // Nothing to restore\n\n    // Strip formatting from value if converting back to number\n    const currentValue = this.input.value;\n    if (currentValue && this.settings.callback_before_calculation &&\n        this._originalAttributes.type === 'number' &&\n        this.input.getAttribute('type') === 'text') {\n      const numericValue = this.settings.callback_before_calculation(currentValue);\n      this.input.value = numericValue;\n    }\n\n    // Restore original type\n    if (this._originalAttributes.type) {\n      this.input.setAttribute('type', this._originalAttributes.type);\n    }\n\n    // Restore all original attributes\n    this._originalAttributes.attributes.forEach((originalValue, attrName) => {\n      if (originalValue === null) {\n        // Attribute didn't exist originally, remove it\n        this.input.removeAttribute(attrName);\n      } else {\n        // Restore original value\n        this.input.setAttribute(attrName, originalValue);\n      }\n    });\n\n    this._originalAttributes = null;\n  }\n\n  /**\n   * Parse data-bts-* attributes from the input element.\n   * @param {HTMLInputElement} inputEl\n   * @returns {Partial<TouchSpinCoreOptions>}\n   * @private\n   */\n  _parseDataAttributes(inputEl: HTMLInputElement): Partial<TouchSpinCoreOptions> {\n    const attributeMap: Partial<Record<keyof TouchSpinCoreOptions, string>> = {\n      min: 'min',\n      max: 'max',\n      initval: 'init-val',\n      replacementval: 'replacement-val',\n      firstclickvalueifempty: 'first-click-value-if-empty',\n      step: 'step',\n      decimals: 'decimals',\n      stepinterval: 'step-interval',\n      verticalbuttons: 'vertical-buttons',\n      verticalup: 'vertical-up',\n      verticaldown: 'vertical-down',\n      verticalupclass: 'vertical-up-class',\n      verticaldownclass: 'vertical-down-class',\n      forcestepdivisibility: 'force-step-divisibility',\n      stepintervaldelay: 'step-interval-delay',\n      prefix: 'prefix',\n      postfix: 'postfix',\n      prefix_extraclass: 'prefix-extra-class',\n      postfix_extraclass: 'postfix-extra-class',\n      booster: 'booster',\n      boostat: 'boostat',\n      maxboostedstep: 'max-boosted-step',\n      mousewheel: 'mouse-wheel',\n      buttondown_class: 'button-down-class',\n      buttonup_class: 'button-up-class',\n      buttondown_txt: 'button-down-txt',\n      buttonup_txt: 'button-up-txt'\n    };\n\n    const parsed: Partial<TouchSpinCoreOptions> = {};\n\n    // Parse data-bts-* attributes\n    for (const [optionName, attrName] of Object.entries(attributeMap) as Array<[keyof TouchSpinCoreOptions, string]>) {\n      const fullAttrName = `data-bts-${attrName}`;\n      if (inputEl.hasAttribute(fullAttrName)) {\n        const rawValue = inputEl.getAttribute(fullAttrName);\n        // Assign strongly typed value\n\n        // @ts-ignore - narrow via optionName switch\n        parsed[optionName] = this._coerceAttributeValue(optionName as string, rawValue ?? '');\n      }\n    }\n\n    // Also handle native attributes with precedence (warn if both specified)\n    for (const nativeAttr of ['min', 'max', 'step']) {\n      if (inputEl.hasAttribute(nativeAttr)) {\n        const rawValue = inputEl.getAttribute(nativeAttr);\n        if ((parsed as Record<string, unknown>)[nativeAttr] !== undefined) {\n          console.warn(`Both \"data-bts-${nativeAttr}\" and \"${nativeAttr}\" attributes specified. Native attribute takes precedence.`, inputEl);\n        }\n\n        // @ts-ignore\n        parsed[nativeAttr as keyof TouchSpinCoreOptions] = this._coerceAttributeValue(nativeAttr, rawValue ?? '');\n      }\n    }\n\n    return parsed;\n  }\n\n  /**\n   * Convert string attribute values to appropriate types.\n   * @param {string} optionName\n   * @param {string} rawValue\n   * @returns {any}\n   * @private\n   */\n  _coerceAttributeValue(optionName: string, rawValue: string) {\n    if (rawValue === null || rawValue === undefined) {\n      return rawValue;\n    }\n\n    // Boolean attributes\n    if (['booster', 'mousewheel', 'verticalbuttons', 'focusablebuttons'].includes(optionName)) {\n      return rawValue === 'true' || rawValue === '' || rawValue === optionName;\n    }\n\n    // Numeric attributes\n    if (['min', 'max', 'step', 'decimals', 'stepinterval', 'stepintervaldelay',\n         'boostat', 'maxboostedstep', 'firstclickvalueifempty'].includes(optionName)) {\n      const num = parseFloat(rawValue);\n      return isNaN(num) ? rawValue : num;\n    }\n\n    // String attributes - return as-is\n    return rawValue;\n  }\n\n  /** Increment once according to step */\n  upOnce(): void {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('up', v);\n\n    // Check if already at max boundary before incrementing\n    if (this.settings.max !== null && v === this.settings.max) {\n      // No event emission - just stop spinning if needed\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n      return;\n    }\n\n    // Fire max event BEFORE setting display if we're reaching max\n    if (this.settings.max !== null && next === this.settings.max) {\n      this.emit('max');\n      if (this.spinning && this.direction === 'up') {\n        this.stopSpin();\n      }\n    }\n\n    this._setDisplay(next, true);\n  }\n\n  /** Decrement once according to step */\n  downOnce(): void {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) {\n      return;\n    }\n\n    const v = this.getValue();\n    const next = this._nextValue('down', v);\n\n    // Check if already at min boundary before decrementing\n    if (this.settings.min !== null && v === this.settings.min) {\n      // No event emission - just stop spinning if needed\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n      return;\n    }\n\n    // Fire min event BEFORE setting display if we're reaching min\n    if (this.settings.min !== null && next === this.settings.min) {\n      this.emit('min');\n      if (this.spinning && this.direction === 'down') {\n        this.stopSpin();\n      }\n    }\n\n    this._setDisplay(next, true);\n  }\n\n  /** Start increasing repeatedly; no immediate step here. */\n  startUpSpin(): void {\n    this._startSpin('up');\n  }\n\n  /** Start decreasing repeatedly; no immediate step here. */\n  startDownSpin(): void {\n    this._startSpin('down');\n  }\n\n  /** Stop spinning (placeholder) */\n  stopSpin(): void {\n    this._clearSpinTimers();\n    if (this.spinning) {\n      if (this.direction === 'up') {\n        this.emit('stopupspin');\n        this.emit('stopspin');\n      } else if (this.direction === 'down') {\n        this.emit('stopdownspin');\n        this.emit('stopspin');\n      }\n    }\n    this.spinning = false;\n    this.direction = false;\n    this.spincount = 0;\n  }\n\n  updateSettings(opts: Partial<TouchSpinCoreOptions>): void {\n    const oldSettings = { ...this.settings };\n    const newSettings = opts || {};\n\n    // Sanitize the incoming partial BEFORE merge\n    const sanitizedPartial = TouchSpinCore.sanitizePartialSettings(newSettings, oldSettings);\n\n    // Apply incoming changes (sanitized) first\n    Object.assign(this.settings, sanitizedPartial);\n    // Extra safety: sanitize full settings after merge\n    this._sanitizeSettings();\n\n    // If step/min/max changed and step != 1, align bounds to step like the jQuery plugin\n    const step = Number(this.settings.step || 1);\n    if ((sanitizedPartial.step !== undefined || sanitizedPartial.min !== undefined || sanitizedPartial.max !== undefined) && step !== 1) {\n      if (this.settings.max !== null) {\n        this.settings.max = this._alignToStep(Number(this.settings.max), step, 'down');\n      }\n      if (this.settings.min !== null) {\n        this.settings.min = this._alignToStep(Number(this.settings.min), step, 'up');\n      }\n    }\n\n    // Notify observers of keys whose EFFECTIVE values changed after sanitization\n    (Object.keys(this.settings) as Array<keyof TouchSpinCoreOptions>).forEach((key) => {\n      if (oldSettings[key] !== this.settings[key]) {\n        const observers = this._settingObservers.get(String(key));\n        if (observers) {\n          observers.forEach(callback => {\n            try {\n              callback(this.settings[key] as unknown, oldSettings[key] as unknown);\n            } catch (error) {\n              console.error('TouchSpin: Error in setting observer callback:', error);\n            }\n          });\n        }\n      }\n    });\n\n    // Core handles its own setting changes\n    this._updateAriaAttributes();\n    this._syncNativeAttributes();\n    this._checkValue(true); // Emit change events when updateSettings clamps values\n\n    // Check for callback pairing and warn if needed\n    this._checkCallbackPairing();\n  }\n\n  getValue(): number {\n    let raw = this.input.value;\n    const repl = this.settings.replacementval ?? '';\n    if (raw === '' && repl !== '') {\n      raw = String(repl);\n    }\n    if (raw === '') return NaN;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    return isNaN(num) ? NaN : num;\n  }\n\n  setValue(v: number | string): void {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n    const parsed = Number(v);\n    if (!isFinite(parsed)) return;\n    const adjusted = this._applyConstraints(parsed);\n    const wasSanitized = parsed !== adjusted;\n    this._setDisplay(adjusted, true, wasSanitized, true);\n  }\n\n  /**\n   * Initialize DOM event handling by finding elements and attaching listeners.\n   * Must be called after the renderer has created the DOM structure.\n   */\n  initDOMEventHandling(): void {\n    // Find DOM elements and attach listeners\n    this._findDOMElements();\n    this._attachDOMEventListeners();\n  }\n\n  /**\n   * Register a teardown callback that will be called when the instance is destroyed.\n   * This allows wrapper libraries to register cleanup logic.\n   * @param {Function} callback - Function to call on destroy\n   * @returns {Function} - Unregister function\n   */\n  registerTeardown(callback: () => void): () => void {\n    if (typeof callback !== 'function') {\n      throw new Error('Teardown callback must be a function');\n    }\n    this._teardownCallbacks.push(callback);\n\n    // Return unregister function\n    return () => {\n      const index = this._teardownCallbacks.indexOf(callback);\n      if (index > -1) {\n        this._teardownCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /** Cleanup and destroy the TouchSpin instance */\n  destroy(): void {\n    // Remove the data-touchspin-injected attribute first to signal plugin is no longer ready\n    this.input.removeAttribute('data-touchspin-injected');\n\n    this.stopSpin();\n\n    // Renderer cleans up its added elements\n    if (this.renderer && this.renderer.teardown) {\n      this.renderer.teardown();\n    }\n\n    // Core cleans up input events only\n    this._detachDOMEventListeners();\n\n    // Call all registered teardown callbacks (for wrapper cleanup)\n    this._teardownCallbacks.forEach(callback => {\n      try {\n        callback();\n      } catch (error) {\n        console.error('TouchSpin teardown callback error:', error);\n      }\n    });\n    this._teardownCallbacks.length = 0; // Clear the array\n\n    // Clear setting observers\n    this._settingObservers.clear();\n\n    // Clean up mutation observer\n    if (this._mutationObserver) {\n      this._mutationObserver.disconnect();\n      this._mutationObserver = null;\n    }\n\n    // Clear button references\n    this._upButton = null;\n    this._downButton = null;\n\n    // Restore all original attributes\n    this._restoreOriginalAttributes();\n\n    // Remove instance from element (type-safe guard)\n    type WithCore = HTMLInputElement & { [INSTANCE_KEY]?: TouchSpinCore };\n    const inst = (this.input as WithCore)[INSTANCE_KEY];\n    if (inst && inst === this) {\n      delete (this.input as WithCore)[INSTANCE_KEY];\n    }\n  }\n\n  /**\n   * Create a plain public API object with bound methods for wrappers.\n   * @returns {TouchSpinCorePublicAPI}\n   */\n  toPublicApi(): TouchSpinCorePublicAPI {\n    return {\n      upOnce: this.upOnce.bind(this),\n      downOnce: this.downOnce.bind(this),\n      startUpSpin: this.startUpSpin.bind(this),\n      startDownSpin: this.startDownSpin.bind(this),\n      stopSpin: this.stopSpin.bind(this),\n      updateSettings: this.updateSettings.bind(this),\n      getValue: this.getValue.bind(this),\n      setValue: this.setValue.bind(this),\n      destroy: this.destroy.bind(this),\n      initDOMEventHandling: this.initDOMEventHandling.bind(this),\n      registerTeardown: this.registerTeardown.bind(this),\n      attachUpEvents: this.attachUpEvents.bind(this),\n      attachDownEvents: this.attachDownEvents.bind(this),\n      observeSetting: this.observeSetting.bind(this),\n    };\n  }\n\n  // --- Renderer Event Attachment Methods ---\n  /**\n   * Attach up button events to an element\n   * Called by renderers after creating up button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachUpEvents(element: HTMLElement | null): void {\n    if (!element) {\n      console.warn('TouchSpin: attachUpEvents called with null element');\n      return;\n    }\n\n    this._upButton = element;\n    element.addEventListener('mousedown', this._handleUpMouseDown);\n    element.addEventListener('touchstart', this._handleUpMouseDown, {passive: false});\n\n    // Add keyboard event listeners if focusable buttons are enabled\n    if (this.settings.focusablebuttons) {\n      element.addEventListener('keydown', this._handleUpKeyDown);\n      element.addEventListener('keyup', this._handleUpKeyUp);\n    }\n\n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  /**\n   * Attach down button events to an element\n   * Called by renderers after creating down button\n   * @param {HTMLElement|null} element - The element to attach events to\n   */\n  attachDownEvents(element: HTMLElement | null): void {\n    if (!element) {\n      console.warn('TouchSpin: attachDownEvents called with null element');\n      return;\n    }\n\n    this._downButton = element;\n    element.addEventListener('mousedown', this._handleDownMouseDown);\n    element.addEventListener('touchstart', this._handleDownMouseDown, {passive: false});\n\n    // Add keyboard event listeners if focusable buttons are enabled\n    if (this.settings.focusablebuttons) {\n      element.addEventListener('keydown', this._handleDownKeyDown);\n      element.addEventListener('keyup', this._handleDownKeyUp);\n    }\n\n    // Update disabled state immediately after attaching\n    this._updateButtonDisabledState();\n  }\n\n  // --- Settings Observer Pattern ---\n  /**\n   * Allow renderers to observe setting changes\n   * @param {string} settingName - Name of setting to observe\n   * @param {Function} callback - Function to call when setting changes (newValue, oldValue)\n   * @returns {Function} Unsubscribe function\n   */\n  observeSetting<K extends keyof TouchSpinCoreOptions>(settingName: K, callback: (newValue: NonNullable<TouchSpinCoreOptions[K]>, oldValue?: TouchSpinCoreOptions[K]) => void): () => void {\n    const key = String(settingName);\n    if (!this._settingObservers.has(key)) {\n      this._settingObservers.set(key, new Set());\n    }\n\n    const observers = this._settingObservers.get(key)!;\n    observers.add(callback as (value: unknown, prev?: unknown) => void);\n\n    // Return unsubscribe function\n    return () => observers.delete(callback as (value: unknown, prev?: unknown) => void);\n  }\n\n  // --- Minimal internal emitter API ---\n\n  /**\n   * Emit a core event as DOM CustomEvent (matching original jQuery plugin behavior)\n   * TODO: Consider making some events cancelable (e.g., startspin) for user control\n   * @param {string} event\n   * @param {any=} detail - Currently unused, kept for future extensibility\n   */\n  emit(event: CoreEventName, detail?: unknown): void {\n    const domEventName = `touchspin.on.${event}`;\n    const customEvent = new CustomEvent(domEventName, {\n      bubbles: true\n      // cancelable: false (default) - no cancellation logic implemented yet\n    });\n    this.input.dispatchEvent(customEvent);\n  }\n\n  /**\n   * Internal: start timed spin in a direction with initial step, delay, then interval.\n   * @param {'up'|'down'} dir\n   */\n  _startSpin(dir: 'up' | 'down'): void {\n    if (this.input.disabled || this.input.hasAttribute('readonly')) return;\n\n    // If already spinning in the same direction, do nothing (idempotent)\n    if (this.spinning && this.direction === dir) {\n      return;\n    }\n    // If switching direction while spinning, stop first\n    if (this.spinning && this.direction !== dir) {\n      this.stopSpin();\n    }\n\n    // Emit start events BEFORE the immediate step to get correct event order\n    // (start events â†’ change event from step â†’ stop events)\n    const direction_changed = (!this.spinning || this.direction !== dir);\n    if (direction_changed) {\n      this.spinning = true;\n      this.direction = dir;\n      this.spincount = 0;\n      // Match jQuery plugin event order: startspin then direction-specific\n      this.emit('startspin');\n      if (dir === 'up') this.emit('startupspin'); else this.emit('startdownspin');\n    }\n\n    // Perform an immediate single step after emitting start events (parity with jQuery plugin UX)\n    if (dir === 'up') this.upOnce(); else this.downOnce();\n\n    // If we reached a boundary after the initial step, don't start continuous spin\n    const v = this.getValue();\n    if (dir === 'up' && this.settings.max !== null && v === this.settings.max) {\n      return;\n    }\n    if (dir === 'down' && this.settings.min !== null && v === this.settings.min) {\n      return;\n    }\n\n    // Clear previous timers\n    this._clearSpinTimers();\n    // Schedule repeat after delay, then at interval\n    const delay = this.settings.stepintervaldelay || 500;\n    const interval = this.settings.stepinterval || 100;\n    this._spinDelayTimeout = setTimeout(() => {\n      this._spinDelayTimeout = null;\n      this._spinIntervalTimer = setInterval(() => {\n        if (!this.spinning || this.direction !== dir) return; // safety\n        this._spinStep(dir);\n      }, interval);\n    }, delay);\n  }\n\n  _clearSpinTimers(): void {\n    try { if (this._spinDelayTimeout) { clearTimeout(this._spinDelayTimeout); } } catch {\n      // Ignore timer cleanup errors\n    }\n    try { if (this._spinIntervalTimer) { clearInterval(this._spinIntervalTimer); } } catch {\n      // Ignore timer cleanup errors\n    }\n    this._spinDelayTimeout = null;\n    this._spinIntervalTimer = null;\n  }\n\n  /**\n   * Compute the next numeric value for a direction, respecting step, booster and bounds.\n   * @param {'up'|'down'} dir\n   * @param {number} current\n   */\n  _nextValue(dir: 'up' | 'down', current: number): number {\n    let v = current;\n    if (isNaN(v)) {\n      v = this._valueIfIsNaN();\n    } else {\n      const base = this.settings.step || 1;\n      const mbs = this.settings.maxboostedstep;\n      let stepCandidate = base;\n      // Apply booster only if enabled\n      if (this.settings.booster) {\n        const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n        stepCandidate = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n      }\n      let step = stepCandidate;\n      if (mbs && isFinite(mbs) && stepCandidate > Number(mbs)) {\n        step = Number(mbs);\n        // Align current value to the boosted step grid when clamped (parity with jQuery plugin)\n        v = Math.round(v / step) * step;\n      }\n      step = Math.max(base, step);\n      v = dir === 'up' ? v + step : v - step;\n    }\n    return this._applyConstraints(v);\n  }\n\n  /** Returns a reasonable value to use when current is NaN. */\n  _valueIfIsNaN(): number {\n    if (typeof this.settings.firstclickvalueifempty === 'number') {\n      return this.settings.firstclickvalueifempty;\n    }\n    const min = (typeof this.settings.min === 'number') ? this.settings.min : 0;\n    const max = (typeof this.settings.max === 'number') ? this.settings.max : min;\n    return (min + max) / 2;\n  }\n\n  /** Apply step divisibility and clamp to min/max. */\n  _applyConstraints(v: number): number {\n    const aligned = this._forcestepdivisibility(v);\n    const min = this.settings.min ?? null;\n    const max = this.settings.max ?? null;\n    let clamped = aligned;\n    if (typeof min === 'number' && clamped < min) clamped = min;\n    if (typeof max === 'number' && clamped > max) clamped = max;\n    return clamped;\n  }\n\n  /** Determine the effective step with booster if enabled. */\n  _getBoostedStep(): number {\n    const base = this.settings.step || 1;\n    if (!this.settings.booster) return base;\n    const boostat = Math.max(1, parseInt(String(this.settings.boostat || 10), 10));\n    let boosted = Math.pow(2, Math.floor(this.spincount / boostat)) * base;\n    const mbs = this.settings.maxboostedstep;\n    if (mbs && isFinite(mbs)) {\n      const cap = Number(mbs);\n      if (boosted > cap) boosted = cap;\n    }\n    return Math.max(base, boosted);\n  }\n\n  /** Aligns value to step per forcestepdivisibility. */\n  _forcestepdivisibility(val: number): number {\n    const mode = this.settings.forcestepdivisibility || 'round';\n    const step = this.settings.step || 1;\n    const dec = this.settings.decimals || 0;\n    let out;\n    switch (mode) {\n      case 'floor':\n        out = Math.floor(val / step) * step; break;\n      case 'ceil':\n        out = Math.ceil(val / step) * step; break;\n      case 'none':\n        out = val; break;\n      case 'round':\n      default:\n        out = Math.round(val / step) * step; break;\n    }\n    const result = Number(out.toFixed(dec));\n    // Normalize to configured decimals without string pipeline; formatting applies later\n    return result;\n  }\n\n  /** Aligns a value to nearest step boundary using integer arithmetic. */\n  _alignToStep(val: number, step: number, dir: 'up' | 'down'): number {\n    if (step === 0) return val;\n    let k = 1;\n    const s = step;\n    while (((s * k) % 1) !== 0 && k < 1e6) k *= 10;\n    const V = Math.round(val * k);\n    const S = Math.round(step * k);\n    const r = V % S;\n    if (r === 0) return val;\n    return (dir === 'down' ? (V - r) : (V + (S - r))) / k;\n  }\n\n  /** Format and write to input, optionally emit change if different. */\n  _setDisplay(num: number, mayTriggerChange: boolean, forceTrigger: boolean = false, onlyTriggerIfSanitized: boolean = false): string {\n    const prev = String(this.input.value ?? '');\n    const next = this._formatDisplay(num);\n    this.input.value = next;\n    this._updateAriaAttributes();\n\n    // Emit change based on context:\n    // - For programmatic setValue: only if sanitized (forceTrigger)\n    // - For user interactions: if sanitized OR display changed\n    if (mayTriggerChange && (onlyTriggerIfSanitized ? forceTrigger : (forceTrigger || prev !== next))) {\n      // mirror plugin behavior: trigger a native change event\n      this.input.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    return next;\n  }\n\n  _formatDisplay(num: number): string {\n    const dec = this.settings.decimals || 0;\n    const after = this.settings.callback_after_calculation || ((v) => v);\n    const s = Number(num).toFixed(dec);\n    return after(s);\n  }\n\n  /**\n   * Perform one spin step in a direction while tracking spincount for booster.\n   * @param {'up'|'down'} dir\n   */\n  _spinStep(dir: 'up' | 'down'): void {\n    this.spincount++;\n    if (dir === 'up') this.upOnce(); else this.downOnce();\n  }\n\n  /** Sanitize current input value and update display; optionally emits change. */\n  _checkValue(mayTriggerChange: boolean): void {\n    const v = this.getValue();\n    if (!isFinite(v)) return;\n    const adjusted = this._applyConstraints(v);\n    const wasSanitized = v !== adjusted;\n    this._setDisplay(adjusted, !!mayTriggerChange, wasSanitized);\n  }\n\n  _updateAriaAttributes(): void {\n    const el = this.input;\n    if (el.getAttribute('role') !== 'spinbutton') {\n      el.setAttribute('role', 'spinbutton');\n    }\n    const min = this.settings.min ?? null;\n    const max = this.settings.max ?? null;\n    if (typeof min === 'number') el.setAttribute('aria-valuemin', String(min)); else el.removeAttribute('aria-valuemin');\n    if (typeof max === 'number') el.setAttribute('aria-valuemax', String(max)); else el.removeAttribute('aria-valuemax');\n    const raw = el.value;\n    const before = this.settings.callback_before_calculation || ((v) => v);\n    const num = parseFloat(before(String(raw)));\n    if (isFinite(num)) el.setAttribute('aria-valuenow', String(num)); else el.removeAttribute('aria-valuenow');\n    el.setAttribute('aria-valuetext', String(raw));\n  }\n\n  /**\n   * Synchronize TouchSpin settings to native input attributes.\n   * Only applies to type=\"number\" inputs to maintain browser consistency.\n   * @private\n   */\n  _syncNativeAttributes(): void {\n    // Only set native attributes on number inputs\n    if (this.input.getAttribute('type') === 'number') {\n      // Sync min attribute\n      const min = this.settings.min ?? null;\n      if (typeof min === 'number' && isFinite(min)) {\n        this.input.setAttribute('min', String(min));\n      } else {\n        this.input.removeAttribute('min');\n      }\n\n      // Sync max attribute\n      const max = this.settings.max ?? null;\n      if (typeof max === 'number' && isFinite(max)) {\n        this.input.setAttribute('max', String(max));\n      } else {\n        this.input.removeAttribute('max');\n      }\n\n      // Sync step attribute\n      const step = this.settings.step;\n      if (typeof step === 'number' && isFinite(step) && step > 0) {\n        this.input.setAttribute('step', String(step));\n      } else {\n        this.input.removeAttribute('step');\n      }\n    }\n  }\n\n  /**\n   * Update TouchSpin settings from native attribute changes.\n   * Called by mutation observer when min/max/step attributes change.\n   * @private\n   */\n  _syncSettingsFromNativeAttributes(): void {\n    const nativeMin = this.input.getAttribute('min');\n    const nativeMax = this.input.getAttribute('max');\n    const nativeStep = this.input.getAttribute('step');\n    let needsUpdate = false;\n    const newSettings: Partial<TouchSpinCoreOptions> = {};\n\n    // Check min attribute\n    if (nativeMin !== null) {\n      const parsedMin = nativeMin === '' ? null : parseFloat(nativeMin);\n      const minNum = parsedMin !== null && isFinite(parsedMin) ? parsedMin : null;\n      if (minNum !== this.settings.min) {\n        newSettings.min = minNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.min !== null) {\n      // Attribute was removed\n      newSettings.min = null;\n      needsUpdate = true;\n    }\n\n    // Check max attribute\n    if (nativeMax !== null) {\n      const parsedMax = nativeMax === '' ? null : parseFloat(nativeMax);\n      const maxNum = parsedMax !== null && isFinite(parsedMax) ? parsedMax : null;\n      if (maxNum !== this.settings.max) {\n        newSettings.max = maxNum;\n        needsUpdate = true;\n      }\n    } else if (this.settings.max !== null) {\n      // Attribute was removed\n      newSettings.max = null;\n      needsUpdate = true;\n    }\n\n    // Check step attribute\n    if (nativeStep !== null) {\n      const parsedStep = nativeStep === '' ? undefined : parseFloat(nativeStep);\n      const stepNum: number | undefined = parsedStep !== undefined && isFinite(parsedStep) && parsedStep > 0 ? parsedStep : undefined;\n      if (stepNum !== this.settings.step) {\n        newSettings.step = stepNum ?? 1;\n        needsUpdate = true;\n      }\n    } else if (this.settings.step !== 1) {\n      // Attribute was removed, reset to default\n      newSettings.step = 1;\n      needsUpdate = true;\n    }\n\n    // Apply updates if needed\n    if (needsUpdate) {\n      this.updateSettings(newSettings);\n    }\n  }\n\n  // --- DOM Event Handling Methods ---\n\n  /**\n   * Find and store references to DOM elements using data-touchspin-injected attributes.\n   * @private\n   */\n  _findDOMElements(): void {\n    // Core doesn't need to find buttons - renderers handle button events directly\n    // We only need to find the wrapper for potential future use\n    let wrapper = this.input.parentElement;\n    while (wrapper && !wrapper.hasAttribute('data-touchspin-injected')) {\n      wrapper = wrapper.parentElement;\n    }\n    this._wrapper = wrapper;\n  }\n\n  /**\n   * Attach DOM event listeners to elements.\n   * @private\n   */\n  _attachDOMEventListeners(): void {\n    // Core should NOT attach button events - renderers handle that via attachUpEvents/attachDownEvents\n\n    // Global mouseup/touchend to stop spinning\n    document.addEventListener('mouseup', this._handleMouseUp);\n    document.addEventListener('mouseleave', this._handleMouseUp);\n    document.addEventListener('touchend', this._handleMouseUp);\n    window.addEventListener('change', this._handleWindowChangeCapture, true);\n\n    // Input events (always attach these - they work without renderer UI)\n    this.input.addEventListener('keydown', this._handleKeyDown);\n    this.input.addEventListener('keyup', this._handleKeyUp);\n    this.input.addEventListener('wheel', this._handleWheel);\n  }\n\n  /**\n   * Remove DOM event listeners.\n   * @private\n   */\n  _detachDOMEventListeners(): void {\n    // Core does not manage button events - renderers handle their own cleanup\n\n    // Global events\n    document.removeEventListener('mouseup', this._handleMouseUp);\n    document.removeEventListener('mouseleave', this._handleMouseUp);\n    document.removeEventListener('touchend', this._handleMouseUp);\n    window.removeEventListener('change', this._handleWindowChangeCapture, true);\n\n    // Input events\n    this.input.removeEventListener('keydown', this._handleKeyDown);\n    this.input.removeEventListener('keyup', this._handleKeyUp);\n    this.input.removeEventListener('wheel', this._handleWheel);\n  }\n\n  // --- DOM Event Handlers ---\n\n  /**\n   * Handle mousedown/touchstart on up button.\n   * @private\n   */\n  _handleUpMouseDown(e: MouseEvent | TouchEvent): void {\n    e.preventDefault();\n    this.startUpSpin();\n  }\n\n  /**\n   * Handle mousedown/touchstart on down button.\n   * @private\n   */\n  _handleDownMouseDown(e: MouseEvent | TouchEvent): void {\n    e.preventDefault();\n    this.startDownSpin();\n  }\n\n  /**\n   * Handle mouseup/touchend/mouseleave to stop spinning.\n   * @private\n   */\n  _handleMouseUp(e: MouseEvent | TouchEvent): void {\n    this.stopSpin();\n  }\n\n  /**\n   * Handle keydown events on up button.\n   * @private\n   */\n  _handleUpKeyDown(e: KeyboardEvent): void {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      e.preventDefault();\n      // Ignore auto-repeat while holding the key\n      if (e.repeat) return;\n      this.startUpSpin();\n    }\n  }\n\n  /**\n   * Handle keyup events on up button.\n   * @private\n   */\n  _handleUpKeyUp(e: KeyboardEvent): void {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle keydown events on down button.\n   * @private\n   */\n  _handleDownKeyDown(e: KeyboardEvent): void {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      e.preventDefault();\n      // Ignore auto-repeat while holding the key\n      if (e.repeat) return;\n      this.startDownSpin();\n    }\n  }\n\n  /**\n   * Handle keyup events on down button.\n   * @private\n   */\n  _handleDownKeyUp(e: KeyboardEvent): void {\n    // Only handle Enter and Space keys\n    if (e.keyCode === 13 || e.keyCode === 32) { // Enter or Space\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Sanitize value before other capture listeners observe unsanitized input.\n   * @private\n   */\n  _handleWindowChangeCapture(e: Event): void {\n    const target = e.target as HTMLInputElement | null;\n    if (!target || target !== this.input) return;\n    const currentValue = this.getValue();\n    if (!isFinite(currentValue)) return;\n    const sanitized = this._applyConstraints(currentValue);\n    if (sanitized !== currentValue) {\n      this._setDisplay(sanitized, false);\n    }\n  }\n\n  /**\n   * Handle keydown events on the input element.\n   * @private\n   */\n  _handleKeyDown(e: KeyboardEvent): void {\n    switch (e.key) {\n      case 'ArrowUp':\n        e.preventDefault();\n        if (e.repeat) return; // ignore auto-repeat\n        this.startUpSpin();\n        break;\n      case 'ArrowDown':\n        e.preventDefault();\n        if (e.repeat) return; // ignore auto-repeat\n        this.startDownSpin();\n        break;\n      case 'Enter':\n        this._checkValue(false);\n        break;\n    }\n  }\n\n  /**\n   * Handle keyup events on the input element.\n   * @private\n   */\n  _handleKeyUp(e: KeyboardEvent): void {\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Handle wheel events on the input element.\n   * @private\n   */\n  _handleWheel(e: WheelEvent): void {\n    if (!this.settings.mousewheel) {\n      return;\n    }\n\n    if (document.activeElement === this.input) {\n      e.preventDefault();\n      if (e.deltaY < 0) {\n        this.upOnce();\n      } else if (e.deltaY > 0) {\n        this.downOnce();\n      }\n    }\n  }\n\n  /**\n   * Set up mutation observer to watch for disabled/readonly attribute changes\n   * @private\n   */\n  _setupMutationObserver(): void {\n    if (typeof MutationObserver !== 'undefined') {\n      this._mutationObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          if (mutation.type === 'attributes') {\n            if (mutation.attributeName === 'disabled' || mutation.attributeName === 'readonly') {\n              this._updateButtonDisabledState();\n            } else if (mutation.attributeName === 'min' || mutation.attributeName === 'max' || mutation.attributeName === 'step') {\n              this._syncSettingsFromNativeAttributes();\n            }\n          }\n        });\n      });\n\n      this._mutationObserver.observe(this.input, {\n        attributes: true,\n        attributeFilter: ['disabled', 'readonly', 'min', 'max', 'step']\n      });\n    }\n  }\n\n  /**\n   * Update button disabled state based on input disabled/readonly state\n   * @private\n   */\n  _updateButtonDisabledState(): void {\n    const isDisabled = this.input.disabled || this.input.hasAttribute('readonly');\n\n    if (this._upButton) {\n      this._upButton.disabled = isDisabled;\n    }\n    if (this._downButton) {\n      this._downButton.disabled = isDisabled;\n    }\n\n    if (isDisabled) {\n      this.stopSpin();\n    }\n  }\n\n  /**\n   * Check if callbacks are properly paired and warn if not\n   * @private\n   */\n  _checkCallbackPairing(): void {\n    const defCb = (v: string) => v;\n    const hasBefore = this.settings.callback_before_calculation &&\n      this.settings.callback_before_calculation.toString() !== defCb.toString();\n    const hasAfter = this.settings.callback_after_calculation &&\n      this.settings.callback_after_calculation.toString() !== defCb.toString();\n\n    if (hasBefore && !hasAfter) {\n      console.warn(\n        'TouchSpin: callback_before_calculation is defined but callback_after_calculation is missing. ' +\n        'These callbacks should be used together - one removes formatting, the other adds it back.'\n      );\n    } else if (!hasBefore && hasAfter) {\n      console.warn(\n        'TouchSpin: callback_after_calculation is defined but callback_before_calculation is missing. ' +\n        'These callbacks should be used together - one removes formatting, the other adds it back.'\n      );\n    }\n  }\n}\n\nexport interface TouchSpinCorePublicAPI {\n  upOnce: () => void;\n  downOnce: () => void;\n  startUpSpin: () => void;\n  startDownSpin: () => void;\n  stopSpin: () => void;\n  updateSettings: (opts: Partial<TouchSpinCoreOptions>) => void;\n  getValue: () => number;\n  setValue: (v: number | string) => void;\n  destroy: () => void;\n  initDOMEventHandling: () => void;\n  registerTeardown: (callback: () => void) => () => void;\n  attachUpEvents: (el: HTMLElement | null) => void;\n  attachDownEvents: (el: HTMLElement | null) => void;\n  observeSetting: <K extends keyof TouchSpinCoreOptions>(key: K, cb: (value: NonNullable<TouchSpinCoreOptions[K]>, prev?: TouchSpinCoreOptions[K]) => void) => () => void;\n}\n\n/**\n * Initialize TouchSpin on an input element or get existing instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function TouchSpin(inputEl: HTMLInputElement, opts?: Partial<TouchSpinCoreOptions>): TouchSpinCorePublicAPI | null {\n  // Check if element is an input (graceful handling for public API)\n  if (!inputEl || inputEl.nodeName !== 'INPUT') {\n    console.warn('Must be an input.');\n    return null;\n  }\n\n  // If options provided, initialize/reinitialize\n  if (opts !== undefined) {\n    // Destroy existing instance if it exists (destroy() removes itself from element)\n    if ((inputEl as WithCoreElement)[INSTANCE_KEY]) {\n      console.warn('TouchSpin: Destroying existing instance and reinitializing. Consider using updateSettings() instead.');\n      (inputEl as WithCoreElement)[INSTANCE_KEY]!.destroy();\n    }\n\n    // Create new instance and store on element\n    const core = new TouchSpinCore(inputEl, opts);\n    (inputEl as WithCoreElement)[INSTANCE_KEY] = core;\n\n    // Initialize DOM event handling\n    core.initDOMEventHandling();\n\n    return core.toPublicApi();\n  }\n\n  // No options - return existing instance or create with defaults\n  if (!(inputEl as WithCoreElement)[INSTANCE_KEY]) {\n    const core = new TouchSpinCore(inputEl, {});\n    (inputEl as WithCoreElement)[INSTANCE_KEY] = core;\n    core.initDOMEventHandling();\n    return core.toPublicApi();\n  }\n\n  return ((inputEl as WithCoreElement)[INSTANCE_KEY] as TouchSpinCore).toPublicApi();\n}\n\n/**\n * Get existing TouchSpin instance from input element (without creating one).\n * @param {HTMLInputElement} inputEl\n * @returns {TouchSpinCorePublicAPI|null}\n */\nexport function getTouchSpin(inputEl: HTMLInputElement): TouchSpinCorePublicAPI | null {\n  return (inputEl as WithCoreElement)[INSTANCE_KEY]\n    ? ((inputEl as WithCoreElement)[INSTANCE_KEY] as TouchSpinCore).toPublicApi()\n    : null;\n}\n\n/**\n * Create and return a plain public API bound to a new core instance.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCorePublicAPI}\n * @deprecated Use TouchSpin() instead\n */\nexport function createPublicApi(inputEl: HTMLInputElement, opts?: Partial<TouchSpinCoreOptions>): TouchSpinCorePublicAPI | null {\n  return TouchSpin(inputEl, opts);\n}\n\n/** Event name constants for wrappers to map/bridge. */\nexport const CORE_EVENTS = Object.freeze({\n  MIN: 'min',\n  MAX: 'max',\n  START_SPIN: 'startspin',\n  START_UP: 'startupspin',\n  START_DOWN: 'startdownspin',\n  STOP_SPIN: 'stopspin',\n  STOP_UP: 'stopupspin',\n  STOP_DOWN: 'stopdownspin',\n} as const);\n\n/**\n * Convenience helper to attach core to an input element.\n * @param {HTMLInputElement} inputEl\n * @param {Partial<TouchSpinCoreOptions>=} opts\n * @returns {TouchSpinCore}\n */\nexport function attach(inputEl: HTMLInputElement, opts?: Partial<TouchSpinCoreOptions>): TouchSpinCore {\n  return new TouchSpinCore(inputEl, opts ?? {});\n}\n\nexport default TouchSpinCore;\n\n// Note: AbstractRenderer is not exported as it's only needed by renderer implementations\n// Renderers should import it directly: import AbstractRenderer from '../../../core/src/AbstractRenderer.js';\n","import type { TouchSpinCoreOptions } from './index';\nimport type { Renderer } from './renderer';\n\nexport type RendererOptionKind = 'string' | 'boolean' | 'number' | 'enum';\n\ntype RendererOptionDefinition =\n  | { kind: 'string' }\n  | { kind: 'boolean' }\n  | { kind: 'number' }\n  | { kind: 'enum'; values: readonly string[] };\n\nexport type RendererOptionDef = RendererOptionDefinition;\nexport type RendererOptionSchema = Readonly<Record<string, RendererOptionDefinition>>;\n\ntype RendererOptionValue<Definition extends RendererOptionDefinition> =\n  Definition extends { kind: 'string' }\n    ? string | undefined\n    : Definition extends { kind: 'boolean' }\n    ? boolean | undefined\n    : Definition extends { kind: 'number' }\n    ? number | undefined\n    : Definition extends { kind: 'enum'; values: readonly (infer Option)[] }\n    ? Option | undefined\n    : unknown;\n\nexport type InferOptionsFromSchema<Schema extends RendererOptionSchema> = {\n  [Key in keyof Schema]: RendererOptionValue<Schema[Key]>;\n};\n\ntype RendererCoreBridge = {\n  attachUpEvents: (element: HTMLElement | null) => void;\n  attachDownEvents: (element: HTMLElement | null) => void;\n  observeSetting: <Key extends keyof TouchSpinCoreOptions>(\n    key: Key,\n    listener: (value: NonNullable<TouchSpinCoreOptions[Key]>) => void\n  ) => () => void;\n};\n\ntype SettingsRecord = Record<string, unknown>;\n\nconst TOUCHSPIN_ATTRIBUTE = 'data-touchspin-injected';\nconst TEST_ID_ATTRIBUTE = 'data-testid';\nconst WRAPPER_TYPE_DEFAULT = 'wrapper';\nconst WRAPPER_TYPE_ADVANCED = 'wrapper-advanced';\nconst WRAPPER_READY_CLASS = 'bootstrap-touchspin';\n\nabstract class AbstractRenderer implements Renderer {\n  protected readonly input: HTMLInputElement;\n  protected readonly settings: Readonly<TouchSpinCoreOptions>;\n  protected readonly core: RendererCoreBridge;\n\n  protected wrapper: HTMLElement | null = null;\n  protected wrapperType = WRAPPER_TYPE_DEFAULT;\n\n  constructor(\n    input: HTMLInputElement,\n    settings: Readonly<TouchSpinCoreOptions>,\n    core: RendererCoreBridge\n  ) {\n    this.input = input;\n    this.settings = settings;\n    this.core = core;\n  }\n\n  abstract init(): void;\n\n  teardown(): void {\n    this.removeInjectedElements();\n  }\n\n  removeInjectedElements(): void {\n    this.removeInjectedNodesWithinWrapper();\n    this.removeNearbyInjectedNodes();\n  }\n\n  finalizeWrapperAttributes(): void {\n    if (!this.wrapper) return;\n\n    const testId = this.input.getAttribute(TEST_ID_ATTRIBUTE);\n    if (testId && !this.wrapper.hasAttribute(TEST_ID_ATTRIBUTE)) {\n      this.wrapper.setAttribute(TEST_ID_ATTRIBUTE, `${testId}-wrapper`);\n    }\n\n    this.wrapper.setAttribute(TOUCHSPIN_ATTRIBUTE, this.wrapperType);\n  }\n\n  getUpButtonTestId(): string {\n    return this.buildDataTestId('up');\n  }\n\n  getDownButtonTestId(): string {\n    return this.buildDataTestId('down');\n  }\n\n  getPrefixTestId(): string {\n    return this.buildDataTestId('prefix');\n  }\n\n  getPostfixTestId(): string {\n    return this.buildDataTestId('postfix');\n  }\n\n  protected extractRendererSettings<Schema extends RendererOptionSchema>(\n    schema: Schema,\n    sourceSettings: SettingsRecord = this.settings as SettingsRecord\n  ): Readonly<Partial<InferOptionsFromSchema<Schema>>> {\n    const selected: Record<string, unknown> = {};\n\n    for (const key in schema) {\n      if (Object.prototype.hasOwnProperty.call(sourceSettings, key)) {\n        selected[key] = sourceSettings[key];\n      }\n    }\n\n    return selected as Readonly<Partial<InferOptionsFromSchema<Schema>>>;\n  }\n\n  // Backward compatibility alias\n  protected projectRendererOptions<Schema extends RendererOptionSchema>(\n    schema: Schema,\n    from: Record<string, unknown> = this.settings as Record<string, unknown>\n  ): Readonly<Partial<InferOptionsFromSchema<Schema>>> {\n    return this.extractRendererSettings(schema, from);\n  }\n\n  private removeInjectedNodesWithinWrapper(): void {\n    const { wrapper } = this;\n    if (!wrapper) return;\n\n    wrapper\n      .querySelectorAll(`[${TOUCHSPIN_ATTRIBUTE}]`)\n      .forEach((element) => (element as HTMLElement).remove());\n\n    if (!wrapper.hasAttribute(TOUCHSPIN_ATTRIBUTE) || !wrapper.parentElement) {\n      return;\n    }\n\n    const wrapperType = wrapper.getAttribute(TOUCHSPIN_ATTRIBUTE);\n    if (wrapperType === WRAPPER_TYPE_ADVANCED) {\n      wrapper.classList.remove(WRAPPER_READY_CLASS);\n      wrapper.removeAttribute(TOUCHSPIN_ATTRIBUTE);\n      return;\n    }\n\n    wrapper.parentElement.insertBefore(this.input, wrapper);\n    wrapper.remove();\n  }\n\n  private removeNearbyInjectedNodes(): void {\n    const injectedNodes = document.querySelectorAll(`[${TOUCHSPIN_ATTRIBUTE}]`);\n\n    injectedNodes.forEach((node) => {\n      if (!(node instanceof HTMLElement)) return;\n      if (node === this.input) return;\n      if (!this.isNodeRelatedToInput(node)) return;\n\n      node.remove();\n    });\n  }\n\n  private isNodeRelatedToInput(node: Element): boolean {\n    const parent = node.parentElement;\n    const inputParent = this.input.parentElement;\n\n    const nodeContainsInput = node.contains(this.input);\n    const parentContainsInput = parent?.contains(this.input) ?? false;\n    const inputContainsNode = inputParent?.contains(node) ?? false;\n\n    return nodeContainsInput || parentContainsInput || inputContainsNode;\n  }\n\n  private buildDataTestId(suffix: string): string {\n    const base = this.input.getAttribute(TEST_ID_ATTRIBUTE);\n    return base ? ` data-testid=\"${base}-${suffix}\"` : '';\n  }\n}\n\nexport default AbstractRenderer;\n","import { AbstractRenderer } from '@touchspin/core/renderer';\nimport type { InferOptionsFromSchema, RendererOptionSchema } from '@touchspin/core/renderer';\n\n// Schema definition\nconst bootstrap5Schema = Object.freeze({\n  // Button text\n  buttonup_txt: { kind: 'string' },\n  buttondown_txt: { kind: 'string' },\n\n  // Button classes\n  buttonup_class: { kind: 'string' },\n  buttondown_class: { kind: 'string' },\n\n  // Vertical layout\n  verticalbuttons: { kind: 'boolean' },\n  verticalup: { kind: 'string' },\n  verticaldown: { kind: 'string' },\n  verticalupclass: { kind: 'string' },\n  verticaldownclass: { kind: 'string' },\n\n  // Prefix/postfix\n  prefix: { kind: 'string' },\n  postfix: { kind: 'string' },\n  prefix_extraclass: { kind: 'string' },\n  postfix_extraclass: { kind: 'string' },\n} as const satisfies RendererOptionSchema);\n\n// Constants\nconst CSS_CLASSES = {\n  FORM_CONTROL: 'form-control',\n  INPUT_GROUP: 'input-group',\n  INPUT_GROUP_TEXT: 'input-group-text',\n  BOOTSTRAP_TOUCHSPIN: 'bootstrap-touchspin',\n  BTN_VERTICAL: 'input-group-btn-vertical',\n  DEFAULT_BUTTON: 'btn btn-outline-secondary',\n} as const;\n\nconst SELECTORS = {\n  UP_BUTTON: '[data-touchspin-injected=\"up\"]',\n  DOWN_BUTTON: '[data-touchspin-injected=\"down\"]',\n  PREFIX: '[data-touchspin-injected=\"prefix\"]',\n  POSTFIX: '[data-touchspin-injected=\"postfix\"]',\n  VERTICAL_WRAPPER: '[data-touchspin-injected=\"vertical-wrapper\"]',\n} as const;\n\nconst BUTTON_TEXT = {\n  UP: '+',\n  DOWN: 'âˆ’',\n} as const;\n\nconst INJECTED_TYPES = {\n  UP: 'up',\n  DOWN: 'down',\n  PREFIX: 'prefix',\n  POSTFIX: 'postfix',\n  VERTICAL_WRAPPER: 'vertical-wrapper',\n} as const;\n\ntype RendererOptions = Readonly<Partial<InferOptionsFromSchema<typeof bootstrap5Schema>>>;\n\nclass Bootstrap5Renderer extends AbstractRenderer {\n  private readonly initialInputGroup: HTMLElement | null;\n  private opts: RendererOptions = {};\n  private prefixEl: HTMLElement | null = null;\n  private postfixEl: HTMLElement | null = null;\n  private formControlAdded = false;\n  declare wrapper: HTMLElement | null;\n\n  constructor(...args: ConstructorParameters<typeof AbstractRenderer>) {\n    super(...args);\n    const [input] = args;\n    this.initialInputGroup = input.closest(`.${CSS_CLASSES.INPUT_GROUP}`) as HTMLElement | null;\n  }\n\n  init(): void {\n    this.initializeOptions();\n    this.resetElementReferences();\n    this.ensureFormControlClass();\n    this.buildAndAttachDOM();\n    this.registerSettingObservers();\n  }\n\n  teardown(): void {\n    this.restoreFormControlClass();\n    super.teardown();\n  }\n\n  // Initialization helpers\n  private initializeOptions(): void {\n    this.opts = this.extractRendererSettings(bootstrap5Schema);\n  }\n\n  private resetElementReferences(): void {\n    this.prefixEl = null;\n    this.postfixEl = null;\n  }\n\n  private ensureFormControlClass(): void {\n    if (!this.input.classList.contains(CSS_CLASSES.FORM_CONTROL)) {\n      this.input.classList.add(CSS_CLASSES.FORM_CONTROL);\n      this.formControlAdded = true;\n    }\n  }\n\n  private restoreFormControlClass(): void {\n    if (this.formControlAdded) {\n      this.input.classList.remove(CSS_CLASSES.FORM_CONTROL);\n      this.formControlAdded = false;\n    }\n  }\n\n  // DOM building\n  buildInputGroup(): HTMLElement {\n    const closestGroup = this.input.closest(`.${CSS_CLASSES.INPUT_GROUP}`) as HTMLElement | null;\n    const existingInputGroup = closestGroup ?? this.initialInputGroup;\n\n    return existingInputGroup\n      ? this.buildAdvancedInputGroup(existingInputGroup)\n      : this.buildBasicInputGroup();\n  }\n\n  buildBasicInputGroup(): HTMLElement {\n    const inputGroupSize = this.detectInputGroupSize();\n    const wrapper = this.createInputGroupWrapper(inputGroupSize);\n\n    this.appendElementsToWrapper(wrapper);\n    this.insertWrapperAndInput(wrapper);\n    this.positionInputWithinWrapper(wrapper);\n\n    return wrapper;\n  }\n\n  buildAdvancedInputGroup(existingInputGroup: HTMLElement): HTMLElement {\n    existingInputGroup.classList.add(CSS_CLASSES.BOOTSTRAP_TOUCHSPIN);\n    this.wrapperType = 'wrapper-advanced';\n\n    this.insertElementsIntoExistingGroup(existingInputGroup);\n    this.storeElementReferences(existingInputGroup);\n\n    return existingInputGroup;\n  }\n\n  private createInputGroupWrapper(sizeClass: string): HTMLElement {\n    const wrapper = document.createElement('div');\n    wrapper.className = this.buildClasses([\n      CSS_CLASSES.INPUT_GROUP,\n      sizeClass,\n      CSS_CLASSES.BOOTSTRAP_TOUCHSPIN\n    ]);\n    return wrapper;\n  }\n\n  private appendElementsToWrapper(wrapper: HTMLElement): void {\n    if (!this.opts.verticalbuttons) {\n      wrapper.appendChild(this.createDownButton());\n    }\n\n    if (this.opts.prefix) {\n      wrapper.appendChild(this.createPrefixElement());\n    }\n\n    if (this.opts.postfix) {\n      wrapper.appendChild(this.createPostfixElement());\n    }\n\n    if (this.opts.verticalbuttons) {\n      wrapper.appendChild(this.createVerticalButtonWrapper());\n    } else {\n      wrapper.appendChild(this.createUpButton());\n    }\n  }\n\n  private insertWrapperAndInput(wrapper: HTMLElement): void {\n    if (this.input.parentElement) {\n      this.input.parentElement.insertBefore(wrapper, this.input);\n    }\n  }\n\n  private positionInputWithinWrapper(wrapper: HTMLElement): void {\n    const insertionPoint = this.findInputInsertionPoint(wrapper);\n    wrapper.insertBefore(this.input, insertionPoint);\n  }\n\n  private findInputInsertionPoint(wrapper: HTMLElement): Node | null {\n    if (this.opts.verticalbuttons) {\n      return this.findVerticalInsertionPoint(wrapper);\n    }\n    return this.findHorizontalInsertionPoint(wrapper);\n  }\n\n  private findVerticalInsertionPoint(wrapper: HTMLElement): Node | null {\n    const prefixEl = wrapper.querySelector(SELECTORS.PREFIX);\n    const postfixEl = wrapper.querySelector(SELECTORS.POSTFIX);\n    const verticalWrapper = wrapper.querySelector(SELECTORS.VERTICAL_WRAPPER);\n\n    if (prefixEl) return prefixEl.nextSibling;\n    if (postfixEl) return postfixEl;\n    return verticalWrapper;\n  }\n\n  private findHorizontalInsertionPoint(wrapper: HTMLElement): Node | null {\n    const prefixEl = wrapper.querySelector(SELECTORS.PREFIX);\n    const postfixEl = wrapper.querySelector(SELECTORS.POSTFIX);\n    const upButton = wrapper.querySelector(SELECTORS.UP_BUTTON);\n\n    if (prefixEl) return prefixEl.nextSibling;\n    if (postfixEl) return postfixEl;\n    return upButton;\n  }\n\n  private insertElementsIntoExistingGroup(existingInputGroup: HTMLElement): void {\n    // Ensure input is a child of the existing group before using it as a reference\n    this.ensureInputInGroup(existingInputGroup);\n\n    if (!this.opts.verticalbuttons) {\n      existingInputGroup.insertBefore(this.createDownButton(), this.input);\n    }\n\n    if (this.opts.prefix) {\n      existingInputGroup.insertBefore(this.createPrefixElement(), this.input);\n    }\n\n    if (this.opts.postfix) {\n      existingInputGroup.insertBefore(this.createPostfixElement(), this.input.nextSibling);\n    }\n\n    if (this.opts.verticalbuttons) {\n      const insertionPoint = this.opts.postfix\n        ? existingInputGroup.querySelector(SELECTORS.POSTFIX)?.nextSibling ?? null\n        : this.input.nextSibling;\n      existingInputGroup.insertBefore(this.createVerticalButtonWrapper(), insertionPoint);\n    } else {\n      const insertionPoint = this.opts.postfix\n        ? existingInputGroup.querySelector(SELECTORS.POSTFIX)?.nextSibling ?? null\n        : this.input.nextSibling;\n      existingInputGroup.insertBefore(this.createUpButton(), insertionPoint);\n    }\n  }\n\n  private ensureInputInGroup(existingInputGroup: HTMLElement): void {\n    // Check if input is already a direct child of the group\n    if (this.input.parentElement === existingInputGroup) {\n      return;\n    }\n\n    // If input is not in the group, append it (it may have been moved during DOM manipulations)\n    existingInputGroup.appendChild(this.input);\n  }\n\n  // Element creation helpers\n  private createButton(type: 'up' | 'down', isVertical = false): HTMLElement {\n    const button = document.createElement('button');\n\n    button.type = 'button';\n    button.tabIndex = this.settings.focusablebuttons ? 0 : -1;\n    button.setAttribute('data-touchspin-injected', type);\n    button.setAttribute('aria-label', type === 'up' ? 'Increase value' : 'Decrease value');\n\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) {\n      button.setAttribute('data-testid', `${inputTestId}-${type}`);\n    }\n\n    button.className = this.getButtonClass(type, isVertical);\n    const rawLabel = this.getButtonSetting(type, isVertical);\n    const fallback = this.getButtonFallback(type);\n    this.applyButtonLabel(button, rawLabel, fallback);\n\n    return button;\n  }\n\n  private createUpButton(): HTMLElement {\n    return this.createButton('up');\n  }\n\n  private createDownButton(): HTMLElement {\n    return this.createButton('down');\n  }\n\n  private createPrefixElement(): HTMLElement {\n    const element = document.createElement('span');\n    element.className = this.buildClasses([\n      CSS_CLASSES.INPUT_GROUP_TEXT,\n      'bootstrap-touchspin-prefix',\n      this.opts.prefix_extraclass\n    ]);\n    element.setAttribute('data-touchspin-injected', INJECTED_TYPES.PREFIX);\n    element.textContent = this.opts.prefix || '';\n\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) {\n      element.setAttribute('data-testid', `${inputTestId}-prefix`);\n    }\n\n    return element;\n  }\n\n  private createPostfixElement(): HTMLElement {\n    const element = document.createElement('span');\n    element.className = this.buildClasses([\n      CSS_CLASSES.INPUT_GROUP_TEXT,\n      'bootstrap-touchspin-postfix',\n      this.opts.postfix_extraclass\n    ]);\n    element.setAttribute('data-touchspin-injected', INJECTED_TYPES.POSTFIX);\n    element.textContent = this.opts.postfix || '';\n\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) {\n      element.setAttribute('data-testid', `${inputTestId}-postfix`);\n    }\n\n    return element;\n  }\n\n  private createVerticalButtonWrapper(): HTMLElement {\n    const wrapper = document.createElement('span');\n    wrapper.className = this.buildClasses([\n      CSS_CLASSES.INPUT_GROUP_TEXT,\n      'bootstrap-touchspin-vertical-button-wrapper'\n    ]);\n    wrapper.setAttribute('data-touchspin-injected', INJECTED_TYPES.VERTICAL_WRAPPER);\n\n    const buttonContainer = document.createElement('span');\n    buttonContainer.className = CSS_CLASSES.BTN_VERTICAL;\n\n    buttonContainer.appendChild(this.createButton('up', true));\n    buttonContainer.appendChild(this.createButton('down', true));\n\n    wrapper.appendChild(buttonContainer);\n    return wrapper;\n  }\n\n  // Utility helpers\n  private buildClasses(classes: (string | undefined)[]): string {\n    return classes.filter(Boolean).join(' ');\n  }\n\n  private getButtonClass(type: 'up' | 'down', isVertical = false): string {\n    const baseClass = type === 'up'\n      ? (this.opts.buttonup_class || CSS_CLASSES.DEFAULT_BUTTON)\n      : (this.opts.buttondown_class || CSS_CLASSES.DEFAULT_BUTTON);\n\n    const verticalClass = isVertical && type === 'up'\n      ? (this.opts.verticalupclass || CSS_CLASSES.DEFAULT_BUTTON)\n      : isVertical && type === 'down'\n        ? (this.opts.verticaldownclass || CSS_CLASSES.DEFAULT_BUTTON)\n        : '';\n\n    return this.buildClasses([\n      baseClass,\n      verticalClass,\n      `bootstrap-touchspin-${type}`\n    ]);\n  }\n\n  private getButtonSetting(type: 'up' | 'down', isVertical: boolean): string | null | undefined {\n    return isVertical\n      ? (type === 'up' ? this.opts.verticalup : this.opts.verticaldown)\n      : (type === 'up' ? this.opts.buttonup_txt : this.opts.buttondown_txt);\n  }\n\n  private getButtonFallback(type: 'up' | 'down'): string {\n    return type === 'up' ? BUTTON_TEXT.UP : BUTTON_TEXT.DOWN;\n  }\n\n  private detectInputGroupSize(): string {\n    const classList = this.input.className;\n    if (classList.includes('form-control-sm')) return 'input-group-sm';\n    if (classList.includes('form-control-lg')) return 'input-group-lg';\n    return '';\n  }\n\n  private findInjectedElement(type: string): HTMLElement | null {\n    return this.wrapper?.querySelector(`[data-touchspin-injected=\"${type}\"]`) as HTMLElement | null;\n  }\n\n  // DOM building coordination\n  buildAndAttachDOM(): void {\n    this.initializeOptions();\n    this.wrapper = this.buildInputGroup();\n    this.storeElementReferences(this.wrapper);\n    this.attachEventsToButtons();\n  }\n\n  private storeElementReferences(wrapper: HTMLElement | null): void {\n    if (!wrapper) return;\n\n    this.prefixEl = wrapper.querySelector(SELECTORS.PREFIX) as HTMLElement | null;\n    this.postfixEl = wrapper.querySelector(SELECTORS.POSTFIX) as HTMLElement | null;\n  }\n\n  private attachEventsToButtons(): void {\n    if (!this.wrapper) return;\n\n    const upButton = this.wrapper.querySelector(SELECTORS.UP_BUTTON);\n    const downButton = this.wrapper.querySelector(SELECTORS.DOWN_BUTTON);\n\n    this.core.attachUpEvents(upButton instanceof HTMLElement ? upButton : null);\n    this.core.attachDownEvents(downButton instanceof HTMLElement ? downButton : null);\n  }\n\n  // Setting observers\n  private registerSettingObservers(): void {\n    this.core.observeSetting('prefix', (value) => this.updatePrefix(value as string));\n    this.core.observeSetting('postfix', (value) => this.updatePostfix(value as string));\n    this.core.observeSetting('buttonup_class', (value) => this.updateButtonClass('up', value as string));\n    this.core.observeSetting('buttondown_class', (value) => this.updateButtonClass('down', value as string));\n    this.core.observeSetting('verticalupclass', (value) => this.updateVerticalButtonClass('up', value as string));\n    this.core.observeSetting('verticaldownclass', (value) => this.updateVerticalButtonClass('down', value as string));\n    this.core.observeSetting('verticalup', (value) => this.updateVerticalButtonText('up', value as string));\n    this.core.observeSetting('verticaldown', (value) => this.updateVerticalButtonText('down', value as string));\n    this.core.observeSetting('buttonup_txt', (value) => this.updateButtonText('up', value as string));\n    this.core.observeSetting('buttondown_txt', (value) => this.updateButtonText('down', value as string));\n    this.core.observeSetting('prefix_extraclass', () => this.updatePrefixClasses());\n    this.core.observeSetting('postfix_extraclass', () => this.updatePostfixClasses());\n    this.core.observeSetting('verticalbuttons', (value) => this.handleVerticalButtonsChange(value as boolean));\n    this.core.observeSetting('focusablebuttons', (value) => this.updateButtonFocusability(value as boolean));\n  }\n\n  // Update methods\n  updatePrefix(value: string): void {\n    if (value && value !== '') {\n      if (this.prefixEl) {\n        this.prefixEl.textContent = value;\n        this.prefixEl.style.display = '';\n        this.updatePrefixClasses();\n      } else {\n        this.rebuildDOM();\n      }\n    } else if (this.prefixEl) {\n      this.rebuildDOM();\n    }\n  }\n\n  updatePostfix(value: string): void {\n    if (value && value !== '') {\n      if (this.postfixEl) {\n        this.postfixEl.textContent = value;\n        this.postfixEl.style.display = '';\n        this.updatePostfixClasses();\n      } else {\n        this.rebuildDOM();\n      }\n    } else if (this.postfixEl) {\n      this.rebuildDOM();\n    }\n  }\n\n  updateButtonClass(type: 'up' | 'down', className: string | null | undefined): void {\n    const button = this.findInjectedElement(type);\n    if (button) {\n      button.className = this.buildClasses([\n        className || CSS_CLASSES.DEFAULT_BUTTON,\n        `bootstrap-touchspin-${type}`\n      ]);\n    }\n  }\n\n  updateVerticalButtonClass(type: 'up' | 'down', className: string | null | undefined): void {\n    const verticalWrapper = this.findInjectedElement(INJECTED_TYPES.VERTICAL_WRAPPER);\n    const button = verticalWrapper?.querySelector(`[data-touchspin-injected=\"${type}\"]`) as HTMLElement | null | undefined;\n\n    if (button) {\n      this.initializeOptions(); // Refresh opts for current values\n      const baseClass = type === 'up'\n        ? (this.opts.buttonup_class ?? CSS_CLASSES.DEFAULT_BUTTON)\n        : (this.opts.buttondown_class ?? CSS_CLASSES.DEFAULT_BUTTON);\n\n      button.className = this.buildClasses([\n        baseClass,\n        className ?? CSS_CLASSES.DEFAULT_BUTTON,\n        `bootstrap-touchspin-${type}`\n      ]);\n    }\n  }\n\n  updateVerticalButtonText(type: 'up' | 'down', text?: string): void {\n    const verticalWrapper = this.findInjectedElement(INJECTED_TYPES.VERTICAL_WRAPPER);\n    const button = verticalWrapper\n      ? verticalWrapper.querySelector<HTMLElement>(`[data-touchspin-injected=\"${type}\"]`)\n      : null;\n\n    if (button) {\n      this.initializeOptions();\n      const fallback = this.getButtonFallback(type);\n      const raw = text ?? this.getButtonSetting(type, true);\n      this.applyButtonLabel(button, raw, fallback);\n    }\n  }\n\n  updateButtonText(type: 'up' | 'down', text?: string): void {\n    const button = this.findInjectedElement(type);\n    if (button) {\n      this.initializeOptions();\n      const fallback = this.getButtonFallback(type);\n      const raw = text ?? this.getButtonSetting(type, false);\n      this.applyButtonLabel(button, raw, fallback);\n    }\n  }\n\n  updatePrefixClasses(): void {\n    if (this.prefixEl) {\n      this.initializeOptions(); // Refresh opts\n      this.prefixEl.className = this.buildClasses([\n        CSS_CLASSES.INPUT_GROUP_TEXT,\n        'bootstrap-touchspin-prefix',\n        this.opts.prefix_extraclass\n      ]);\n    }\n  }\n\n  updatePostfixClasses(): void {\n    if (this.postfixEl) {\n      this.initializeOptions(); // Refresh opts\n      this.postfixEl.className = this.buildClasses([\n        CSS_CLASSES.INPUT_GROUP_TEXT,\n        'bootstrap-touchspin-postfix',\n        this.opts.postfix_extraclass\n      ]);\n    }\n  }\n\n  updateButtonFocusability(newValue: boolean): void {\n    if (!this.wrapper) return;\n\n    const buttons = this.wrapper.querySelectorAll(`${SELECTORS.UP_BUTTON}, ${SELECTORS.DOWN_BUTTON}`);\n    const tabindex = newValue ? '0' : '-1';\n\n    buttons.forEach(button => {\n      button.setAttribute('tabindex', tabindex);\n    });\n  }\n\n  handleVerticalButtonsChange(_newValue: boolean): void {\n    this.rebuildDOM();\n  }\n\n  rebuildDOM(): void {\n    this.removeInjectedElements();\n    this.resetStateAfterRemoval();\n    this.buildAndAttachDOM();\n\n    if (this.wrapper) {\n      this.finalizeWrapperAttributes();\n    }\n  }\n\n  private resetStateAfterRemoval(): void {\n    this.wrapper = null;\n    this.prefixEl = null;\n    this.postfixEl = null;\n  }\n\n  private applyButtonLabel(button: HTMLElement, raw: string | null | undefined, fallback: string): void {\n    const { value, isHtml } = this.resolveButtonContent(raw, fallback);\n\n    if (isHtml) {\n      button.innerHTML = value;\n      return;\n    }\n\n    button.textContent = value;\n  }\n\n  private resolveButtonContent(raw: string | null | undefined, fallback: string): { value: string; isHtml: boolean } {\n    if (raw === undefined || raw === null) {\n      return { value: fallback, isHtml: false };\n    }\n\n    const trimmed = raw.trim();\n    if (trimmed === '') {\n      return { value: fallback, isHtml: false };\n    }\n\n    if (this.containsHtml(trimmed)) {\n      return { value: trimmed, isHtml: true };\n    }\n\n    const decoded = this.decodeHtml(trimmed);\n    if (decoded === undefined || decoded === '') {\n      return { value: fallback, isHtml: false };\n    }\n\n    return { value: decoded, isHtml: false };\n  }\n\n  private containsHtml(value: string): boolean {\n    return /<\\/?[a-zA-Z][\\s\\S]*>/.test(value);\n  }\n\n  private decodeHtml(value: string): string | undefined {\n    if (typeof document === 'undefined' || !value.includes('&')) return value;\n    const parser = document.createElement('textarea');\n    parser.innerHTML = value;\n    return parser.value;\n  }\n}\n\nexport default Bootstrap5Renderer;\n","/**\n * TouchSpin Bootstrap 5 Complete IIFE Bundle\n *\n * All-in-one bundle including:\n * - TouchSpin Core\n * - Bootstrap 5 renderer\n * - Auto-setup for test fixtures\n * - No jQuery dependency\n */\n\nimport { TouchSpin } from '@touchspin/core';\nimport Bootstrap5Renderer from './Bootstrap5Renderer.js';\n\n// Auto-install renderer as default (README-recommended approach)\n(globalThis as any).TouchSpinDefaultRenderer = Bootstrap5Renderer;\n\n// Expose everything needed for tests\n(window as any).TouchSpinCore = TouchSpin;\n(window as any).Bootstrap5Renderer = Bootstrap5Renderer;\n(window as any).testPageReady = true;"],"mappings":"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","names":[]}