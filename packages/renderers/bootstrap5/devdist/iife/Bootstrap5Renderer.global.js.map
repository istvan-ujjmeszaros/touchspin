{"version":3,"sources":["../../src/Bootstrap5Renderer.ts","../../../../core/src/AbstractRenderer.ts"],"sourcesContent":["import { AbstractRenderer } from '@touchspin/core/renderer';\nimport type { InferOptionsFromSchema, RendererOptionSchema } from '@touchspin/core/renderer';\n\n// Schema definition\nconst bootstrap5Schema = Object.freeze({\n  // Button text\n  buttonup_txt: { kind: 'string' },\n  buttondown_txt: { kind: 'string' },\n\n  // Button classes\n  buttonup_class: { kind: 'string' },\n  buttondown_class: { kind: 'string' },\n\n  // Vertical layout\n  verticalbuttons: { kind: 'boolean' },\n  verticalup: { kind: 'string' },\n  verticaldown: { kind: 'string' },\n  verticalupclass: { kind: 'string' },\n  verticaldownclass: { kind: 'string' },\n\n  // Prefix/postfix\n  prefix: { kind: 'string' },\n  postfix: { kind: 'string' },\n  prefix_extraclass: { kind: 'string' },\n  postfix_extraclass: { kind: 'string' },\n} as const satisfies RendererOptionSchema);\n\n// Constants\nconst CSS_CLASSES = {\n  FORM_CONTROL: 'form-control',\n  INPUT_GROUP: 'input-group',\n  INPUT_GROUP_TEXT: 'input-group-text',\n  BOOTSTRAP_TOUCHSPIN: 'bootstrap-touchspin',\n  BTN_VERTICAL: 'input-group-btn-vertical',\n  DEFAULT_BUTTON: 'btn btn-outline-secondary',\n} as const;\n\nconst SELECTORS = {\n  UP_BUTTON: '[data-touchspin-injected=\"up\"]',\n  DOWN_BUTTON: '[data-touchspin-injected=\"down\"]',\n  PREFIX: '[data-touchspin-injected=\"prefix\"]',\n  POSTFIX: '[data-touchspin-injected=\"postfix\"]',\n  VERTICAL_WRAPPER: '[data-touchspin-injected=\"vertical-wrapper\"]',\n} as const;\n\nconst BUTTON_TEXT = {\n  UP: '+',\n  DOWN: 'âˆ’',\n} as const;\n\nconst INJECTED_TYPES = {\n  UP: 'up',\n  DOWN: 'down',\n  PREFIX: 'prefix',\n  POSTFIX: 'postfix',\n  VERTICAL_WRAPPER: 'vertical-wrapper',\n} as const;\n\ntype RendererOptions = Readonly<Partial<InferOptionsFromSchema<typeof bootstrap5Schema>>>;\n\nclass Bootstrap5Renderer extends AbstractRenderer {\n  private readonly initialInputGroup: HTMLElement | null;\n  private opts: RendererOptions = {};\n  private prefixEl: HTMLElement | null = null;\n  private postfixEl: HTMLElement | null = null;\n  private formControlAdded = false;\n  declare wrapper: HTMLElement | null;\n\n  constructor(...args: ConstructorParameters<typeof AbstractRenderer>) {\n    super(...args);\n    const [input] = args;\n    this.initialInputGroup = input.closest(`.${CSS_CLASSES.INPUT_GROUP}`) as HTMLElement | null;\n  }\n\n  init(): void {\n    this.initializeOptions();\n    this.resetElementReferences();\n    this.ensureFormControlClass();\n    this.buildAndAttachDOM();\n    this.registerSettingObservers();\n  }\n\n  teardown(): void {\n    this.restoreFormControlClass();\n    super.teardown();\n  }\n\n  // Initialization helpers\n  private initializeOptions(): void {\n    this.opts = this.extractRendererSettings(bootstrap5Schema);\n  }\n\n  private resetElementReferences(): void {\n    this.prefixEl = null;\n    this.postfixEl = null;\n  }\n\n  private ensureFormControlClass(): void {\n    if (!this.input.classList.contains(CSS_CLASSES.FORM_CONTROL)) {\n      this.input.classList.add(CSS_CLASSES.FORM_CONTROL);\n      this.formControlAdded = true;\n    }\n  }\n\n  private restoreFormControlClass(): void {\n    if (this.formControlAdded) {\n      this.input.classList.remove(CSS_CLASSES.FORM_CONTROL);\n      this.formControlAdded = false;\n    }\n  }\n\n  // DOM building\n  buildInputGroup(): HTMLElement {\n    const closestGroup = this.input.closest(`.${CSS_CLASSES.INPUT_GROUP}`) as HTMLElement | null;\n    const existingInputGroup = closestGroup ?? this.initialInputGroup;\n\n    return existingInputGroup\n      ? this.buildAdvancedInputGroup(existingInputGroup)\n      : this.buildBasicInputGroup();\n  }\n\n  buildBasicInputGroup(): HTMLElement {\n    const inputGroupSize = this.detectInputGroupSize();\n    const wrapper = this.createInputGroupWrapper(inputGroupSize);\n\n    this.appendElementsToWrapper(wrapper);\n    this.insertWrapperAndInput(wrapper);\n    this.positionInputWithinWrapper(wrapper);\n\n    return wrapper;\n  }\n\n  buildAdvancedInputGroup(existingInputGroup: HTMLElement): HTMLElement {\n    existingInputGroup.classList.add(CSS_CLASSES.BOOTSTRAP_TOUCHSPIN);\n    this.wrapperType = 'wrapper-advanced';\n\n    this.insertElementsIntoExistingGroup(existingInputGroup);\n    this.storeElementReferences(existingInputGroup);\n\n    return existingInputGroup;\n  }\n\n  private createInputGroupWrapper(sizeClass: string): HTMLElement {\n    const wrapper = document.createElement('div');\n    wrapper.className = this.buildClasses([\n      CSS_CLASSES.INPUT_GROUP,\n      sizeClass,\n      CSS_CLASSES.BOOTSTRAP_TOUCHSPIN\n    ]);\n    return wrapper;\n  }\n\n  private appendElementsToWrapper(wrapper: HTMLElement): void {\n    if (!this.opts.verticalbuttons) {\n      wrapper.appendChild(this.createDownButton());\n    }\n\n    if (this.opts.prefix) {\n      wrapper.appendChild(this.createPrefixElement());\n    }\n\n    if (this.opts.postfix) {\n      wrapper.appendChild(this.createPostfixElement());\n    }\n\n    if (this.opts.verticalbuttons) {\n      wrapper.appendChild(this.createVerticalButtonWrapper());\n    } else {\n      wrapper.appendChild(this.createUpButton());\n    }\n  }\n\n  private insertWrapperAndInput(wrapper: HTMLElement): void {\n    if (this.input.parentElement) {\n      this.input.parentElement.insertBefore(wrapper, this.input);\n    }\n  }\n\n  private positionInputWithinWrapper(wrapper: HTMLElement): void {\n    const insertionPoint = this.findInputInsertionPoint(wrapper);\n    wrapper.insertBefore(this.input, insertionPoint);\n  }\n\n  private findInputInsertionPoint(wrapper: HTMLElement): Node | null {\n    if (this.opts.verticalbuttons) {\n      return this.findVerticalInsertionPoint(wrapper);\n    }\n    return this.findHorizontalInsertionPoint(wrapper);\n  }\n\n  private findVerticalInsertionPoint(wrapper: HTMLElement): Node | null {\n    const prefixEl = wrapper.querySelector(SELECTORS.PREFIX);\n    const postfixEl = wrapper.querySelector(SELECTORS.POSTFIX);\n    const verticalWrapper = wrapper.querySelector(SELECTORS.VERTICAL_WRAPPER);\n\n    if (prefixEl) return prefixEl.nextSibling;\n    if (postfixEl) return postfixEl;\n    return verticalWrapper;\n  }\n\n  private findHorizontalInsertionPoint(wrapper: HTMLElement): Node | null {\n    const prefixEl = wrapper.querySelector(SELECTORS.PREFIX);\n    const postfixEl = wrapper.querySelector(SELECTORS.POSTFIX);\n    const upButton = wrapper.querySelector(SELECTORS.UP_BUTTON);\n\n    if (prefixEl) return prefixEl.nextSibling;\n    if (postfixEl) return postfixEl;\n    return upButton;\n  }\n\n  private insertElementsIntoExistingGroup(existingInputGroup: HTMLElement): void {\n    // Ensure input is a child of the existing group before using it as a reference\n    this.ensureInputInGroup(existingInputGroup);\n\n    if (!this.opts.verticalbuttons) {\n      existingInputGroup.insertBefore(this.createDownButton(), this.input);\n    }\n\n    if (this.opts.prefix) {\n      existingInputGroup.insertBefore(this.createPrefixElement(), this.input);\n    }\n\n    if (this.opts.postfix) {\n      existingInputGroup.insertBefore(this.createPostfixElement(), this.input.nextSibling);\n    }\n\n    if (this.opts.verticalbuttons) {\n      const insertionPoint = this.opts.postfix\n        ? existingInputGroup.querySelector(SELECTORS.POSTFIX)?.nextSibling ?? null\n        : this.input.nextSibling;\n      existingInputGroup.insertBefore(this.createVerticalButtonWrapper(), insertionPoint);\n    } else {\n      const insertionPoint = this.opts.postfix\n        ? existingInputGroup.querySelector(SELECTORS.POSTFIX)?.nextSibling ?? null\n        : this.input.nextSibling;\n      existingInputGroup.insertBefore(this.createUpButton(), insertionPoint);\n    }\n  }\n\n  private ensureInputInGroup(existingInputGroup: HTMLElement): void {\n    // Check if input is already a direct child of the group\n    if (this.input.parentElement === existingInputGroup) {\n      return;\n    }\n\n    // If input is not in the group, append it (it may have been moved during DOM manipulations)\n    existingInputGroup.appendChild(this.input);\n  }\n\n  // Element creation helpers\n  private createButton(type: 'up' | 'down', isVertical = false): HTMLElement {\n    const button = document.createElement('button');\n\n    button.type = 'button';\n    button.tabIndex = this.settings.focusablebuttons ? 0 : -1;\n    button.setAttribute('data-touchspin-injected', type);\n    button.setAttribute('aria-label', type === 'up' ? 'Increase value' : 'Decrease value');\n\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) {\n      button.setAttribute('data-testid', `${inputTestId}-${type}`);\n    }\n\n    button.className = this.getButtonClass(type, isVertical);\n    const rawLabel = this.getButtonSetting(type, isVertical);\n    const fallback = this.getButtonFallback(type);\n    this.applyButtonLabel(button, rawLabel, fallback);\n\n    return button;\n  }\n\n  private createUpButton(): HTMLElement {\n    return this.createButton('up');\n  }\n\n  private createDownButton(): HTMLElement {\n    return this.createButton('down');\n  }\n\n  private createPrefixElement(): HTMLElement {\n    const element = document.createElement('span');\n    element.className = this.buildClasses([\n      CSS_CLASSES.INPUT_GROUP_TEXT,\n      'bootstrap-touchspin-prefix',\n      this.opts.prefix_extraclass\n    ]);\n    element.setAttribute('data-touchspin-injected', INJECTED_TYPES.PREFIX);\n    element.textContent = this.opts.prefix || '';\n\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) {\n      element.setAttribute('data-testid', `${inputTestId}-prefix`);\n    }\n\n    return element;\n  }\n\n  private createPostfixElement(): HTMLElement {\n    const element = document.createElement('span');\n    element.className = this.buildClasses([\n      CSS_CLASSES.INPUT_GROUP_TEXT,\n      'bootstrap-touchspin-postfix',\n      this.opts.postfix_extraclass\n    ]);\n    element.setAttribute('data-touchspin-injected', INJECTED_TYPES.POSTFIX);\n    element.textContent = this.opts.postfix || '';\n\n    const inputTestId = this.input.getAttribute('data-testid');\n    if (inputTestId) {\n      element.setAttribute('data-testid', `${inputTestId}-postfix`);\n    }\n\n    return element;\n  }\n\n  private createVerticalButtonWrapper(): HTMLElement {\n    const wrapper = document.createElement('span');\n    wrapper.className = this.buildClasses([\n      CSS_CLASSES.INPUT_GROUP_TEXT,\n      'bootstrap-touchspin-vertical-button-wrapper'\n    ]);\n    wrapper.setAttribute('data-touchspin-injected', INJECTED_TYPES.VERTICAL_WRAPPER);\n\n    const buttonContainer = document.createElement('span');\n    buttonContainer.className = CSS_CLASSES.BTN_VERTICAL;\n\n    buttonContainer.appendChild(this.createButton('up', true));\n    buttonContainer.appendChild(this.createButton('down', true));\n\n    wrapper.appendChild(buttonContainer);\n    return wrapper;\n  }\n\n  // Utility helpers\n  private buildClasses(classes: (string | undefined)[]): string {\n    return classes.filter(Boolean).join(' ');\n  }\n\n  private getButtonClass(type: 'up' | 'down', isVertical = false): string {\n    const baseClass = type === 'up'\n      ? (this.opts.buttonup_class || CSS_CLASSES.DEFAULT_BUTTON)\n      : (this.opts.buttondown_class || CSS_CLASSES.DEFAULT_BUTTON);\n\n    const verticalClass = isVertical && type === 'up'\n      ? (this.opts.verticalupclass || CSS_CLASSES.DEFAULT_BUTTON)\n      : isVertical && type === 'down'\n        ? (this.opts.verticaldownclass || CSS_CLASSES.DEFAULT_BUTTON)\n        : '';\n\n    return this.buildClasses([\n      baseClass,\n      verticalClass,\n      `bootstrap-touchspin-${type}`\n    ]);\n  }\n\n  private getButtonSetting(type: 'up' | 'down', isVertical: boolean): string | null | undefined {\n    return isVertical\n      ? (type === 'up' ? this.opts.verticalup : this.opts.verticaldown)\n      : (type === 'up' ? this.opts.buttonup_txt : this.opts.buttondown_txt);\n  }\n\n  private getButtonFallback(type: 'up' | 'down'): string {\n    return type === 'up' ? BUTTON_TEXT.UP : BUTTON_TEXT.DOWN;\n  }\n\n  private detectInputGroupSize(): string {\n    const classList = this.input.className;\n    if (classList.includes('form-control-sm')) return 'input-group-sm';\n    if (classList.includes('form-control-lg')) return 'input-group-lg';\n    return '';\n  }\n\n  private findInjectedElement(type: string): HTMLElement | null {\n    return this.wrapper?.querySelector(`[data-touchspin-injected=\"${type}\"]`) as HTMLElement | null;\n  }\n\n  // DOM building coordination\n  buildAndAttachDOM(): void {\n    this.initializeOptions();\n    this.wrapper = this.buildInputGroup();\n    this.storeElementReferences(this.wrapper);\n    this.attachEventsToButtons();\n  }\n\n  private storeElementReferences(wrapper: HTMLElement | null): void {\n    if (!wrapper) return;\n\n    this.prefixEl = wrapper.querySelector(SELECTORS.PREFIX) as HTMLElement | null;\n    this.postfixEl = wrapper.querySelector(SELECTORS.POSTFIX) as HTMLElement | null;\n  }\n\n  private attachEventsToButtons(): void {\n    if (!this.wrapper) return;\n\n    const upButton = this.wrapper.querySelector(SELECTORS.UP_BUTTON);\n    const downButton = this.wrapper.querySelector(SELECTORS.DOWN_BUTTON);\n\n    this.core.attachUpEvents(upButton instanceof HTMLElement ? upButton : null);\n    this.core.attachDownEvents(downButton instanceof HTMLElement ? downButton : null);\n  }\n\n  // Setting observers\n  private registerSettingObservers(): void {\n    this.core.observeSetting('prefix', (value) => this.updatePrefix(value as string));\n    this.core.observeSetting('postfix', (value) => this.updatePostfix(value as string));\n    this.core.observeSetting('buttonup_class', (value) => this.updateButtonClass('up', value as string));\n    this.core.observeSetting('buttondown_class', (value) => this.updateButtonClass('down', value as string));\n    this.core.observeSetting('verticalupclass', (value) => this.updateVerticalButtonClass('up', value as string));\n    this.core.observeSetting('verticaldownclass', (value) => this.updateVerticalButtonClass('down', value as string));\n    this.core.observeSetting('verticalup', (value) => this.updateVerticalButtonText('up', value as string));\n    this.core.observeSetting('verticaldown', (value) => this.updateVerticalButtonText('down', value as string));\n    this.core.observeSetting('buttonup_txt', (value) => this.updateButtonText('up', value as string));\n    this.core.observeSetting('buttondown_txt', (value) => this.updateButtonText('down', value as string));\n    this.core.observeSetting('prefix_extraclass', () => this.updatePrefixClasses());\n    this.core.observeSetting('postfix_extraclass', () => this.updatePostfixClasses());\n    this.core.observeSetting('verticalbuttons', (value) => this.handleVerticalButtonsChange(value as boolean));\n    this.core.observeSetting('focusablebuttons', (value) => this.updateButtonFocusability(value as boolean));\n  }\n\n  // Update methods\n  updatePrefix(value: string): void {\n    if (value && value !== '') {\n      if (this.prefixEl) {\n        this.prefixEl.textContent = value;\n        this.prefixEl.style.display = '';\n        this.updatePrefixClasses();\n      } else {\n        this.rebuildDOM();\n      }\n    } else if (this.prefixEl) {\n      this.rebuildDOM();\n    }\n  }\n\n  updatePostfix(value: string): void {\n    if (value && value !== '') {\n      if (this.postfixEl) {\n        this.postfixEl.textContent = value;\n        this.postfixEl.style.display = '';\n        this.updatePostfixClasses();\n      } else {\n        this.rebuildDOM();\n      }\n    } else if (this.postfixEl) {\n      this.rebuildDOM();\n    }\n  }\n\n  updateButtonClass(type: 'up' | 'down', className: string | null | undefined): void {\n    const button = this.findInjectedElement(type);\n    if (button) {\n      button.className = this.buildClasses([\n        className || CSS_CLASSES.DEFAULT_BUTTON,\n        `bootstrap-touchspin-${type}`\n      ]);\n    }\n  }\n\n  updateVerticalButtonClass(type: 'up' | 'down', className: string | null | undefined): void {\n    const verticalWrapper = this.findInjectedElement(INJECTED_TYPES.VERTICAL_WRAPPER);\n    const button = verticalWrapper?.querySelector(`[data-touchspin-injected=\"${type}\"]`) as HTMLElement | null | undefined;\n\n    if (button) {\n      this.initializeOptions(); // Refresh opts for current values\n      const baseClass = type === 'up'\n        ? (this.opts.buttonup_class ?? CSS_CLASSES.DEFAULT_BUTTON)\n        : (this.opts.buttondown_class ?? CSS_CLASSES.DEFAULT_BUTTON);\n\n      button.className = this.buildClasses([\n        baseClass,\n        className ?? CSS_CLASSES.DEFAULT_BUTTON,\n        `bootstrap-touchspin-${type}`\n      ]);\n    }\n  }\n\n  updateVerticalButtonText(type: 'up' | 'down', text?: string): void {\n    const verticalWrapper = this.findInjectedElement(INJECTED_TYPES.VERTICAL_WRAPPER);\n    const button = verticalWrapper\n      ? verticalWrapper.querySelector<HTMLElement>(`[data-touchspin-injected=\"${type}\"]`)\n      : null;\n\n    if (button) {\n      this.initializeOptions();\n      const fallback = this.getButtonFallback(type);\n      const raw = text ?? this.getButtonSetting(type, true);\n      this.applyButtonLabel(button, raw, fallback);\n    }\n  }\n\n  updateButtonText(type: 'up' | 'down', text?: string): void {\n    const button = this.findInjectedElement(type);\n    if (button) {\n      this.initializeOptions();\n      const fallback = this.getButtonFallback(type);\n      const raw = text ?? this.getButtonSetting(type, false);\n      this.applyButtonLabel(button, raw, fallback);\n    }\n  }\n\n  updatePrefixClasses(): void {\n    if (this.prefixEl) {\n      this.initializeOptions(); // Refresh opts\n      this.prefixEl.className = this.buildClasses([\n        CSS_CLASSES.INPUT_GROUP_TEXT,\n        'bootstrap-touchspin-prefix',\n        this.opts.prefix_extraclass\n      ]);\n    }\n  }\n\n  updatePostfixClasses(): void {\n    if (this.postfixEl) {\n      this.initializeOptions(); // Refresh opts\n      this.postfixEl.className = this.buildClasses([\n        CSS_CLASSES.INPUT_GROUP_TEXT,\n        'bootstrap-touchspin-postfix',\n        this.opts.postfix_extraclass\n      ]);\n    }\n  }\n\n  updateButtonFocusability(newValue: boolean): void {\n    if (!this.wrapper) return;\n\n    const buttons = this.wrapper.querySelectorAll(`${SELECTORS.UP_BUTTON}, ${SELECTORS.DOWN_BUTTON}`);\n    const tabindex = newValue ? '0' : '-1';\n\n    buttons.forEach(button => {\n      button.setAttribute('tabindex', tabindex);\n    });\n  }\n\n  handleVerticalButtonsChange(_newValue: boolean): void {\n    this.rebuildDOM();\n  }\n\n  rebuildDOM(): void {\n    this.removeInjectedElements();\n    this.resetStateAfterRemoval();\n    this.buildAndAttachDOM();\n\n    if (this.wrapper) {\n      this.finalizeWrapperAttributes();\n    }\n  }\n\n  private resetStateAfterRemoval(): void {\n    this.wrapper = null;\n    this.prefixEl = null;\n    this.postfixEl = null;\n  }\n\n  private applyButtonLabel(button: HTMLElement, raw: string | null | undefined, fallback: string): void {\n    const { value, isHtml } = this.resolveButtonContent(raw, fallback);\n\n    if (isHtml) {\n      button.innerHTML = value;\n      return;\n    }\n\n    button.textContent = value;\n  }\n\n  private resolveButtonContent(raw: string | null | undefined, fallback: string): { value: string; isHtml: boolean } {\n    if (raw === undefined || raw === null) {\n      return { value: fallback, isHtml: false };\n    }\n\n    const trimmed = raw.trim();\n    if (trimmed === '') {\n      return { value: fallback, isHtml: false };\n    }\n\n    if (this.containsHtml(trimmed)) {\n      return { value: trimmed, isHtml: true };\n    }\n\n    const decoded = this.decodeHtml(trimmed);\n    if (decoded === undefined || decoded === '') {\n      return { value: fallback, isHtml: false };\n    }\n\n    return { value: decoded, isHtml: false };\n  }\n\n  private containsHtml(value: string): boolean {\n    return /<\\/?[a-zA-Z][\\s\\S]*>/.test(value);\n  }\n\n  private decodeHtml(value: string): string | undefined {\n    if (typeof document === 'undefined' || !value.includes('&')) return value;\n    const parser = document.createElement('textarea');\n    parser.innerHTML = value;\n    return parser.value;\n  }\n}\n\nexport default Bootstrap5Renderer;\n","import type { TouchSpinCoreOptions } from './index';\nimport type { Renderer } from './renderer';\n\nexport type RendererOptionKind = 'string' | 'boolean' | 'number' | 'enum';\n\ntype RendererOptionDefinition =\n  | { kind: 'string' }\n  | { kind: 'boolean' }\n  | { kind: 'number' }\n  | { kind: 'enum'; values: readonly string[] };\n\nexport type RendererOptionDef = RendererOptionDefinition;\nexport type RendererOptionSchema = Readonly<Record<string, RendererOptionDefinition>>;\n\ntype RendererOptionValue<Definition extends RendererOptionDefinition> =\n  Definition extends { kind: 'string' }\n    ? string | undefined\n    : Definition extends { kind: 'boolean' }\n    ? boolean | undefined\n    : Definition extends { kind: 'number' }\n    ? number | undefined\n    : Definition extends { kind: 'enum'; values: readonly (infer Option)[] }\n    ? Option | undefined\n    : unknown;\n\nexport type InferOptionsFromSchema<Schema extends RendererOptionSchema> = {\n  [Key in keyof Schema]: RendererOptionValue<Schema[Key]>;\n};\n\ntype RendererCoreBridge = {\n  attachUpEvents: (element: HTMLElement | null) => void;\n  attachDownEvents: (element: HTMLElement | null) => void;\n  observeSetting: <Key extends keyof TouchSpinCoreOptions>(\n    key: Key,\n    listener: (value: NonNullable<TouchSpinCoreOptions[Key]>) => void\n  ) => () => void;\n};\n\ntype SettingsRecord = Record<string, unknown>;\n\nconst TOUCHSPIN_ATTRIBUTE = 'data-touchspin-injected';\nconst TEST_ID_ATTRIBUTE = 'data-testid';\nconst WRAPPER_TYPE_DEFAULT = 'wrapper';\nconst WRAPPER_TYPE_ADVANCED = 'wrapper-advanced';\nconst WRAPPER_READY_CLASS = 'bootstrap-touchspin';\n\nabstract class AbstractRenderer implements Renderer {\n  protected readonly input: HTMLInputElement;\n  protected readonly settings: Readonly<TouchSpinCoreOptions>;\n  protected readonly core: RendererCoreBridge;\n\n  protected wrapper: HTMLElement | null = null;\n  protected wrapperType = WRAPPER_TYPE_DEFAULT;\n\n  constructor(\n    input: HTMLInputElement,\n    settings: Readonly<TouchSpinCoreOptions>,\n    core: RendererCoreBridge\n  ) {\n    this.input = input;\n    this.settings = settings;\n    this.core = core;\n  }\n\n  abstract init(): void;\n\n  teardown(): void {\n    this.removeInjectedElements();\n  }\n\n  removeInjectedElements(): void {\n    this.removeInjectedNodesWithinWrapper();\n    this.removeNearbyInjectedNodes();\n  }\n\n  finalizeWrapperAttributes(): void {\n    if (!this.wrapper) return;\n\n    const testId = this.input.getAttribute(TEST_ID_ATTRIBUTE);\n    if (testId && !this.wrapper.hasAttribute(TEST_ID_ATTRIBUTE)) {\n      this.wrapper.setAttribute(TEST_ID_ATTRIBUTE, `${testId}-wrapper`);\n    }\n\n    this.wrapper.setAttribute(TOUCHSPIN_ATTRIBUTE, this.wrapperType);\n  }\n\n  getUpButtonTestId(): string {\n    return this.buildDataTestId('up');\n  }\n\n  getDownButtonTestId(): string {\n    return this.buildDataTestId('down');\n  }\n\n  getPrefixTestId(): string {\n    return this.buildDataTestId('prefix');\n  }\n\n  getPostfixTestId(): string {\n    return this.buildDataTestId('postfix');\n  }\n\n  protected extractRendererSettings<Schema extends RendererOptionSchema>(\n    schema: Schema,\n    sourceSettings: SettingsRecord = this.settings as SettingsRecord\n  ): Readonly<Partial<InferOptionsFromSchema<Schema>>> {\n    const selected: Record<string, unknown> = {};\n\n    for (const key in schema) {\n      if (Object.prototype.hasOwnProperty.call(sourceSettings, key)) {\n        selected[key] = sourceSettings[key];\n      }\n    }\n\n    return selected as Readonly<Partial<InferOptionsFromSchema<Schema>>>;\n  }\n\n  // Backward compatibility alias\n  protected projectRendererOptions<Schema extends RendererOptionSchema>(\n    schema: Schema,\n    from: Record<string, unknown> = this.settings as Record<string, unknown>\n  ): Readonly<Partial<InferOptionsFromSchema<Schema>>> {\n    return this.extractRendererSettings(schema, from);\n  }\n\n  private removeInjectedNodesWithinWrapper(): void {\n    const { wrapper } = this;\n    if (!wrapper) return;\n\n    wrapper\n      .querySelectorAll(`[${TOUCHSPIN_ATTRIBUTE}]`)\n      .forEach((element) => (element as HTMLElement).remove());\n\n    if (!wrapper.hasAttribute(TOUCHSPIN_ATTRIBUTE) || !wrapper.parentElement) {\n      return;\n    }\n\n    const wrapperType = wrapper.getAttribute(TOUCHSPIN_ATTRIBUTE);\n    if (wrapperType === WRAPPER_TYPE_ADVANCED) {\n      wrapper.classList.remove(WRAPPER_READY_CLASS);\n      wrapper.removeAttribute(TOUCHSPIN_ATTRIBUTE);\n      return;\n    }\n\n    wrapper.parentElement.insertBefore(this.input, wrapper);\n    wrapper.remove();\n  }\n\n  private removeNearbyInjectedNodes(): void {\n    const injectedNodes = document.querySelectorAll(`[${TOUCHSPIN_ATTRIBUTE}]`);\n\n    injectedNodes.forEach((node) => {\n      if (!(node instanceof HTMLElement)) return;\n      if (node === this.input) return;\n      if (!this.isNodeRelatedToInput(node)) return;\n\n      node.remove();\n    });\n  }\n\n  private isNodeRelatedToInput(node: Element): boolean {\n    const parent = node.parentElement;\n    const inputParent = this.input.parentElement;\n\n    const nodeContainsInput = node.contains(this.input);\n    const parentContainsInput = parent?.contains(this.input) ?? false;\n    const inputContainsNode = inputParent?.contains(node) ?? false;\n\n    return nodeContainsInput || parentContainsInput || inputContainsNode;\n  }\n\n  private buildDataTestId(suffix: string): string {\n    const base = this.input.getAttribute(TEST_ID_ATTRIBUTE);\n    return base ? ` data-testid=\"${base}-${suffix}\"` : '';\n  }\n}\n\nexport default AbstractRenderer;\n"],"mappings":"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","names":[]}