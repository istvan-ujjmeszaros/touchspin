{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Minimal local jQuery types to avoid hard module dependency at typecheck time\ntype JQueryInst = {\n  each: (cb: (this: Element) => void) => JQueryInst;\n  on: (...args: unknown[]) => JQueryInst;\n  off: (...args: unknown[]) => JQueryInst;\n  trigger: (...args: unknown[]) => JQueryInst;\n};\ntype JQueryStatic = {\n  fn: Record<string, unknown> & { TouchSpin?: (options?: unknown, arg?: unknown) => unknown };\n  (selector: Element | string): JQueryInst;\n};\nimport { TouchSpin, getTouchSpin, TouchSpinCallableEvent } from '@touchspin/core';\n\n// Re-export event types for external use\nexport { TouchSpinCallableEvent, TouchSpinEmittedEvent } from '@touchspin/core';\nexport type { TouchSpinUpdateSettingsData } from '@touchspin/core';\n\n/**\n * Install a minimal jQuery plugin wrapper that just forwards everything to core.\n * Contains NO logic - only forwards commands and events.\n * Core manages its own instance lifecycle on the input element.\n * @param {import('jquery').JQueryStatic} $\n */\nexport function installJqueryTouchSpin($: JQueryStatic) {\n  // Define the plugin with typed params and jQuery context\n  $.fn.TouchSpin = function(this: JQueryInst, options?: unknown, arg?: unknown): unknown {\n    // Command API - forward to core (core manages instance lifecycle)\n    if (typeof options === 'string') {\n      const cmd = String(options).toLowerCase();\n      let ret: unknown;\n      this.each(function(this: Element) {\n        const inputEl = this as HTMLInputElement;\n        const api = getTouchSpin(inputEl);\n\n        // Handle get/getvalue specially - fall back to raw input value if no instance\n        if ((cmd === 'getvalue' || cmd === 'get') && ret === undefined) {\n          if (api) {\n            ret = api.getValue();\n          } else {\n            // No TouchSpin instance - return raw input value\n            ret = inputEl.value;\n          }\n          return; // Skip other commands if no instance\n        }\n\n        if (!api) return; // No instance exists - other commands ignored\n\n        switch (cmd) {\n          case 'destroy': api.destroy(); break; // Core removes instance from element\n          case 'uponce': api.upOnce(); break;\n          case 'downonce': api.downOnce(); break;\n          case 'startupspin': api.startUpSpin(); break;\n          case 'startdownspin': api.startDownSpin(); break;\n          case 'stopspin': api.stopSpin(); break;\n          case 'updatesettings': api.updateSettings((arg as Record<string, unknown>) || {}); break;\n          case 'setvalue': case 'set': api.setValue(arg as number | string); break;\n        }\n      });\n      return ret === undefined ? this : (ret as unknown);\n    }\n\n    // Initialize - forward to core\n    return this.each(function(this: Element) {\n      const $input = $(this as Element);\n      const inputEl = this as HTMLInputElement;\n\n      // Create TouchSpin instance (core handles non-input validation)\n      const inst = TouchSpin(inputEl, (options as Partial<Record<string, unknown>>) || {});\n\n      // If TouchSpin returned null (non-input element), skip jQuery setup\n      if (!inst) {\n        return;\n      }\n\n\n      // Define jQuery teardown function that cleans up jQuery-specific resources\n      const jqueryTeardown = () => {\n        // Clean up ONLY the jQuery events that THIS plugin explicitly added\n        // Based on the callable events below: UP_ONCE, DOWN_ONCE, START_UP_SPIN, START_DOWN_SPIN, STOP_SPIN, UPDATE_SETTINGS, DESTROY, blur.touchspin\n        $input.off(`${TouchSpinCallableEvent.UP_ONCE} ${TouchSpinCallableEvent.DOWN_ONCE} ${TouchSpinCallableEvent.START_UP_SPIN} ${TouchSpinCallableEvent.START_DOWN_SPIN} ${TouchSpinCallableEvent.STOP_SPIN} ${TouchSpinCallableEvent.UPDATE_SETTINGS} ${TouchSpinCallableEvent.DESTROY} blur.touchspin`);\n      };\n\n      // Register teardown with core so it's called on core destroy too\n      inst.registerTeardown(jqueryTeardown);\n\n      // Callable events - forward to core (core manages lifecycle)\n      $input.on(TouchSpinCallableEvent.UP_ONCE, () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.upOnce();\n      });\n      $input.on(TouchSpinCallableEvent.DOWN_ONCE, () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.downOnce();\n      });\n      $input.on(TouchSpinCallableEvent.START_UP_SPIN, () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.startUpSpin();\n      });\n      $input.on(TouchSpinCallableEvent.START_DOWN_SPIN, () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.startDownSpin();\n      });\n      $input.on(TouchSpinCallableEvent.STOP_SPIN, () => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.stopSpin();\n      });\n      $input.on(TouchSpinCallableEvent.UPDATE_SETTINGS, (_e: unknown, o: unknown) => {\n        const api = getTouchSpin(inputEl);\n        if (api) api.updateSettings(o || {});\n      });\n      $input.on(TouchSpinCallableEvent.DESTROY, () => {\n        // Forward destroy to core (core will call registered teardown callbacks)\n        const api = getTouchSpin(inputEl);\n        if (api) api.destroy();\n      });\n\n      // Handle jQuery-triggered blur events for backward compatibility\n      // jQuery's .trigger('blur') doesn't fire native addEventListener('blur')\n      $input.on('blur.touchspin', () => {\n        const core = (inputEl as unknown as Record<string, unknown>)['_touchSpinCore'] as\n          | { _checkValue?: (finalize: boolean) => void }\n          | undefined;\n        core?._checkValue?.(true);\n      });\n    });\n  };\n}\n\n/**\n * Install the jQuery plugin and set a default renderer for TouchSpin.\n * Uses global window.jQuery if available; otherwise, requires manual\n * install via installJqueryTouchSpin($).\n */\ntype TSRenderer = new (\n  inputEl: HTMLInputElement,\n  settings: Readonly<Record<string, unknown>>,\n  core: unknown\n) => unknown;\n\nexport function installWithRenderer(renderer: unknown): void {\n  // Set the global default renderer consumed by core if no renderer is provided in options\n  (globalThis as unknown as { TouchSpinDefaultRenderer?: unknown }).TouchSpinDefaultRenderer = renderer;\n\n  const $ = (globalThis as unknown as { jQuery?: JQueryStatic }).jQuery;\n  if ($) {\n    installJqueryTouchSpin($);\n  } else {\n    console.warn('installWithRenderer: jQuery not found on window. Call installJqueryTouchSpin($) manually.');\n  }\n}\n"]}