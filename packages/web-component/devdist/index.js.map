{"version":3,"sources":["../src/TouchSpinInput.ts","../src/attribute-mapping.ts","../src/event-bridge.ts","../src/index.ts"],"sourcesContent":["/**\n * TouchSpinElement - Web Component implementation\n * Standards-based custom element providing TouchSpin functionality\n */\n\nimport { TouchSpin, getTouchSpin } from '@touchspin/core';\nimport { VanillaRenderer } from '@touchspin/renderer-vanilla';\nimport { getSettingsFromAttributes, OBSERVED_ATTRIBUTES, attributeToSetting, parseAttributeValue } from './attribute-mapping.js';\nimport { bridgeEvents } from './event-bridge.js';\n\n/**\n * TouchSpin Custom Element\n *\n * @example\n * <touchspin-input min=\"0\" max=\"100\" value=\"50\"></touchspin-input>\n */\nexport class TouchSpinInput extends HTMLElement {\n  private _touchspin: ReturnType<typeof TouchSpin> | null;\n  private _input: HTMLInputElement | null;\n  private _eventUnsubscribers: Array<() => void>;\n  private _isConnected: boolean;\n\n  /**\n   * Observed attributes for reactive updates\n   */\n  static get observedAttributes() {\n    return OBSERVED_ATTRIBUTES;\n  }\n\n  constructor() {\n    super();\n    this._touchspin = null;\n    this._input = null;\n    this._eventUnsubscribers = [];\n    this._isConnected = false;\n  }\n\n  /**\n   * Called when element is inserted into DOM\n   */\n  connectedCallback(): void {\n    this._isConnected = true;\n    this._initialize();\n  }\n\n  /**\n   * Called when element is removed from DOM\n   */\n  disconnectedCallback(): void {\n    this._isConnected = false;\n    this._cleanup();\n  }\n\n  /**\n   * Called when observed attributes change\n   * @param {string} name - Attribute name\n   * @param {string|null} oldValue - Previous value\n   * @param {string|null} newValue - New value\n   */\n  attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\n    if (!this._isConnected || !this._touchspin) return;\n\n    // Handle special attributes\n    if (name === 'value') {\n      if (newValue !== oldValue) {\n        this._touchspin.setValue(newValue ?? '');\n      }\n      return;\n    }\n\n    if (name === 'disabled') {\n      if (this._input) {\n        this._input.disabled = newValue !== null;\n      }\n      return;\n    }\n\n    if (name === 'readonly') {\n      if (this._input) {\n        this._input.readOnly = newValue !== null;\n      }\n      return;\n    }\n\n    // Handle renderer changes\n    if (name === 'renderer') {\n      this._handleRendererChange(newValue ?? '');\n      return;\n    }\n\n    // Handle other TouchSpin settings\n    const settingName = attributeToSetting(name);\n    const value = parseAttributeValue(newValue, settingName);\n\n    if (this._touchspin && this._touchspin.updateSettings) {\n      this._touchspin.updateSettings({ [settingName]: value });\n    }\n  }\n\n  /**\n   * Initialize TouchSpin instance\n   * @private\n   */\n  _initialize(): void {\n    // Find or create input element\n    this._input = (this.querySelector('input[type=\"number\"]') || this.querySelector('input')) as HTMLInputElement | null;\n\n    if (!this._input) {\n      this._input = document.createElement('input');\n      this._input.type = 'number';\n      this.appendChild(this._input);\n    }\n\n    // Get settings from attributes\n    const settings = getSettingsFromAttributes(this);\n\n    // Set default renderer if not specified\n    if (!settings.renderer) {\n      settings.renderer = VanillaRenderer;\n    } else if (typeof settings.renderer === 'string') {\n      settings.renderer = this._resolveRenderer(settings.renderer);\n    }\n\n    // Apply initial input attributes\n    this._applyInputAttributes();\n\n    // Initialize TouchSpin\n    this._touchspin = TouchSpin(this._input, settings as unknown as import('@touchspin/core').TouchSpinCoreOptions);\n\n    // Bridge events\n    if (this._touchspin) {\n      this._eventUnsubscribers = bridgeEvents(this._touchspin, this);\n    }\n  }\n\n  /**\n   * Apply HTML attributes to input element\n   * @private\n   */\n  _applyInputAttributes(): void {\n    if (!this._input) return;\n\n    // Apply value\n    const value = this.getAttribute('value');\n    if (value !== null) {\n      this._input.value = value;\n    }\n\n    // Apply disabled state\n    if (this.hasAttribute('disabled')) {\n      this._input.disabled = true;\n    }\n\n    // Apply readonly state\n    if (this.hasAttribute('readonly')) {\n      this._input.readOnly = true;\n    }\n\n    // Apply other native input attributes\n    const nativeAttributes = ['min', 'max', 'step', 'placeholder'];\n    for (const attr of nativeAttributes) {\n      const value = this.getAttribute(attr);\n      if (value !== null) {\n        this._input.setAttribute(attr, String(value));\n      }\n    }\n  }\n\n  /**\n   * Handle renderer changes\n   * @param {string} rendererName - Name of renderer to switch to\n   * @private\n   */\n  _handleRendererChange(rendererName: string): void {\n    if (!rendererName || !this._touchspin) return;\n\n    const renderer = this._resolveRenderer(rendererName);\n    if (renderer) {\n      // Recreate TouchSpin with new renderer\n      this._cleanup();\n      this._initialize();\n    }\n  }\n\n  /**\n   * Resolve renderer from string name\n   * @param {string} name - Renderer name\n   * @returns {Function|null} - Renderer class\n   * @private\n   */\n  _resolveRenderer(name: string) {\n    // This would need to be extended to support dynamic renderer loading\n    // For now, return VanillaRenderer as fallback\n    if (name === 'VanillaRenderer' || name === 'vanilla') {\n      return VanillaRenderer;\n    }\n\n    // Could be extended to support:\n    // - 'bootstrap5' -> Bootstrap5Renderer\n    // - 'tailwind' -> TailwindRenderer\n    // - etc.\n\n    console.warn(`Unknown renderer: ${name}, falling back to VanillaRenderer`);\n    return VanillaRenderer;\n  }\n\n  /**\n   * Cleanup TouchSpin instance and event listeners\n   * @private\n   */\n  _cleanup(): void {\n    // Cleanup event bridge\n    this._eventUnsubscribers.forEach(unsubscribe => unsubscribe());\n    this._eventUnsubscribers = [];\n\n    // Destroy TouchSpin instance\n    if (this._touchspin && this._touchspin.destroy) {\n      this._touchspin.destroy();\n    }\n    this._touchspin = null;\n  }\n\n  // Public API - Properties\n\n  /**\n   * Get/set current value\n   */\n  get value(): string | number {\n    return this._touchspin ? this._touchspin.getValue() : (this._input ? this._input.value : '');\n  }\n\n  set value(val: string | number) {\n    this.setAttribute('value', String(val));\n  }\n\n  /**\n   * Get/set minimum value\n   */\n  get min(): string | null {\n    return this.getAttribute('min');\n  }\n\n  set min(val: string | number | null) {\n    if (val === null) this.removeAttribute('min'); else this.setAttribute('min', String(val));\n  }\n\n  /**\n   * Get/set maximum value\n   */\n  get max(): string | null {\n    return this.getAttribute('max');\n  }\n\n  set max(val: string | number | null) {\n    if (val === null) this.removeAttribute('max'); else this.setAttribute('max', String(val));\n  }\n\n  /**\n   * Get/set step value\n   */\n  get step(): string | null {\n    return this.getAttribute('step');\n  }\n\n  set step(val: string | number | null) {\n    if (val === null) this.removeAttribute('step'); else this.setAttribute('step', String(val));\n  }\n\n  /**\n   * Get/set disabled state\n   */\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(val: boolean) {\n    if (val) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  /**\n   * Get/set readonly state\n   */\n  get readonly(): boolean {\n    return this.hasAttribute('readonly');\n  }\n\n  set readonly(val: boolean) {\n    if (val) {\n      this.setAttribute('readonly', '');\n    } else {\n      this.removeAttribute('readonly');\n    }\n  }\n\n  // Public API - Methods\n\n  /**\n   * Increment value once\n   */\n  upOnce(): void {\n    if (this._touchspin && this._touchspin.upOnce) {\n      this._touchspin.upOnce();\n    }\n  }\n\n  /**\n   * Decrement value once\n   */\n  downOnce(): void {\n    if (this._touchspin && this._touchspin.downOnce) {\n      this._touchspin.downOnce();\n    }\n  }\n\n  /**\n   * Start spinning up\n   */\n  startUpSpin(): void {\n    if (this._touchspin && this._touchspin.startUpSpin) {\n      this._touchspin.startUpSpin();\n    }\n  }\n\n  /**\n   * Start spinning down\n   */\n  startDownSpin(): void {\n    if (this._touchspin && this._touchspin.startDownSpin) {\n      this._touchspin.startDownSpin();\n    }\n  }\n\n  /**\n   * Stop spinning\n   */\n  stopSpin(): void {\n    if (this._touchspin && this._touchspin.stopSpin) {\n      this._touchspin.stopSpin();\n    }\n  }\n\n  /**\n   * Update TouchSpin settings\n   * @param {Object} options - Settings to update\n   */\n  updateSettings(options: Record<string, unknown>): void {\n    if (this._touchspin && this._touchspin.updateSettings) {\n      this._touchspin.updateSettings(options);\n    }\n  }\n\n  /**\n   * Get TouchSpin instance (for advanced usage)\n   * @returns {Object|null} - TouchSpin instance\n   */\n  getTouchSpinInstance() {\n    return this._touchspin;\n  }\n\n  /**\n   * Manually destroy and cleanup\n   */\n  destroy(): void {\n    this._cleanup();\n  }\n}\n","/**\n * Utility functions for mapping HTML attributes to TouchSpin settings\n */\n\n/**\n * Convert kebab-case attribute names to camelCase setting names\n * @param {string} attrName - HTML attribute name (e.g. 'vertical-buttons')\n * @returns {string} - TouchSpin setting name (e.g. 'verticalbuttons')\n */\nexport function attributeToSetting(attrName: string): string {\n  const mapping = {\n    'vertical-buttons': 'verticalbuttons',\n    'vertical-up': 'verticalup',\n    'vertical-down': 'verticaldown',\n    'vertical-up-class': 'verticalupclass',\n    'vertical-down-class': 'verticaldownclass',\n    'button-up-class': 'buttonup_class',\n    'button-down-class': 'buttondown_class',\n    'button-up-txt': 'buttonup_txt',\n    'button-down-txt': 'buttondown_txt',\n    'prefix-class': 'prefix_extraclass',\n    'postfix-class': 'postfix_extraclass',\n    'force-step-divisibility': 'forcestepdivisibility',\n    'step-interval': 'stepinterval',\n    'step-interval-delay': 'stepintervaldelay',\n    'boost-at': 'boostat',\n    'max-boosted-step': 'maxboostedstep',\n    'mouse-wheel': 'mousewheel',\n    'init-val': 'initval',\n    'replacement-val': 'replacementval',\n    'focusable-buttons': 'focusablebuttons'\n  } as const satisfies Record<string, string>;\n\n  return (mapping as Record<string, string>)[attrName] || attrName;\n}\n\n/**\n * Parse attribute value to appropriate JavaScript type\n * @param {string} value - Raw attribute value\n * @param {string} settingName - TouchSpin setting name\n * @returns {any} - Parsed value\n */\n// TODO: refine type\nexport function parseAttributeValue(value: string | null, settingName: string): unknown {\n  if (value === null) return null;\n  if (value === '') return true; // Boolean attributes present without value\n\n  // Boolean settings\n  const booleanSettings = [\n    'verticalbuttons', 'mousewheel', 'booster', 'focusablebuttons'\n  ] as const;\n\n  if ((booleanSettings as readonly string[]).includes(settingName)) {\n    return value === 'true' || value === '';\n  }\n\n  // Number settings\n  const numberSettings = [\n    'min', 'max', 'step', 'decimals', 'stepinterval', 'stepintervaldelay',\n    'boostat', 'maxboostedstep', 'firstclickvalueifempty'\n  ] as const;\n\n  if ((numberSettings as readonly string[]).includes(settingName)) {\n    const num = Number(value);\n    return isNaN(num) ? null : num;\n  }\n\n  // String settings - return as-is\n  return value;\n}\n\n/**\n * Get all TouchSpin settings from element attributes\n * @param {HTMLElement} element - Custom element instance\n * @returns {Object} - TouchSpin settings object\n */\nexport function getSettingsFromAttributes(element: HTMLElement): Record<string, unknown> {\n  const settings: Record<string, unknown> = {};\n\n  // Get all attributes (ensure iterable in TS)\n  for (const attr of Array.from(element.attributes)) {\n    if (attr.name === 'is' || attr.name.startsWith('data-testid')) {\n      continue; // Skip special attributes\n    }\n\n    const settingName = attributeToSetting(attr.name);\n    const value = parseAttributeValue(attr.value, settingName);\n\n    if (value !== null) {\n      settings[settingName] = value;\n    }\n  }\n\n  return settings;\n}\n\n/**\n * List of attributes that should trigger TouchSpin updates when changed\n */\nexport const OBSERVED_ATTRIBUTES = [\n  'min',\n  'max',\n  'step',\n  'value',\n  'decimals',\n  'prefix',\n  'postfix',\n  'vertical-buttons',\n  'vertical-up',\n  'vertical-down',\n  'button-up-txt',\n  'button-down-txt',\n  'mouse-wheel',\n  'disabled',\n  'readonly',\n  'renderer',\n  'force-step-divisibility',\n  'step-interval',\n  'step-interval-delay',\n  'booster',\n  'boost-at',\n  'max-boosted-step'\n ] as const;\n","/**\n * Event bridging utilities for TouchSpin Web Component\n * Converts TouchSpin core events to CustomEvents\n */\n\nimport { CORE_EVENTS } from '@touchspin/core';\n\n/**\n * Map core event names to custom event names\n */\nexport const EVENT_NAME_MAP: Record<(typeof CORE_EVENTS)[keyof typeof CORE_EVENTS], string> = {\n  [CORE_EVENTS.MIN]: 'touchspin-min',\n  [CORE_EVENTS.MAX]: 'touchspin-max',\n  [CORE_EVENTS.START_SPIN]: 'touchspin-start-spin',\n  [CORE_EVENTS.START_UP]: 'touchspin-start-up',\n  [CORE_EVENTS.START_DOWN]: 'touchspin-start-down',\n  [CORE_EVENTS.STOP_SPIN]: 'touchspin-stop-spin',\n  [CORE_EVENTS.STOP_UP]: 'touchspin-stop-up',\n  [CORE_EVENTS.STOP_DOWN]: 'touchspin-stop-down'\n};\n\n/**\n * Bridge TouchSpin core events to CustomEvents\n * @param {Object} touchspinInstance - TouchSpin core instance\n * @param {HTMLElement} element - Custom element to dispatch events from\n * @returns {Function[]} - Array of cleanup functions\n */\nexport function bridgeEvents(\n  touchspinInstance: { getValue: () => number },\n  element: HTMLElement\n): Array<() => void> {\n  const cleanupFunctions: Array<() => void> = [];\n\n  // Core DOM event name to web-component event name mapping\n  const domToCustomEventMap: Record<string, string> = {\n    'touchspin.on.min': 'touchspin-min',\n    'touchspin.on.max': 'touchspin-max',\n    'touchspin.on.startspin': 'touchspin-start-spin',\n    'touchspin.on.startupspin': 'touchspin-start-up',\n    'touchspin.on.startdownspin': 'touchspin-start-down',\n    'touchspin.on.stopspin': 'touchspin-stop-spin',\n    'touchspin.on.stopupspin': 'touchspin-stop-up',\n    'touchspin.on.stopdownspin': 'touchspin-stop-down'\n  };\n\n  // Listen for Core DOM CustomEvents and re-dispatch with web-component naming\n  Object.entries(domToCustomEventMap).forEach(([domEventName, customEventName]) => {\n    const handler = (e: Event) => {\n      const customEvent = new CustomEvent(customEventName, {\n        detail: {\n          value: touchspinInstance.getValue(),\n          instance: touchspinInstance,\n          originalEvent: e\n        },\n        bubbles: true,\n        cancelable: true\n      });\n\n      element.dispatchEvent(customEvent);\n    };\n\n    // Listen for DOM events dispatched by TouchSpin Core\n    const input = element.querySelector('input');\n    if (input) {\n      input.addEventListener(domEventName, handler);\n      cleanupFunctions.push(() => input.removeEventListener(domEventName, handler));\n    }\n  });\n\n  // Bridge input change events\n  const input = element.querySelector('input');\n  if (input) {\n    const handleInputChange = (e: Event) => {\n      const customEvent = new CustomEvent('touchspin-change', {\n        detail: {\n          value: (e.target as HTMLInputElement).value,\n          originalEvent: e,\n          instance: touchspinInstance\n        },\n        bubbles: true,\n        cancelable: true\n      });\n\n      element.dispatchEvent(customEvent);\n    };\n\n    input.addEventListener('change', handleInputChange);\n    cleanupFunctions.push(() => input.removeEventListener('change', handleInputChange));\n  }\n\n  return cleanupFunctions;\n}\n\n/**\n * Get all available TouchSpin event names for documentation\n * @returns {string[]} - Array of custom event names\n */\nexport function getAvailableEvents(): string[] {\n  return [\n    ...Object.values(EVENT_NAME_MAP),\n    'touchspin-change' // Input change event\n  ];\n}\n","/**\n * TouchSpin Web Component - Main entry point\n * Standards-based custom element for framework-agnostic usage\n */\n\nimport { TouchSpinInput } from './TouchSpinInput.js';\n\n// Register the custom element\nif (!customElements.get('touchspin-input')) {\n  customElements.define('touchspin-input', TouchSpinInput);\n}\n\n// Export for manual registration with different names\nexport { TouchSpinInput };\n\n// Export utilities for advanced usage\nexport { getSettingsFromAttributes, attributeToSetting, parseAttributeValue, OBSERVED_ATTRIBUTES } from './attribute-mapping.js';\nexport { bridgeEvents, EVENT_NAME_MAP, getAvailableEvents } from './event-bridge.js';\n\n// Default export for convenience\nexport default TouchSpinInput;\n"],"mappings":"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","names":["input","value"]}